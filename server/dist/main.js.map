{"version":3,"file":"main.js","mappings":"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L,EAAAC,0BACG,EAAAC,6BACC,EAAAC,iCAjBvCtC,E,ycCrBb,gBACA,UACA,UAEA,UAGA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,QACA,UACA,SACA,UACA,UACA,WACA,WACA,WACA,WAEA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,WACA,WACA,WAEA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAyFO,IAAMuC,GAAN,QAAM,EAAAA,UAAAA,G,YAAAA,GAAS,IAxFrB,IAAAC,QAAO,CACNC,QAAS,CAEP,EAAAC,WAEA,EAAAC,WACA,EAAAC,eACA,EAAAC,gBACA,GAAAC,aAEA,EAAAC,cAAcC,aAAa,GAAAC,oBAE3B,EAAAC,iBACA,EAAAC,iBAEA,EAAAC,gBAEA,EAAAC,iBACA,EAAAC,wBACA,EAAAC,qBACA,EAAAC,oBACA,EAAAC,0BACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,uBACA,EAAAC,kBACA,EAAAC,cACA,EAAAC,eACA,EAAAC,sBACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,kBACA,EAAAC,qBACA,EAAAC,sBACA,EAAAC,uBAEA,EAAAC,kBACA,EAAAC,uBACA,EAAAC,iBACA,EAAAC,6BACA,EAAAC,sBACA,EAAAC,uBACA,EAAAC,kBACA,EAAAC,wBAEA,EAAAC,kCACA,EAAAC,iCACA,EAAAC,2BACA,EAAAC,8BACA,EAAAC,gCACA,EAAAC,8BACA,EAAAC,4BACA,EAAAC,kCACA,EAAAC,2BACA,EAAAC,eACA,EAAAC,kBACA,EAAAC,qBACA,GAAAC,gBACA,EAAAC,+BACA,GAAAC,mBACA,GAAAC,mBACA,EAAAlD,eACA,GAAAmD,yBACA,GAAAC,WACA,GAAAC,sBACA,EAAAC,iBACA,GAAAC,cAEFC,YAAa,C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","sources":["webpack://nest-js_server/./LS_Admin.js","webpack://nest-js_server/./PLC/Lib/libFins/constants.js","webpack://nest-js_server/./PLC/Lib/libFins/fins_client.js","webpack://nest-js_server/./PLC/Lib/libFins/index.js","webpack://nest-js_server/./PLC/Lib/libSiemens/nodeS7.js","webpack://nest-js_server/./SubFunction.js","webpack://nest-js_server/./Variable.js","webpack://nest-js_server/./VariableSystem.js","webpack://nest-js_server/./src/app.controller.ts","webpack://nest-js_server/./src/app.module.ts","webpack://nest-js_server/./src/config/config.module.ts","webpack://nest-js_server/./src/config/config.service.ts","webpack://nest-js_server/./src/database/typeorm.config.ts","webpack://nest-js_server/./src/microservice-client/microservice-client.controller.ts","webpack://nest-js_server/./src/microservice-client/microservice-client.module.ts","webpack://nest-js_server/./src/microservice-client/microservice-client.service.ts","webpack://nest-js_server/./src/mqtt/mqtt.module.ts","webpack://nest-js_server/./src/mqtt/mqtt.service.ts","webpack://nest-js_server/./src/note/note.module.ts","webpack://nest-js_server/./src/post/post.module.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.controller.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.entity.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.module.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.service.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.controller.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.entity.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.module.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.service.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.controller.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.entity.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.module.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.service.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust-refresh.service.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.controller.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.entity.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.module.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.service.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.controller.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.entity.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.module.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.service.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display-refresh.service.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.controller.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.entity.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.module.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.service.ts","webpack://nest-js_server/./src/scada_bit-image-library/scada_bit-image-library.controller.ts","webpack://nest-js_server/./src/scada_bit-image-library/scada_bit-image-library.entity.ts","webpack://nest-js_server/./src/scada_bit-image-library/scada_bit-image-library.module.ts","webpack://nest-js_server/./src/scada_bit-image-library/scada_bit-image-library.service.ts","webpack://nest-js_server/./src/scada_bit/scada_bit-refresh.service.ts","webpack://nest-js_server/./src/scada_bit/scada_bit.controller.ts","webpack://nest-js_server/./src/scada_bit/scada_bit.entity.ts","webpack://nest-js_server/./src/scada_bit/scada_bit.module.ts","webpack://nest-js_server/./src/scada_bit/scada_bit.service.ts","webpack://nest-js_server/./src/scada_camera_stream/scada_camera_stream.controller.ts","webpack://nest-js_server/./src/scada_camera_stream/scada_camera_stream.entity.ts","webpack://nest-js_server/./src/scada_camera_stream/scada_camera_stream.module.ts","webpack://nest-js_server/./src/scada_camera_stream/scada_camera_stream.service.ts","webpack://nest-js_server/./src/scada_chart/scada_chart.controller.ts","webpack://nest-js_server/./src/scada_chart/scada_chart.entity.ts","webpack://nest-js_server/./src/scada_chart/scada_chart.module.ts","webpack://nest-js_server/./src/scada_chart/scada_chart.service.ts","webpack://nest-js_server/./src/scada_connection/scada_connection.controller.ts","webpack://nest-js_server/./src/scada_connection/scada_connection.entity.ts","webpack://nest-js_server/./src/scada_connection/scada_connection.module.ts","webpack://nest-js_server/./src/scada_connection/scada_connection.service.ts","webpack://nest-js_server/./src/scada_date-time-picker/scada_dateTimePicker.controller.ts","webpack://nest-js_server/./src/scada_date-time-picker/scada_dateTimePicker.entity.ts","webpack://nest-js_server/./src/scada_date-time-picker/scada_dateTimePicker.module.ts","webpack://nest-js_server/./src/scada_date-time-picker/scada_dateTimePicker.service.ts","webpack://nest-js_server/./src/scada_design-image-library/scada_design-image-library.controller.ts","webpack://nest-js_server/./src/scada_design-image-library/scada_design-image-library.entity.ts","webpack://nest-js_server/./src/scada_design-image-library/scada_design-image-library.module.ts","webpack://nest-js_server/./src/scada_design-image-library/scada_design-image-library.service.ts","webpack://nest-js_server/./src/scada_design/scada_design.controller.ts","webpack://nest-js_server/./src/scada_design/scada_design.entity.ts","webpack://nest-js_server/./src/scada_design/scada_design.module.ts","webpack://nest-js_server/./src/scada_design/scada_design.service.ts","webpack://nest-js_server/./src/scada_design_table/scada_design_table.controller.ts","webpack://nest-js_server/./src/scada_design_table/scada_design_table.entity.ts","webpack://nest-js_server/./src/scada_design_table/scada_design_table.module.ts","webpack://nest-js_server/./src/scada_design_table/scada_design_table.service.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust-refresh.service.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.controller.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.entity.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.module.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.service.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display-refresh.service.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.controller.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.entity.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.module.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.service.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.controller.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.entity.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.module.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.service.ts","webpack://nest-js_server/./src/scada_element/scada_element-refresh.service.ts","webpack://nest-js_server/./src/scada_element/scada_element.controller.ts","webpack://nest-js_server/./src/scada_element/scada_element.entity.ts","webpack://nest-js_server/./src/scada_element/scada_element.module.ts","webpack://nest-js_server/./src/scada_element/scada_element.service.ts","webpack://nest-js_server/./src/scada_gauge/scada_gauge-refresh.service.ts","webpack://nest-js_server/./src/scada_gauge/scada_gauge.controller.ts","webpack://nest-js_server/./src/scada_gauge/scada_gauge.entity.ts","webpack://nest-js_server/./src/scada_gauge/scada_gauge.module.ts","webpack://nest-js_server/./src/scada_gauge/scada_gauge.service.ts","webpack://nest-js_server/./src/scada_gridView/scada_gridView.controller.ts","webpack://nest-js_server/./src/scada_gridView/scada_gridView.entity.ts","webpack://nest-js_server/./src/scada_gridView/scada_gridView.module.ts","webpack://nest-js_server/./src/scada_gridView/scada_gridView.service.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.controller.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.entity.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.module.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.service.ts","webpack://nest-js_server/./src/scada_label/scada_label.controller.ts","webpack://nest-js_server/./src/scada_label/scada_label.entity.ts","webpack://nest-js_server/./src/scada_label/scada_label.module.ts","webpack://nest-js_server/./src/scada_label/scada_label.service.ts","webpack://nest-js_server/./src/scada_line/scada_line.controller.ts","webpack://nest-js_server/./src/scada_line/scada_line.entity.ts","webpack://nest-js_server/./src/scada_line/scada_line.module.ts","webpack://nest-js_server/./src/scada_line/scada_line.service.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.controller.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.entity.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.module.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.service.ts","webpack://nest-js_server/./src/scada_map/scada_map.controller.ts","webpack://nest-js_server/./src/scada_map/scada_map.entity.ts","webpack://nest-js_server/./src/scada_map/scada_map.module.ts","webpack://nest-js_server/./src/scada_map/scada_map.service.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.controller.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.entity.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.module.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.service.ts","webpack://nest-js_server/./src/scada_navigate-image-library/scada_navigate-image-library.controller.ts","webpack://nest-js_server/./src/scada_navigate-image-library/scada_navigate-image-library.entity.ts","webpack://nest-js_server/./src/scada_navigate-image-library/scada_navigate-image-library.module.ts","webpack://nest-js_server/./src/scada_navigate-image-library/scada_navigate-image-library.service.ts","webpack://nest-js_server/./src/scada_navigate/scada_navigate.controller.ts","webpack://nest-js_server/./src/scada_navigate/scada_navigate.entity.ts","webpack://nest-js_server/./src/scada_navigate/scada_navigate.module.ts","webpack://nest-js_server/./src/scada_navigate/scada_navigate.service.ts","webpack://nest-js_server/./src/scada_number-image-library/scada_number-image-library.controller.ts","webpack://nest-js_server/./src/scada_number-image-library/scada_number-image-library.entity.ts","webpack://nest-js_server/./src/scada_number-image-library/scada_number-image-library.module.ts","webpack://nest-js_server/./src/scada_number-image-library/scada_number-image-library.service.ts","webpack://nest-js_server/./src/scada_number/scada_number-refresh.service.ts","webpack://nest-js_server/./src/scada_number/scada_number.controller.ts","webpack://nest-js_server/./src/scada_number/scada_number.entity.ts","webpack://nest-js_server/./src/scada_number/scada_number.module.ts","webpack://nest-js_server/./src/scada_number/scada_number.service.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.controller.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.entity.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.module.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.service.ts","webpack://nest-js_server/./src/scada_popup-image-library/scada_popup-image-library.controller.ts","webpack://nest-js_server/./src/scada_popup-image-library/scada_popup-image-library.entity.ts","webpack://nest-js_server/./src/scada_popup-image-library/scada_popup-image-library.module.ts","webpack://nest-js_server/./src/scada_popup-image-library/scada_popup-image-library.service.ts","webpack://nest-js_server/./src/scada_popup/scada_popup.controller.ts","webpack://nest-js_server/./src/scada_popup/scada_popup.entity.ts","webpack://nest-js_server/./src/scada_popup/scada_popup.module.ts","webpack://nest-js_server/./src/scada_popup/scada_popup.service.ts","webpack://nest-js_server/./src/scada_print/scada_print.controller.ts","webpack://nest-js_server/./src/scada_print/scada_print.entity.ts","webpack://nest-js_server/./src/scada_print/scada_print.module.ts","webpack://nest-js_server/./src/scada_print/scada_print.service.ts","webpack://nest-js_server/./src/scada_progress_bar/scada_progress_bar-refresh.service.ts","webpack://nest-js_server/./src/scada_progress_bar/scada_progress_bar.controller.ts","webpack://nest-js_server/./src/scada_progress_bar/scada_progress_bar.entity.ts","webpack://nest-js_server/./src/scada_progress_bar/scada_progress_bar.module.ts","webpack://nest-js_server/./src/scada_progress_bar/scada_progress_bar.service.ts","webpack://nest-js_server/./src/scada_report/scada_report.controller.ts","webpack://nest-js_server/./src/scada_report/scada_report.entity.ts","webpack://nest-js_server/./src/scada_report/scada_report.module.ts","webpack://nest-js_server/./src/scada_report/scada_report.service.ts","webpack://nest-js_server/./src/scada_select/scada_select.controller.ts","webpack://nest-js_server/./src/scada_select/scada_select.entity.ts","webpack://nest-js_server/./src/scada_select/scada_select.module.ts","webpack://nest-js_server/./src/scada_select/scada_select.service.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm-refresh.service.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.controller.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.entity.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.module.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.service.ts","webpack://nest-js_server/./src/scada_slider/scada_slider-refresh.service.ts","webpack://nest-js_server/./src/scada_slider/scada_slider.controller.ts","webpack://nest-js_server/./src/scada_slider/scada_slider.entity.ts","webpack://nest-js_server/./src/scada_slider/scada_slider.module.ts","webpack://nest-js_server/./src/scada_slider/scada_slider.service.ts","webpack://nest-js_server/./src/scada_string/scada_string-refresh.service.ts","webpack://nest-js_server/./src/scada_string/scada_string.controller.ts","webpack://nest-js_server/./src/scada_string/scada_string.entity.ts","webpack://nest-js_server/./src/scada_string/scada_string.module.ts","webpack://nest-js_server/./src/scada_string/scada_string.service.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field-refresh.service.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.controller.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.entity.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.module.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.service.ts","webpack://nest-js_server/./src/scada_total/scada_total.controller.ts","webpack://nest-js_server/./src/scada_total/scada_total.module.ts","webpack://nest-js_server/./src/scada_total/scada_total.service.ts","webpack://nest-js_server/./src/scada_user/dto/index.ts","webpack://nest-js_server/./src/scada_user/dto/user.dto.ts","webpack://nest-js_server/./src/scada_user/scada_user.controller.ts","webpack://nest-js_server/./src/scada_user/scada_user.entity.ts","webpack://nest-js_server/./src/scada_user/scada_user.module.ts","webpack://nest-js_server/./src/scada_user/scada_user.service.ts","webpack://nest-js_server/./src/scada_user/strategy/index.ts","webpack://nest-js_server/./src/scada_user/strategy/jwt.strategy.ts","webpack://nest-js_server/./src/scada_viewImage/scada_viewImage.controller.ts","webpack://nest-js_server/./src/scada_viewImage/scada_viewImage.entity.ts","webpack://nest-js_server/./src/scada_viewImage/scada_viewImage.module.ts","webpack://nest-js_server/./src/scada_viewImage/scada_viewImage.service.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust-refresh.service.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.controller.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.entity.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.module.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.service.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display-refresh.service.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.controller.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.entity.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.module.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.service.ts","webpack://nest-js_server/./src/shared_module/shared.module.ts","webpack://nest-js_server/./src/shared_module/shared.service.ts","webpack://nest-js_server/./src/socket_io/socket_io.gateway.ts","webpack://nest-js_server/./src/socket_io/socket_io.module.ts","webpack://nest-js_server/./src/system_api/system_api.controller.ts","webpack://nest-js_server/./src/system_api/system_api.module.ts","webpack://nest-js_server/./src/system_api/system_api.service.ts","webpack://nest-js_server/external commonjs \"@nestjs/common\"","webpack://nest-js_server/external commonjs \"@nestjs/core\"","webpack://nest-js_server/external commonjs \"@nestjs/jwt\"","webpack://nest-js_server/external commonjs \"@nestjs/microservices\"","webpack://nest-js_server/external commonjs \"@nestjs/passport\"","webpack://nest-js_server/external commonjs \"@nestjs/typeorm\"","webpack://nest-js_server/external commonjs \"@nestjs/websockets\"","webpack://nest-js_server/external commonjs \"@node-minify/core\"","webpack://nest-js_server/external commonjs \"@node-minify/uglify-js\"","webpack://nest-js_server/external commonjs \"argon2\"","webpack://nest-js_server/external commonjs \"bcrypt\"","webpack://nest-js_server/external commonjs \"body-parser\"","webpack://nest-js_server/external commonjs \"class-validator\"","webpack://nest-js_server/external commonjs \"dotenv\"","webpack://nest-js_server/external commonjs \"events\"","webpack://nest-js_server/external commonjs \"exceljs\"","webpack://nest-js_server/external commonjs \"mqtt\"","webpack://nest-js_server/external commonjs \"node-opcua\"","webpack://nest-js_server/external commonjs \"node-red\"","webpack://nest-js_server/external commonjs \"passport-jwt\"","webpack://nest-js_server/external commonjs \"socket.io\"","webpack://nest-js_server/external commonjs \"sqlite3\"","webpack://nest-js_server/external commonjs \"systeminformation\"","webpack://nest-js_server/external commonjs \"typeorm\"","webpack://nest-js_server/external commonjs \"util\"","webpack://nest-js_server/external commonjs \"webpack\"","webpack://nest-js_server/external node-commonjs \"dgram\"","webpack://nest-js_server/external node-commonjs \"fs\"","webpack://nest-js_server/external node-commonjs \"net\"","webpack://nest-js_server/external node-commonjs \"path\"","webpack://nest-js_server/webpack/bootstrap","webpack://nest-js_server/./src/main.ts"],"sourcesContent":["\r\nvar active = false\r\nmodule.exports = {\r\n    active,\r\n}","\r\nmodule.exports.DefaultHostValues = {\r\n    host : '127.0.0.1',\r\n    port : 9600\r\n};\r\n\r\n\r\n\r\nmodule.exports.DefaultOptions = {\r\n   timeout: 2000\r\n};\r\n\r\n\r\nmodule.exports.DefaultFinsHeader = {\r\n    ICF : 0x80,\r\n    RSV : 0x00,\r\n    GCT : 0x02,\r\n    DNA : 0x00,\r\n    DA1 : 0x00,\r\n    DA2 : 0x00,\r\n    SNA : 0x00,\r\n    SA1 : 0x22,\r\n    SA2 : 0x00,\r\n    SID : 0x00\r\n};\r\n\r\nmodule.exports.Commands = {\r\n    CONTROLLER_STATUS_READ : [0x06,0x01],\r\n    MEMORY_AREA_READ       : [0x01,0x01],\r\n    MEMORY_AREA_WRITE      : [0x01,0x02],\r\n    MEMORY_AREA_FILL       : [0x01,0x03],\r\n    RUN                    : [0x04,0x01],\r\n    STOP                   : [0x04,0x02]\r\n};\r\n\r\nmodule.exports.FatalErrorData = {\r\n    SYSTEM_ERROR      : 1 << 6,\r\n    IO_SETTING_ERROR  : 1 << 10,\r\n    IO_POINT_OVERFLOW : 1 << 11,\r\n    CPU_BUS_ERROR     : 1 << 14,\r\n    MEMORY_ERROR      : 1 << 15\r\n};\r\n\r\nmodule.exports.NonFatalErrorData = {\r\n    PC_LINK_ERROR         : 1 << 0 ,\r\n    HOST_LINK_ERROR       : 1 << 1,\r\n    BATTERY_ERROR         : 1 << 4,\r\n    REMOTE_IO_ERROR       : 1 << 5,\r\n    SPECIAL_IO_UNIT_ERROR : 1 << 8,\r\n    IO_COLLATE_ERROR      : 1 << 9,\r\n    SYSTEM_ERROR          : 1 << 15\r\n};\r\n\r\nmodule.exports.Status = {\r\n    CPU_STANDBY : 0x80,\r\n    STOP        : 0x00,\r\n    RUN         : 0x01\r\n};\r\n\r\nmodule.exports.Modes = {\r\n    MONITOR : 0x02,\r\n    DEBUG   : 0x01,\r\n    RUN     : 0x04\r\n};\r\n\r\n\r\nmodule.exports.MemoryAreas = {\r\n    'E' : 0xA0,//Extended Memories\r\n    'C' : 0xB0,//CIO\r\n    'W' : 0xB1,//Work Area\r\n    'H' : 0xB2,//Holding Bit\r\n    'A' : 0xB3,//Auxiliary Bit\r\n    'D' : 0x82//Data Memories\r\n};\r\n\r\nmodule.exports.Errors = {\r\n    '0000': 'Completed normally',\r\n    '0001': 'Service was interrupted',\r\n    '0101': 'Local node not part of Network',\r\n    '0102': 'Token time-out, node number too large',\r\n    '0103': 'Number of transmit retries exceeded',\r\n    '0104': 'Maximum number of frames exceeded',\r\n    '0105': 'Node number setting error (range)',\r\n    '0106': 'Node number duplication error'\r\n};\r\n\r\n","var dgram = require('dgram');\r\nvar inherits = require('util').inherits;\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar constants = require('./constants');\r\n\r\nmodule.exports = FinsClient;\r\n\r\nfunction FinsClient (port,host,options) {\r\n  if(!(this instanceof FinsClient)) return new FinsClient(port,host,options);\r\n    EventEmitter.call(this);\r\n    FinsClient.init.call(this,port,host,options);\r\n};\r\n\r\ninherits(FinsClient,EventEmitter);\r\n\r\n\r\n\r\n_compareArrays = function(a,b) {\r\n    if(a.length !== b.length)\r\n        return false;\r\n    for(var i = a.length; i--;) {\r\n        if(a[i] !== b[i])\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\n\r\n\r\n/* Credit to http://tech.karbassi.com/2009/12/17/pure-javascript-flatten-array/ */\r\n_mergeArrays = function(array) {\r\n    var flat = [];\r\n    for (var i = 0, l = array.length; i < l; i++){\r\n        var type = Object.prototype.toString.call(array[i]).split(' ').pop().split(']').shift().toLowerCase();\r\n        if (type) { flat = flat.concat(/^(array|collection|arguments|object)$/.test(type) ? _mergeArrays(array[i]) : array[i]); }\r\n    }\r\n    return flat;\r\n};\r\n\r\n\r\n_keyFromValue = function(dict,value) {\r\n    var key = Object.keys(dict)\r\n    .filter(function(key){\r\n        return dict[key] === value\r\n    }\r\n    )[0];\r\n\r\n    return key;\r\n};\r\n\r\n  \r\n\r\n_padHex = function (width,number) {\r\n    return(\"0\"*width + number.toString(16).substr(-width));\r\n};\r\n\r\n\r\n\r\n_wordsToBytes = function(words) {\r\n    var bytes = [];\r\n    if(!words.length) {\r\n        bytes.push((words & 0xff00) >> 8);\r\n        bytes.push((words & 0x00ff));\r\n    } else {\r\n        for(var i in words) {\r\n            bytes.push((words[i] & 0xff00) >> 8);\r\n            bytes.push((words[i] & 0x00ff));\r\n        }\r\n    }\r\n    return bytes;\r\n\r\n};\r\n\r\n\r\n_translateMemoryAddress = function(memoryAddress) {\r\n    var re = /(.)([0-9]*):?([0-9]*)/; \r\n    var matches = memoryAddress.match(re);\r\n    var decodedMemory = {\r\n        'MemoryArea':matches[1],\r\n        'Address':matches[2],\r\n        'Bit':matches[3]\r\n    };\r\n\r\n    var temp = [];\r\n    var byteEncodedMemory = [];\r\n\r\n    if(!constants.MemoryAreas[decodedMemory['MemoryArea']]) {\r\n        temp.push([0x82]);\r\n    } else {\r\n         temp.push([constants.MemoryAreas[decodedMemory['MemoryArea']]]);\r\n    }\r\n\r\n     temp.push(_wordsToBytes([decodedMemory['Address']]));\r\n     temp.push([0x00]);\r\n     byteEncodedMemory = _mergeArrays(temp);\r\n\r\n    return byteEncodedMemory;\r\n\r\n  \r\n};\r\n\r\n_incrementSID = function(sid) {\r\n    return (sid % 254) + 1;\r\n};\r\n\r\n_buildHeader = function(header) {\r\n    var builtHeader =  [\r\n        header.ICF,\r\n        header.RSV,\r\n        header.GCT,\r\n        header.DNA,\r\n        header.DA1,\r\n        header.DA2,\r\n        header.SNA,\r\n        header.SA1,\r\n        header.SA2,\r\n        header.SID \r\n    ];\r\n    return builtHeader;\r\n\r\n};\r\n\r\n_buildPacket = function(raw) {\r\n    var packet = [];\r\n    packet = _mergeArrays(raw);\r\n    return packet;\r\n};\r\n\r\n_getResponseType = function(buf) {\r\n    \r\n    var response = [];\r\n    response.push(buf[10]);\r\n    response.push(buf[11]);\r\n    return response;\r\n};\r\n\r\n_processDefault = function(buf,rinfo) {\r\n    var sid = buf[9];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var response = (buf.slice(12,14)).toString(\"hex\");\r\n    return {remotehost:rinfo.address,sid:sid,command:command,response:response};\r\n\r\n};\r\n\r\n_processStatusRead = function(buf,rinfo) {\r\n    var sid = buf[9];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var response = (buf.slice(12,14)).toString(\"hex\");\r\n    var status = buf[14];\r\n    var mode = buf[15];\r\n    var fatalErrorData = {};\r\n    var nonFatalErrorData = {};    \r\n    for(var i in constants.FatalErrorData) {\r\n        if((buf.readInt16BE(17) & constants.FatalErrorData[i]) !=0 )\r\n            fatalErrorData.push(i);\r\n    }\r\n\r\n    for(var i in constants.nonFatalErrorData) {\r\n        if((buf.readInt16BE(18) & constants.nonFatalErrorData[i]) !=0 )\r\n            nonFatalErrorData.push(i);\r\n    };\r\n    var statusCodes = constants.Status;\r\n    var runModes = constants.Modes;\r\n\r\n\r\n    return {\r\n        remotehost:rinfo.address,\r\n        sid:sid,\r\n        command:command,\r\n        response:response,\r\n        status:_keyFromValue(statusCodes,status),\r\n        mode:_keyFromValue(runModes,mode),\r\n        fatalErrorData : fatalErrorData || null,\r\n        nonFatalErrorData : nonFatalErrorData || null\r\n    };\r\n};\r\n\r\n_processMemoryAreaRead = function(buf,rinfo) {\r\n    var data = [];\r\n    var sid = buf[9];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var response = (buf.slice(12,14)).toString(\"hex\");\r\n    var values = (buf.slice(14,buf.length));\r\n    for(var i = 0; i < values.length; i+=2) {\r\n        data.push(values.readInt16BE(i));\r\n    }\r\n    return {remotehost:rinfo.address,sid:sid,command:command,response:response,values:data};\r\n};\r\n\r\n\r\n_processReply = function(buf,rinfo) {\r\n    var commands = constants.Commands;\r\n    var responseType = (_getResponseType(buf)).join(' ');\r\n    \r\n    switch(responseType) {\r\n       \r\n        case commands.CONTROLLER_STATUS_READ.join(' ') : \r\n            return _processStatusRead(buf,rinfo);\r\n            break;\r\n\r\n        case commands.MEMORY_AREA_READ.join(' '):\r\n            return _processMemoryAreaRead(buf,rinfo);\r\n            break;\r\n\r\n        default:\r\n            return _processDefault(buf,rinfo);\r\n\r\n    };\r\n\r\n};\r\n_decodePacket = function(buf,rinfo) {\r\n    var data = [];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var code = (buf.slice(12,14)).toString(\"hex\");\r\n    var values = (buf.slice(14,buf.length));\r\n    for(var i = 0; i < values.length; i+=2) {\r\n        data.push(values.readInt16BE(i));\r\n    }\r\n    return {remotehost:rinfo.address,command:command,code:code,values:data};\r\n};\r\n\r\n\r\nFinsClient.init = function (port,host,options) {\r\n    var self = this;\r\n    var defaultHost = constants.DefaultHostValues;\r\n    var defaultOptions = constants.DefaultOptions;\r\n    this.port = port || defaultHost.port;\r\n    this.host = host || defaultHost.host;\r\n    this.timeout = (options && options.timeout) || defaultOptions.timeout;\r\n    this.socket = dgram.createSocket('udp4');\r\n    this.responded = false;\r\n    this.header = constants.DefaultFinsHeader;\r\n\r\n    function receive (buf,rinfo) {\r\n      self.responded = true;\r\n      var msg = _processReply(buf,rinfo);\r\n      self.emit('reply',msg);\r\n    }\r\n\r\n    function listening() {\r\n        self.emit('open');\r\n    }\r\n\r\n    function close() {\r\n        self.emit('close');\r\n    }\r\n\r\n    function error(err) {\r\n        self.emit('error',err);\r\n    }\r\n\r\n    this.socket.on('message',receive);\r\n    this.socket.on('listening',listening);\r\n    this.socket.on('close',close);\r\n    this.socket.on('error',error);\r\n\r\n    if(this.timeout){\r\n        setTimeout(function cb_setTimeout() {\r\n            if(self.responded == false){\r\n                self.emit('timeout',self.host);\r\n            }\r\n        },self.timeout);\r\n    }\r\n};\r\n\r\n\r\nFinsClient.prototype.read = function(address,regsToRead,callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var address = _translateMemoryAddress(address);\r\n    var regsToRead = _wordsToBytes(regsToRead);\r\n    var command = constants.Commands.MEMORY_AREA_READ;\r\n    var commandData = [address,regsToRead];\r\n    var packet = _buildPacket([header,command,commandData]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.write = function(address,dataToBeWritten,callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var address = _translateMemoryAddress(address);\r\n    var regsToWrite = _wordsToBytes((dataToBeWritten.length || 1));\r\n    var command = constants.Commands.MEMORY_AREA_WRITE;\r\n    var dataToBeWritten = _wordsToBytes(dataToBeWritten);\r\n    var commandData = [address,regsToWrite,dataToBeWritten];\r\n    var packet = _buildPacket([header,command,commandData]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.fill = function(address,dataToBeWritten,regsToWrite,callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var address = _translateMemoryAddress(address);\r\n    var regsToWrite = _wordsToBytes(regsToWrite);\r\n    var command = constants.Commands.MEMORY_AREA_FILL;\r\n    var dataToBeWritten = _wordsToBytes(dataToBeWritten);\r\n    var commandData = [address,regsToWrite,dataToBeWritten];\r\n    var packet = _buildPacket([header,command,commandData]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.run = function(callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var command = constants.Commands.RUN;\r\n    var packet = _buildPacket([header,command]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.stop = function(callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var command = constants.Commands.STOP;\r\n    var packet = _buildPacket([header,command]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\n\r\nFinsClient.prototype.status = function(callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var command = constants.Commands.CONTROLLER_STATUS_READ;\r\n    var packet = _buildPacket([header,command]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n\r\n\r\n};\r\n\r\n\r\nFinsClient.prototype.close = function(){\r\n    this.socket.close();\r\n};\r\n\r\n\r\n","var FinsClient = require('./fins_client.js');\r\n\r\nexports.FinsClient = FinsClient;\r\n","// NodeS7 - A library for communication to Siemens PLCs from node.js.\n\n// The MIT License (MIT)\n\n// Copyright (c) 2013 Dana Moffit\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// EXTRA WARNING - This is BETA software and as such, be careful, especially when\n// writing values to programmable controllers.\n//\n// Some actions or errors involving programmable controllers can cause injury or death,\n// and YOU are indicating that you understand the risks, including the\n// possibility that the wrong address will be overwritten with the wrong value,\n// when using this library.  Test thoroughly in a laboratory environment.\n\n\nvar net = require(\"net\");\nvar util = require(\"util\");\nvar effectiveDebugLevel = 0; // intentionally global, shared between connections\nvar silentMode = false;\n\nmodule.exports = NodeS7;\n\nfunction NodeS7(opts) {\n\topts = opts || {};\n\tsilentMode = opts.silent || false;\n\teffectiveDebugLevel = opts.debug ? 99 : 0\n\n\tvar self = this;\n\n\tself.connectReq = Buffer.from([0x03, 0x00, 0x00, 0x16, 0x11, 0xe0, 0x00, 0x00, 0x00, 0x02, 0x00, 0xc0, 0x01, 0x0a, 0xc1, 0x02, 0x01, 0x00, 0xc2, 0x02, 0x01, 0x02]);\n\tself.negotiatePDU = Buffer.from([0x03, 0x00, 0x00, 0x19, 0x02, 0xf0, 0x80, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x08, 0x00, 0x08, 0x03, 0xc0]);\n\tself.readReqHeader = Buffer.from([0x03, 0x00, 0x00, 0x1f, 0x02, 0xf0, 0x80, 0x32, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x04, 0x01]);\n\tself.readReq = Buffer.alloc(1500);\n\tself.writeReqHeader = Buffer.from([0x03, 0x00, 0x00, 0x1f, 0x02, 0xf0, 0x80, 0x32, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x05, 0x01]);\n\tself.writeReq = Buffer.alloc(1500);\n\n\tself.resetPending = false;\n\tself.resetTimeout = undefined;\n\tself.isoclient = undefined;\n\tself.isoConnectionState = 0;\n\tself.requestMaxPDU = 960;\n\tself.maxPDU = 960;\n\tself.requestMaxParallel = 8;\n\tself.maxParallel = 8;\n\tself.parallelJobsNow = 0;\n\tself.maxGap = 5;\n\tself.doNotOptimize = false;\n\tself.connectCallback = undefined;\n\tself.readDoneCallback = undefined;\n\tself.writeDoneCallback = undefined;\n\tself.connectTimeout = undefined;\n\tself.PDUTimeout = undefined;\n\tself.globalTimeout = 1500; // In many use cases we will want to increase this\n        // In 0.3.17 this was made variable from cParam.timeout to ensure packets don't timeout at 1500ms if the user has specified a timeout externally.\n\tself.rack = 0;\n\tself.slot = 2;\n\tself.localTSAP = null;\n\tself.remoteTSAP = null;\n\n\tself.readPacketArray = [];\n\tself.writePacketArray = [];\n\tself.polledReadBlockList = [];\n\tself.instantWriteBlockList = [];\n\tself.globalReadBlockList = [];\n\tself.globalWriteBlockList = [];\n\tself.masterSequenceNumber = 1;\n\tself.translationCB = doNothing;\n\tself.connectionParams = undefined;\n\tself.connectionID = 'UNDEF';\n\tself.addRemoveArray = [];\n\tself.readPacketValid = false;\n\tself.writeInQueue = false;\n\tself.connectCBIssued = false;\n\tself.dropConnectionCallback = null;\n\tself.dropConnectionTimer = null;\n\tself.reconnectTimer = undefined;\n\tself.rereadTimer = undefined;\n}\n\nNodeS7.prototype.getNextSeqNum = function() {\n\tvar self = this;\n\n\tself.masterSequenceNumber += 1;\n\tif (self.masterSequenceNumber > 32767) {\n\t\tself.masterSequenceNumber = 1;\n\t}\n\toutputLog('seqNum is ' + self.masterSequenceNumber, 1, self.connectionID);\n\treturn self.masterSequenceNumber;\n}\n\nNodeS7.prototype.setTranslationCB = function(cb) {\n\tvar self = this;\n\tif (typeof cb === \"function\") {\n\t\toutputLog('Translation OK');\n\t\tself.translationCB = cb;\n\t}\n}\n\nNodeS7.prototype.initiateConnection = function(cParam, callback) {\n\tvar self = this;\n\tif (cParam === undefined) { cParam = { port: 102, host: '192.168.8.106' }; }\n\toutputLog('Initiate Called - Connecting to PLC with address and parameters:');\n\toutputLog(cParam);\n\tif (typeof (cParam.rack) !== 'undefined') {\n\t\tself.rack = cParam.rack;\n\t}\n\tif (typeof (cParam.slot) !== 'undefined') {\n\t\tself.slot = cParam.slot;\n\t}\n\tif (typeof (cParam.localTSAP) !== 'undefined') {\n\t\tself.localTSAP = cParam.localTSAP;\n\t}\n\tif (typeof (cParam.remoteTSAP) !== 'undefined') {\n\t\tself.remoteTSAP = cParam.remoteTSAP;\n\t}\n\tif (typeof (cParam.connection_name) === 'undefined') {\n\t\tself.connectionID = cParam.host + \" S\" + self.slot;\n\t} else {\n\t\tself.connectionID = cParam.connection_name;\n\t}\n\tif (typeof (cParam.doNotOptimize) !== 'undefined') {\n\t\tself.doNotOptimize = cParam.doNotOptimize;\n\t}\n\tif (typeof (cParam.timeout) !== 'undefined') { // Added in 0.3.17 to ensure packets don't timeout at 1500ms if the user has specified a timeout externally.\n\t\tself.globalTimeout = cParam.timeout;\n\t}\n\tself.connectionParams = cParam;\n\tself.connectCallback = callback;\n\tself.connectCBIssued = false;\n\tself.connectNow(self.connectionParams, false);\n}\n\nNodeS7.prototype.dropConnection = function(callback) {\n\tvar self = this;\n\n\t// prevents triggering reconnection even after calling dropConnection (fixes #70)\n\tclearTimeout(self.reconnectTimer);\n\tclearTimeout(self.rereadTimer);\n\tclearTimeout(self.connectTimeout);\n\tclearTimeout(self.PDUTimeout);\n\tself.reconnectTimer = undefined;\n\tself.rereadTimer = undefined;\n\tself.connectTimeout = undefined;\n\tself.PDUTimeout = undefined;\n\n\tif (typeof (self.isoclient) !== 'undefined') {\n\t\t// store the callback and request and end to the connection\n\t\tself.dropConnectionCallback = callback;\n\t\tself.isoclient.end();\n\t\t// now wait for 'on close' event to trigger connection cleanup\n\n\t\t// but also start a timer to destroy the connection in case we do not receive the close\n\t\tself.dropConnectionTimer = setTimeout(function() {\n\t\t\tif (self.dropConnectionCallback) {\n\t\t\t\t// clean up the connection now the socket has closed\n\t\t\t\tself.connectionCleanup();\n\t\t\t\t// initate the callback\n\t\t\t\tself.dropConnectionCallback();\n\t\t\t\t// prevent any possiblity of the callback being called twice\n\t\t\t\tself.dropConnectionCallback = null;\n\t\t\t}\n\t\t}, 2500);\n\t} else {\n\t\t// if client not active, then callback immediately\n\t\tcallback();\n\t}\n}\n\nNodeS7.prototype.connectNow = function(cParam) {\n\tvar self = this;\n\n\t// prevents any reconnect timer to fire this again\n\tclearTimeout(self.reconnectTimer);\n\tself.reconnectTimer = undefined;\n\n\t// Don't re-trigger.\n\tif (self.isoConnectionState >= 1) { return; }\n\tself.connectionCleanup();\n\n        self.isoclient = net.connect(cParam);                                                                                                                                        \n\n        self.isoclient.setTimeout(cParam.timeout || 5000, () => {                                                                                                                    \n            self.isoclient.destroy();                                                                                                                                            \n            self.connectError.apply(self, [{ code: 'EUSERTIMEOUT' }]); // Former use of \"arguments\" was always going to be 0.  Use \"USERTIMEOUT\" to show difference between this and TCP timeout.                                                                                                                            \n        });                                                                                                                                                                          \n\n        self.isoclient.once('connect', () => {                                                                                                                                       \n            self.isoclient.setTimeout(0);                                                                                                                                                \n            self.onTCPConnect.apply(self, arguments);                                                                                                                            \n        });                                                                                                                                                                          \n\n        self.isoConnectionState = 1;  // 1 = trying to connect  \n\n\tself.isoclient.on('error', function() {\n            self.connectError.apply(self, arguments);\n\t});\n\n\toutputLog('<initiating a new connection ' + Date() + '>', 1, self.connectionID);\n\toutputLog('Attempting to connect to host...', 0, self.connectionID);\n}\n\nNodeS7.prototype.connectError = function(e) {\n\tvar self = this;\n\n\t// Note that a TCP connection timeout error will appear here.  An ISO connection timeout error is a packet timeout.\n\toutputLog('We Caught a connect error ' + e.code, 0, self.connectionID);\n\tif ((!self.connectCBIssued) && (typeof (self.connectCallback) === \"function\")) {\n\t\tself.connectCBIssued = true;\n\t\tself.connectCallback(e);\n\t}\n\tself.isoConnectionState = 0;\n}\n\nNodeS7.prototype.readWriteError = function(e) {\n\tvar self = this;\n\toutputLog('We Caught a read/write error ' + e.code + ' - will DISCONNECT and attempt to reconnect.');\n\tself.isoConnectionState = 0;\n\tself.connectionReset();\n}\n\nNodeS7.prototype.packetTimeout = function(packetType, packetSeqNum) {\n\tvar self = this;\n\toutputLog('PacketTimeout called with type ' + packetType + ' and seq ' + packetSeqNum, 1, self.connectionID);\n\tif (packetType === \"connect\") {\n\t\toutputLog(\"TIMED OUT connecting to the PLC - Disconnecting\", 0, self.connectionID);\n\t\toutputLog(\"Wait for 2 seconds then try again.\", 0, self.connectionID);\n\t\tself.connectionReset();\n\t\toutputLog(\"Scheduling a reconnect from packetTimeout, connect type\", 0, self.connectionID);\n\t\tclearTimeout(self.reconnectTimer);\n\t\tself.reconnectTimer = setTimeout(function() {\n\t\t\toutputLog(\"The scheduled reconnect from packetTimeout, connect type, is happening now\", 0, self.connectionID);\n\t\t\tif (self.isoConnectionState === 0) {\n\t\t\t\tself.connectNow.apply(self, arguments);\n\t\t\t}\n\t\t}, 2000, self.connectionParams);\n\t\treturn undefined;\n\t}\n\tif (packetType === \"PDU\") {\n\t\toutputLog(\"TIMED OUT waiting for PDU reply packet from PLC - Disconnecting\");\n\t\toutputLog(\"Wait for 2 seconds then try again.\", 0, self.connectionID);\n\t\tself.connectionReset();\n\t\toutputLog(\"Scheduling a reconnect from packetTimeout, connect type\", 0, self.connectionID);\n\t\tclearTimeout(self.reconnectTimer);\n\t\tself.reconnectTimer = setTimeout(function() {\n\t\t\toutputLog(\"The scheduled reconnect from packetTimeout, PDU type, is happening now\", 0, self.connectionID);\n\t\t\tself.connectNow.apply(self, arguments);\n\t\t}, 2000, self.connectionParams);\n\t\treturn undefined;\n\t}\n\tif (packetType === \"read\") {\n\t\toutputLog(\"READ TIMEOUT on sequence number \" + packetSeqNum, 0, self.connectionID);\n\t\tif (self.isoConnectionState === 4) { // Reset before calling writeResponse so ResetNow will take place this cycle \n\t\t\toutputLog(\"ConnectionReset from read packet timeout.\", 0, self.connectionID);\n\t\t\tself.connectionReset();\n\t\t}\n\t\tself.readResponse(undefined, self.findReadIndexOfSeqNum(packetSeqNum));\n\t\treturn undefined;\n\t}\n\tif (packetType === \"write\") {\n\t\toutputLog(\"WRITE TIMEOUT on sequence number \" + packetSeqNum, 0, self.connectionID);\n\t\tif (self.isoConnectionState === 4) { // Reset before calling writeResponse so ResetNow will take place this cycle \n\t\t\toutputLog(\"ConnectionReset from write packet timeout.\", 0, self.connectionID);\n\t\t\tself.connectionReset();\n\t\t}\n\t\tself.writeResponse(undefined, self.findWriteIndexOfSeqNum(packetSeqNum));\n\t\treturn undefined;\n\t}\n\toutputLog(\"Unknown timeout error.  Nothing was done - this shouldn't happen.\");\n}\n\nNodeS7.prototype.onTCPConnect = function() {\n\tvar self = this, connBuf;\n\n\toutputLog('TCP Connection Established to ' + self.isoclient.remoteAddress + ' on port ' + self.isoclient.remotePort, 0, self.connectionID);\n\toutputLog('Will attempt ISO-on-TCP connection', 0, self.connectionID);\n\n\t// Track the connection state\n\tself.isoConnectionState = 2;  // 2 = TCP connected, wait for ISO connection confirmation\n\n\t// Send an ISO-on-TCP connection request.\n\tself.connectTimeout = setTimeout(function() {\n\t\tself.packetTimeout.apply(self, arguments);\n\t}, self.globalTimeout, \"connect\");\n\n\tconnBuf = self.connectReq.slice();\n\n\tif(self.localTSAP !== null && self.remoteTSAP !== null) {\n\t\toutputLog('Using localTSAP [0x' + self.localTSAP.toString(16) + '] and remoteTSAP [0x' + self.remoteTSAP.toString(16) + ']', 0, self.connectionID);\n\t\tconnBuf.writeUInt16BE(self.localTSAP, 16)\n\t\tconnBuf.writeUInt16BE(self.remoteTSAP, 20)\n\t} else {\n\t\toutputLog('Using rack [' + self.rack + '] and slot [' + self.slot + ']', 0, self.connectionID);\n\t\tconnBuf[21] = self.rack * 32 + self.slot;\n\t}\n\n\tself.isoclient.write(connBuf);\n\n\t// Listen for a reply.\n\tself.isoclient.on('data', function() {\n\t\tself.onISOConnectReply.apply(self, arguments);\n\t});\n\n\t// Hook up the event that fires on disconnect\n\tself.isoclient.on('end', function() {\n\t\tself.onClientDisconnect.apply(self, arguments);\n\t});\n\n    // listen for close (caused by us sending an end)\n\tself.isoclient.on('close', function() {\n\t\tself.onClientClose.apply(self, arguments);\n\n\t});\n}\n\nNodeS7.prototype.onISOConnectReply = function(data) {\n\tvar self = this;\n\tself.isoclient.removeAllListeners('data'); //self.onISOConnectReply);\n\t//self.isoclient.removeAllListeners('error'); Avoid removing the calback before setting it again\n\n\tclearTimeout(self.connectTimeout);\n\n\t// ignore if we're not expecting it - prevents write after end exception as of #80\n\tif (self.isoConnectionState != 2) { \n\t\toutputLog('Ignoring ISO connect reply, expecting isoConnectionState of 2, is currently ' + self.isoConnectionState, 0, self.connectionID);\n\t\treturn; \n\t}\n\n\t// Track the connection state\n\tself.isoConnectionState = 3;  // 3 = ISO-ON-TCP connected, Wait for PDU response.\n\n\t// Expected length is from packet sniffing - some applications may be different, especially using routing - not considered yet.\n\tif (data.readInt16BE(2) !== data.length || data.length < 22 || data[5] !== 0xd0 || data[4] !== (data.length - 5)) {\n\t\toutputLog('INVALID PACKET or CONNECTION REFUSED - DISCONNECTING');\n\t\toutputLog(data);\n\t\toutputLog('TPKT Length From Header is ' + data.readInt16BE(2) + ' and RCV buffer length is ' + data.length + ' and COTP length is ' + data.readUInt8(4) + ' and data[5] is ' + data[5]);\n\t\tself.connectionReset();\n\t\treturn null;\n\t}\n\n\toutputLog('ISO-on-TCP Connection Confirm Packet Received', 0, self.connectionID);\n\n\tself.negotiatePDU.writeInt16BE(self.requestMaxParallel, 19);\n\tself.negotiatePDU.writeInt16BE(self.requestMaxParallel, 21);\n\tself.negotiatePDU.writeInt16BE(self.requestMaxPDU, 23);\n\n\tself.PDUTimeout = setTimeout(function() {\n\t\tself.packetTimeout.apply(self, arguments);\n\t}, self.globalTimeout, \"PDU\");\n\n\tself.isoclient.write(self.negotiatePDU.slice(0, 25));\n\tself.isoclient.on('data', function() {\n\t\tself.onPDUReply.apply(self, arguments);\n\t});\n        self.isoclient.removeAllListeners('error');\n\tself.isoclient.on('error', function() {\n\t\tself.readWriteError.apply(self, arguments);\n\t});\n}\n\nNodeS7.prototype.onPDUReply = function(theData) {\n\tvar self = this;\n\tself.isoclient.removeAllListeners('data');\n\tself.isoclient.removeAllListeners('error');\n\n\tclearTimeout(self.PDUTimeout);\n\n\tvar data=checkRFCData(theData);\n\n\tif(data===\"fastACK\"){\n\t\t//Read again and wait for the requested data\n\t\toutputLog('Fast Acknowledge received.', 0, self.connectionID);\n\t\tself.isoclient.removeAllListeners('error');\n\t\tself.isoclient.removeAllListeners('data');\n\t\tself.isoclient.on('data', function() {\n\t\t\tself.onPDUReply.apply(self, arguments);\n\t\t});\n\t\tself.isoclient.on('error', function() {\n\t\t\tself.readWriteError.apply(self, arguments);\n\t\t});\n\t}else if((data[4] + 1 + 12 + data.readInt16BE(13) === data.readInt16BE(2) - 4)){//valid the length of FA+S7 package :  ISO_Length+ISO_LengthItself+S7Com_Header+S7Com_Header_ParameterLength===TPKT_Length-4\n\t\t//Everything OK...go on\n\t\t// Track the connection state\n\t\tself.isoConnectionState = 4;  // 4 = Received PDU response, good to go\n\t\tself.parallelJobsNow = 0;     // We need to zero this here as it can go negative when not connected\n\n\t\tvar partnerMaxParallel1 = data.readInt16BE(21);\n\t\tvar partnerMaxParallel2 = data.readInt16BE(23);\n\t\tvar partnerPDU = data.readInt16BE(25);\n\n\t\tself.maxParallel = self.requestMaxParallel;\n\n\t\tif (partnerMaxParallel1 < self.requestMaxParallel) {\n\t\t\tself.maxParallel = partnerMaxParallel1;\n\t\t}\n\t\tif (partnerMaxParallel2 < self.requestMaxParallel) {\n\t\t\tself.maxParallel = partnerMaxParallel2;\n\t\t}\n\t\tif (partnerPDU < self.requestMaxPDU) {\n\t\t\tself.maxPDU = partnerPDU;\n\t\t} else {\n\t\t\tself.maxPDU = self.requestMaxPDU;\n\t\t}\n\n\t\toutputLog('Received PDU Response - Proceeding with PDU ' + self.maxPDU + ' and ' + self.maxParallel + ' max parallel connections.', 0, self.connectionID);\n\t\tself.isoclient.on('data', function() {\n\t\t\tself.onResponse.apply(self, arguments);\n\t\t});  // We need to make sure we don't add this event every time if we call it on data.\n\t\tself.isoclient.on('error', function() {\n\t\t\tself.readWriteError.apply(self, arguments);\n\t\t});  // Might want to remove the self.connecterror listener\n\t\t//self.isoclient.removeAllListeners('error');\n\t\tif ((!self.connectCBIssued) && (typeof (self.connectCallback) === \"function\")) {\n\t\t\tself.connectCBIssued = true;\n\t\t\tself.connectCallback();\n\t\t}\n\t}else{\n\t\toutputLog('INVALID Telegram ', 0, self.connectionID);\n\t\toutputLog('Byte 0 From Header is ' + theData[0] + ' it has to be 0x03, Byte 5 From Header is  ' + theData[5] + ' and it has to be 0x0F ', 0, self.connectionID);\n\t\toutputLog('INVALID PDU RESPONSE or CONNECTION REFUSED - DISCONNECTING', 0, self.connectionID);\n\t\toutputLog('TPKT Length From Header is ' + theData.readInt16BE(2) + ' and RCV buffer length is ' + theData.length + ' and COTP length is ' + theData.readUInt8(4) + ' and data[6] is ' + theData[6], 0, self.connectionID);\n\t\toutputLog(theData);\n\t\tself.isoclient.end();\n\t\tclearTimeout(self.reconnectTimer);\n\t\tself.reconnectTimer = setTimeout(function() {\n\t\t\tself.connectNow.apply(self, arguments);\n\t\t}, 2000, self.connectionParams);\n\t\treturn null;\n\t}\n}\n\n\nNodeS7.prototype.writeItems = function(arg, value, cb) {\n\tvar self = this, i;\n\toutputLog(\"Preparing to WRITE \" + arg + \" to value \" + value, 0, self.connectionID);\n\tif (self.isWriting() || self.writeInQueue) {\n\t\toutputLog(\"You must wait until all previous writes have finished before scheduling another. \", 0, self.connectionID);\n\t\treturn 1;  // Watch for this in your code - 1 means it hasn't actually entered into the queue.\n\t}\n\n\tif (typeof cb === \"function\") {\n\t\tself.writeDoneCallback = cb;\n\t} else {\n\t\tself.writeDoneCallback = doNothing;\n\t}\n\n\tself.instantWriteBlockList = []; // Initialize the array.\n\n\tif (typeof arg === \"string\") {\n\t\tself.instantWriteBlockList.push(stringToS7Addr(self.translationCB(arg), arg, self.connectionParams));\n\t\tif (typeof (self.instantWriteBlockList[self.instantWriteBlockList.length - 1]) !== \"undefined\") {\n\t\t\tself.instantWriteBlockList[self.instantWriteBlockList.length - 1].writeValue = value;\n\t\t}\n\t} else if (Array.isArray(arg) && Array.isArray(value) && (arg.length == value.length)) {\n\t\tfor (i = 0; i < arg.length; i++) {\n\t\t\tif (typeof arg[i] === \"string\") {\n\t\t\t\tself.instantWriteBlockList.push(stringToS7Addr(self.translationCB(arg[i]), arg[i], self.connectionParams));\n\t\t\t\tif (typeof (self.instantWriteBlockList[self.instantWriteBlockList.length - 1]) !== \"undefined\") {\n\t\t\t\t\tself.instantWriteBlockList[self.instantWriteBlockList.length - 1].writeValue = value[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Validity check.\n\tfor (i = self.instantWriteBlockList.length - 1; i >= 0; i--) {\n\t\tif (self.instantWriteBlockList[i] === undefined) {\n\t\t\tself.instantWriteBlockList.splice(i, 1);\n\t\t\toutputLog(\"Dropping an undefined write item.\");\n\t\t}\n\t}\n\tself.prepareWritePacket();\n\tif (!self.isReading()) {\n\t\tself.sendWritePacket();\n\t} else {\n\t\tif (self.writeInQueue) {\n\t\t\toutputLog(\"Write was already in queue - should be prevented above\",1,self.connectionID);\n\t\t}\n\t\tself.writeInQueue = true;\n\t\toutputLog(\"Adding write to queue\");\n\t}\n\treturn 0;\n}\n\n\nNodeS7.prototype.findItem = function(useraddr) {\n\tvar self = this, i;\n\tvar commstate = { value: self.isoConnectionState !== 4, quality: 'OK' };\n\tif (useraddr === '_COMMERR') { return commstate; }\n\tfor (i = 0; i < self.polledReadBlockList.length; i++) {\n\t\tif (self.polledReadBlockList[i].useraddr === useraddr) { return self.polledReadBlockList[i]; }\n\t}\n\treturn undefined;\n}\n\nNodeS7.prototype.addItems = function(arg) {\n\tvar self = this;\n\tself.addRemoveArray.push({ arg: arg, action: 'add' });\n}\n\nNodeS7.prototype.addItemsNow = function(arg) {\n\tvar self = this, i;\n\toutputLog(\"Adding \" + arg, 0, self.connectionID);\n\tif (typeof (arg) === \"string\" && arg !== \"_COMMERR\") {\n\t\tself.polledReadBlockList.push(stringToS7Addr(self.translationCB(arg), arg, self.connectionParams));\n\t} else if (Array.isArray(arg)) {\n\t\tfor (i = 0; i < arg.length; i++) {\n\t\t\tif (typeof (arg[i]) === \"string\" && arg[i] !== \"_COMMERR\") {\n\t\t\t\tself.polledReadBlockList.push(stringToS7Addr(self.translationCB(arg[i]), arg[i], self.connectionParams));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Validity check.\n\tfor (i = self.polledReadBlockList.length - 1; i >= 0; i--) {\n\t\tif (self.polledReadBlockList[i] === undefined) {\n\t\t\tself.polledReadBlockList.splice(i, 1);\n\t\t\toutputLog(\"Dropping an undefined request item.\", 0, self.connectionID);\n\t\t}\n\t}\n\t//\tself.prepareReadPacket();\n\tself.readPacketValid = false;\n}\n\nNodeS7.prototype.removeItems = function(arg) {\n\tvar self = this;\n\tself.addRemoveArray.push({ arg: arg, action: 'remove' });\n}\n\nNodeS7.prototype.removeItemsNow = function(arg) {\n\tvar self = this, i;\n\tif (typeof arg === \"undefined\") {\n\t\tself.polledReadBlockList = [];\n\t} else if (typeof arg === \"string\") {\n\t\tfor (i = 0; i < self.polledReadBlockList.length; i++) {\n\t\t\toutputLog('TCBA ' + self.translationCB(arg));\n\t\t\tif (self.polledReadBlockList[i].addr === self.translationCB(arg)) {\n\t\t\t\toutputLog('Splicing');\n\t\t\t\tself.polledReadBlockList.splice(i, 1);\n\t\t\t}\n\t\t}\n\t} else if (Array.isArray(arg)) {\n\t\tfor (i = 0; i < self.polledReadBlockList.length; i++) {\n\t\t\tfor (var j = 0; j < arg.length; j++) {\n\t\t\t\tif (self.polledReadBlockList[i].addr === self.translationCB(arg[j])) {\n\t\t\t\t\tself.polledReadBlockList.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tself.readPacketValid = false;\n\t//\tself.prepareReadPacket();\n}\n\nNodeS7.prototype.readAllItems = function(arg) {\n\tvar self = this;\n\n\toutputLog(\"Reading All Items (readAllItems was called)\", 1, self.connectionID);\n\n\tif (typeof arg === \"function\") {\n\t\tself.readDoneCallback = arg;\n\t} else {\n\t\tself.readDoneCallback = doNothing;\n\t}\n\n\tif (self.isoConnectionState !== 4) {\n\t\toutputLog(\"Unable to read when not connected. Return bad values.\", 0, self.connectionID);\n\t} // For better behaviour when auto-reconnecting - don't return now\n\n\t// Check if ALL are done...  You might think we could look at parallel jobs, and for the most part we can, but if one just finished and we end up here before starting another, it's bad.\n\tif (self.isWaiting()) {\n\t\toutputLog(\"Waiting to read for all R/W operations to complete.  Will re-trigger readAllItems in 100ms.\", 0, self.connectionID);\n\t\tclearTimeout(self.rereadTimer);\n\t\tself.rereadTimer = setTimeout(function() {\n\t\t\tself.rereadTimer = undefined; //already fired, can safely discard\n\t\t\tself.readAllItems.apply(self, arguments);\n\t\t}, 100, arg);\n\t\treturn;\n\t}\n\n\t// Now we check the array of adding and removing things.  Only now is it really safe to do this.\n\tself.addRemoveArray.forEach(function(element) {\n\t\toutputLog('Adding or Removing ' + util.format(element), 1, self.connectionID);\n\t\tif (element.action === 'remove') {\n\t\t\tself.removeItemsNow(element.arg);\n\t\t}\n\t\tif (element.action === 'add') {\n\t\t\tself.addItemsNow(element.arg);\n\t\t}\n\t});\n\n\tself.addRemoveArray = []; // Clear for next time.\n\n\tif (!self.readPacketValid) { self.prepareReadPacket(); }\n\n\t// ideally...  incrementSequenceNumbers();\n\n\toutputLog(\"Calling SRP from RAI\", 1, self.connectionID);\n\tself.sendReadPacket(); // Note this sends the first few read packets depending on parallel connection restrictions.\n}\n\nNodeS7.prototype.isWaiting = function() {\n\tvar self = this;\n\treturn (self.isReading() || self.isWriting());\n}\n\nNodeS7.prototype.isReading = function() {\n\tvar self = this, i;\n\t// Walk through the array and if any packets are marked as sent, it means we haven't received our final confirmation.\n\tfor (i = 0; i < self.readPacketArray.length; i++) {\n\t\tif (self.readPacketArray[i].sent === true) { return true }\n\t}\n\treturn false;\n}\n\nNodeS7.prototype.isWriting = function() {\n\tvar self = this, i;\n\t// Walk through the array and if any packets are marked as sent, it means we haven't received our final confirmation.\n\tfor (i = 0; i < self.writePacketArray.length; i++) {\n\t\tif (self.writePacketArray[i].sent === true) { return true }\n\t}\n\treturn false;\n}\n\n\nNodeS7.prototype.clearReadPacketTimeouts = function() {\n\tvar self = this, i;\n\toutputLog('Clearing read PacketTimeouts', 1, self.connectionID);\n\t// Before we initialize the self.readPacketArray, we need to loop through all of them and clear timeouts.\n\tfor (i = 0; i < self.readPacketArray.length; i++) {\n\t\tclearTimeout(self.readPacketArray[i].timeout);\n\t\tself.readPacketArray[i].sent = false;\n\t\tself.readPacketArray[i].rcvd = false;\n\t}\n}\n\nNodeS7.prototype.clearWritePacketTimeouts = function() {\n\tvar self = this, i;\n\toutputLog('Clearing write PacketTimeouts', 1, self.connectionID);\n\t// Before we initialize the self.readPacketArray, we need to loop through all of them and clear timeouts.\n\tfor (i = 0; i < self.writePacketArray.length; i++) {\n\t\tclearTimeout(self.writePacketArray[i].timeout);\n\t\tself.writePacketArray[i].sent = false;\n\t\tself.writePacketArray[i].rcvd = false;\n\t}\n}\n\nNodeS7.prototype.prepareWritePacket = function() {\n\tvar self = this, i;\n\tvar itemList = self.instantWriteBlockList;\n\tvar requestList = [];\t\t\t// The request list consists of the block list, split into chunks readable by PDU.\n\tvar requestNumber = 0;\n\n\t// Sort the items using the sort function, by type and offset.\n\titemList.sort(itemListSorter);\n\n\t// Just exit if there are no items.\n\tif (itemList.length === 0) {\n\t\treturn undefined;\n\t}\n\n\t// Reinitialize the WriteBlockList\n\tself.globalWriteBlockList = [];\n\n\t// At this time we do not do write optimizations.\n\t// The reason for this is it is would cause numerous issues depending how the code was written in the PLC.\n\t// If we write M0.1 and M0.2 then to optimize we would have to write MB0, which also writes 0.0, 0.3, 0.4...\n\t//\n\t// I suppose when working with integers, if we write MW0 and MW2, we could write these as one block.\n\t// But if you really, really want the program to do that, write an array yourself.\n\tself.globalWriteBlockList[0] = itemList[0];\n\tself.globalWriteBlockList[0].itemReference = [];\n\tself.globalWriteBlockList[0].itemReference.push(itemList[0]);\n\n\tvar thisBlock = 0;\n\titemList[0].block = thisBlock;\n\tvar maxByteRequest = 4 * Math.floor((self.maxPDU - 18 - 12) / 4);  // Absolutely must not break a real array into two requests.  Maybe we can extend by two bytes when not DINT/REAL/INT.  But modified now for LREAL.\n\tmaxByteRequest = 8 * Math.floor((self.maxPDU - 18 - 12) / 8);\n\t//\toutputLog(\"Max Write Length is \" + maxByteRequest);\n\n\t// Just push the items into blocks and figure out the write buffers\n\tfor (i = 0; i < itemList.length; i++) {\n\t\tself.globalWriteBlockList[i] = itemList[i]; // Remember - by reference.\n\t\tself.globalWriteBlockList[i].isOptimized = false;\n\t\tself.globalWriteBlockList[i].itemReference = [];\n\t\tself.globalWriteBlockList[i].itemReference.push(itemList[i]);\n\t\tbufferizeS7Item(itemList[i]);\n\t}\n\n\tvar thisRequest = 0;\n\n\t// Split the blocks into requests, if they're too large.\n\tfor (i = 0; i < self.globalWriteBlockList.length; i++) {\n\t\tvar startByte = self.globalWriteBlockList[i].offset;\n\t\tvar remainingLength = self.globalWriteBlockList[i].byteLength;\n\t\tvar lengthOffset = 0;\n\n\t\t// Always create a request for a self.globalReadBlockList.\n\t\trequestList[thisRequest] = self.globalWriteBlockList[i].clone();\n\n\t\t// How many parts?\n\t\tself.globalWriteBlockList[i].parts = Math.ceil(self.globalWriteBlockList[i].byteLength / maxByteRequest);\n\t\t//\t\toutputLog(\"self.globalWriteBlockList \" + i + \" parts is \" + self.globalWriteBlockList[i].parts + \" offset is \" + self.globalWriteBlockList[i].offset + \" MBR is \" + maxByteRequest);\n\n\t\tself.globalWriteBlockList[i].requestReference = [];\n\n\t\t// If we're optimized...\n\t\tfor (var j = 0; j < self.globalWriteBlockList[i].parts; j++) {\n\t\t\trequestList[thisRequest] = self.globalWriteBlockList[i].clone();\n\t\t\tself.globalWriteBlockList[i].requestReference.push(requestList[thisRequest]);\n\t\t\trequestList[thisRequest].offset = startByte;\n\t\t\trequestList[thisRequest].byteLength = Math.min(maxByteRequest, remainingLength);\n\t\t\trequestList[thisRequest].byteLengthWithFill = requestList[thisRequest].byteLength;\n\t\t\tif (requestList[thisRequest].byteLengthWithFill % 2) { requestList[thisRequest].byteLengthWithFill += 1; }\n\n\t\t\t// max\n\n\t\t\trequestList[thisRequest].writeBuffer = self.globalWriteBlockList[i].writeBuffer.slice(lengthOffset, lengthOffset + requestList[thisRequest].byteLengthWithFill);\n\t\t\trequestList[thisRequest].writeQualityBuffer = self.globalWriteBlockList[i].writeQualityBuffer.slice(lengthOffset, lengthOffset + requestList[thisRequest].byteLengthWithFill);\n\t\t\tlengthOffset += self.globalWriteBlockList[i].requestReference[j].byteLength;\n\n\t\t\tif (self.globalWriteBlockList[i].parts > 1) {\n\t\t\t\trequestList[thisRequest].datatype = 'BYTE';\n\t\t\t\trequestList[thisRequest].dtypelen = 1;\n\t\t\t\trequestList[thisRequest].arrayLength = requestList[thisRequest].byteLength;//self.globalReadBlockList[thisBlock].byteLength;\t\t(This line shouldn't be needed anymore - shouldn't matter)\n\t\t\t}\n\t\t\tremainingLength -= maxByteRequest;\n\t\t\tthisRequest++;\n\t\t\tstartByte += maxByteRequest;\n\t\t}\n\t}\n\n\tself.clearWritePacketTimeouts();\n\tself.writePacketArray = [];\n\n\t//\toutputLog(\"GWBL is \" + self.globalWriteBlockList.length);\n\n\n\t// Before we initialize the self.writePacketArray, we need to loop through all of them and clear timeouts.\n\n\t// The packetizer...\n\twhile (requestNumber < requestList.length) {\n\t\t// Set up the read packet\n\t\t// Yes this is the same master sequence number shared with the read queue\n\n\t\tvar numItems = 0;\n\n\t\t// Maybe this shouldn't really be here?\n\t\tself.writeReqHeader.copy(self.writeReq, 0);\n\n\t\t// Packet's length\n\t\tvar packetWriteLength = 10 + 4;  // 10 byte header and 4 byte param header\n\n\t\tself.writePacketArray.push(new S7Packet());\n\t\tvar thisPacketNumber = self.writePacketArray.length - 1;\n\t\tself.writePacketArray[thisPacketNumber].seqNum = self.getNextSeqNum();\n\t\t//\t\toutputLog(\"Write Sequence Number is \" + self.writePacketArray[thisPacketNumber].seqNum);\n\n\t\tself.writePacketArray[thisPacketNumber].itemList = [];  // Initialize as array.\n\n\t\tfor (i = requestNumber; i < requestList.length; i++) {\n\t\t\t//outputLog(\"Number is \" + (requestList[i].byteLengthWithFill + 4 + packetReplyLength));\n\t\t\tif (requestList[i].byteLengthWithFill + 12 + 4 + packetWriteLength > self.maxPDU) { // 12 byte header for each item and 4 bytes for the data header\n\t\t\t\tif (numItems === 0) {\n\t\t\t\t\toutputLog(\"breaking when we shouldn't, byte length with fill is  \" + requestList[i].byteLengthWithFill + \" max byte request \" + maxByteRequest, 0, self.connectionID);\n\t\t\t\t\tthrow new Error(\"Somehow write request didn't split properly - exiting.  Report this as a bug.\");\n\t\t\t\t}\n\t\t\t\tbreak;  // We can't fit this packet in here.\n\t\t\t}\n\t\t\trequestNumber++;\n\t\t\tnumItems++;\n\t\t\tpacketWriteLength += (requestList[i].byteLengthWithFill + 12 + 4); // Don't forget each request has a 12 byte header as well.\n\t\t\t//outputLog('I is ' + i + ' Addr Type is ' + requestList[i].addrtype + ' and type is ' + requestList[i].datatype + ' and DBNO is ' + requestList[i].dbNumber + ' and offset is ' + requestList[i].offset + ' bit ' + requestList[i].bitOffset + ' len ' + requestList[i].arrayLength);\n\t\t\t//S7AddrToBuffer(requestList[i]).copy(self.writeReq, 19 + numItems * 12);  // i or numItems?  used to be i.\n\t\t\t//itemBuffer = bufferizeS7Packet(requestList[i]);\n\t\t\t//itemBuffer.copy(dataBuffer, dataBufferPointer);\n\t\t\t//dataBufferPointer += itemBuffer.length;\n\t\t\tself.writePacketArray[thisPacketNumber].itemList.push(requestList[i]);\n\t\t}\n\t\t//\t\tdataBuffer.copy(self.writeReq, 19 + (numItems + 1) * 12, 0, dataBufferPointer - 1);\n\t}\n}\n\n\nNodeS7.prototype.prepareReadPacket = function() {\n\tvar self = this, i;\n\t// Note that for a PDU size of 240, the MOST bytes we can request depends on the number of items.\n\t// To figure this out, allow for a 247 byte packet.  7 TPKT+COTP header doesn't count for PDU, so 240 bytes of \"S7 data\".\n\t// In the response you ALWAYS have a 12 byte S7 header.\n\t// Then you have a 2 byte parameter header.\n\t// Then you have a 4 byte \"item header\" PER ITEM.\n\t// So you have overhead of 18 bytes for one item, 22 bytes for two items, 26 bytes for 3 and so on.  So for example you can request 240 - 22 = 218 bytes for two items.\n\n\t// We can calculate a max byte length for single request as 4*Math.floor((self.maxPDU - 18)/4) - to ensure we don't cross boundaries.\n\n\tvar itemList = self.polledReadBlockList;\t\t\t\t// The items are the actual items requested by the user\n\tvar requestList = [];\t\t\t\t\t\t// The request list consists of the block list, split into chunks readable by PDU.\n\n\t// Validity check.\n\tfor (i = itemList.length - 1; i >= 0; i--) {\n\t\tif (itemList[i] === undefined) {\n\t\t\titemList.splice(i, 1);\n\t\t\toutputLog(\"Dropping an undefined request item.\", 0, self.connectionID);\n\t\t}\n\t}\n\n\t// Sort the items using the sort function, by type and offset.\n\titemList.sort(itemListSorter);\n\n\t// Just exit if there are no items.\n\tif (itemList.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tself.globalReadBlockList = [];\n\n\t// ...because you have to start your optimization somewhere.\n\tself.globalReadBlockList[0] = itemList[0];\n\tself.globalReadBlockList[0].itemReference = [];\n\tself.globalReadBlockList[0].itemReference.push(itemList[0]);\n\n\tvar thisBlock = 0;\n\titemList[0].block = thisBlock;\n\tvar maxByteRequest = 4 * Math.floor((self.maxPDU - 18) / 4);  // Absolutely must not break a real array into two requests.  Maybe we can extend by two bytes when not DINT/REAL/INT.\n\n\t// Optimize the items into blocks\n\tfor (i = 1; i < itemList.length; i++) {\n\t\t// Skip T, C, P types\n\t\tif ((itemList[i].areaS7Code !== self.globalReadBlockList[thisBlock].areaS7Code) ||   \t// Can't optimize between areas\n\t\t\t(itemList[i].dbNumber !== self.globalReadBlockList[thisBlock].dbNumber) ||\t\t\t// Can't optimize across DBs\n\t\t\t(!self.isOptimizableArea(itemList[i].areaS7Code)) || \t\t\t\t\t// Can't optimize T,C (I don't think) and definitely not P.\n\t\t\t((itemList[i].offset - self.globalReadBlockList[thisBlock].offset + itemList[i].byteLength) > maxByteRequest) ||      \t// If this request puts us over our max byte length, create a new block for consistency reasons.\n\t\t\t(itemList[i].offset - (self.globalReadBlockList[thisBlock].offset + self.globalReadBlockList[thisBlock].byteLength) > self.maxGap)) {\t\t// If our gap is large, create a new block.\n\n\t\t\toutputLog(\"Skipping optimization of item \" + itemList[i].addr, 0, self.connectionID);\n\n\t\t\t// At this point we give up and create a new block.\n\t\t\tthisBlock = thisBlock + 1;\n\t\t\tself.globalReadBlockList[thisBlock] = itemList[i]; // By reference.\n\t\t\t//\t\t\t\titemList[i].block = thisBlock; // Don't need to do this.\n\t\t\tself.globalReadBlockList[thisBlock].isOptimized = false;\n\t\t\tself.globalReadBlockList[thisBlock].itemReference = [];\n\t\t\tself.globalReadBlockList[thisBlock].itemReference.push(itemList[i]);\n\t\t} else {\n\t\t\toutputLog(\"Attempting optimization of item \" + itemList[i].addr + \" with \" + self.globalReadBlockList[thisBlock].addr, 0, self.connectionID);\n\t\t\t// This next line checks the maximum.\n\t\t\t// Think of this situation - we have a large request of 40 bytes starting at byte 10.\n\t\t\t//\tThen someone else wants one byte starting at byte 12.  The block length doesn't change.\n\t\t\t//\n\t\t\t// But if we had 40 bytes starting at byte 10 (which gives us byte 10-49) and we want byte 50, our byte length is 50-10 + 1 = 41.\n\t\t\tself.globalReadBlockList[thisBlock].byteLength = Math.max(self.globalReadBlockList[thisBlock].byteLength, itemList[i].offset - self.globalReadBlockList[thisBlock].offset + itemList[i].byteLength);\n\n\t\t\t// Point the buffers (byte and quality) to a sliced version of the optimized block.  This is by reference (same area of memory)\n\t\t\titemList[i].byteBuffer = self.globalReadBlockList[thisBlock].byteBuffer.slice(itemList[i].offset - self.globalReadBlockList[thisBlock].offset, itemList[i].offset - self.globalReadBlockList[thisBlock].offset + itemList[i].byteLength);\n\t\t\titemList[i].qualityBuffer = self.globalReadBlockList[thisBlock].qualityBuffer.slice(itemList[i].offset - self.globalReadBlockList[thisBlock].offset, itemList[i].offset - self.globalReadBlockList[thisBlock].offset + itemList[i].byteLength);\n\n\t\t\t// For now, change the request type here, and fill in some other things.\n\n\t\t\t// I am not sure we want to do these next two steps.\n\t\t\t// It seems like things get screwed up when we do this.\n\t\t\t// Since self.globalReadBlockList[thisBlock] exists already at this point, and our buffer is already set, let's not do this now.\n\t\t\t// self.globalReadBlockList[thisBlock].datatype = 'BYTE';\n\t\t\t// self.globalReadBlockList[thisBlock].dtypelen = 1;\n\t\t\tself.globalReadBlockList[thisBlock].isOptimized = true;\n\t\t\tself.globalReadBlockList[thisBlock].itemReference.push(itemList[i]);\n\t\t}\n\t}\n\n\tvar thisRequest = 0;\n\n\t//\toutputLog(\"Preparing the read packet...\");\n\n\t// Split the blocks into requests, if they're too large.\n\tfor (i = 0; i < self.globalReadBlockList.length; i++) {\n\t\t// Always create a request for a self.globalReadBlockList.\n\t\trequestList[thisRequest] = self.globalReadBlockList[i].clone();\n\n\t\t// How many parts?\n\t\tself.globalReadBlockList[i].parts = Math.ceil(self.globalReadBlockList[i].byteLength / maxByteRequest);\n\t\toutputLog(\"self.globalReadBlockList \" + i + \" parts is \" + self.globalReadBlockList[i].parts + \" offset is \" + self.globalReadBlockList[i].offset + \" MBR is \" + maxByteRequest, 1, self.connectionID);\n\t\tvar startByte = self.globalReadBlockList[i].offset;\n\t\tvar remainingLength = self.globalReadBlockList[i].byteLength;\n\n\t\tself.globalReadBlockList[i].requestReference = [];\n\n\t\t// If we're optimized...\n\t\tfor (var j = 0; j < self.globalReadBlockList[i].parts; j++) {\n\t\t\trequestList[thisRequest] = self.globalReadBlockList[i].clone();\n\t\t\tself.globalReadBlockList[i].requestReference.push(requestList[thisRequest]);\n\t\t\t//outputLog(self.globalReadBlockList[i]);\n\t\t\t//outputLog(self.globalReadBlockList.slice(i,i+1));\n\t\t\trequestList[thisRequest].offset = startByte;\n\t\t\trequestList[thisRequest].byteLength = Math.min(maxByteRequest, remainingLength);\n\t\t\trequestList[thisRequest].byteLengthWithFill = requestList[thisRequest].byteLength;\n\t\t\tif (requestList[thisRequest].byteLengthWithFill % 2) { requestList[thisRequest].byteLengthWithFill += 1; }\n\t\t\t// Just for now...\n\t\t\tif (self.globalReadBlockList[i].parts > 1) {\n\t\t\t\trequestList[thisRequest].datatype = 'BYTE';\n\t\t\t\trequestList[thisRequest].dtypelen = 1;\n\t\t\t\trequestList[thisRequest].arrayLength = requestList[thisRequest].byteLength;//self.globalReadBlockList[thisBlock].byteLength;\n\t\t\t}\n\t\t\tremainingLength -= maxByteRequest;\n\t\t\tthisRequest++;\n\t\t\tstartByte += maxByteRequest;\n\t\t}\n\t}\n\n\t//requestList[5].offset = 243;\n\t//\trequestList = self.globalReadBlockList;\n\n\t// The packetizer...\n\tvar requestNumber = 0;\n\n\tself.clearReadPacketTimeouts();\n\tself.readPacketArray = [];\n\n\twhile (requestNumber < requestList.length) {\n\n\t\tvar numItems = 0;\n\t\tself.readReqHeader.copy(self.readReq, 0);\n\n\t\t// Packet's expected reply length\n\t\tvar packetReplyLength = 12 + 2;  //\n\t\tvar packetRequestLength = 12; //s7 header and parameter header\n\n\t\tself.readPacketArray.push(new S7Packet());\n\t\tvar thisPacketNumber = self.readPacketArray.length - 1;\n\t\t// don't set a fixed sequence number here. Instead, set it just before sending to avoid conflict with write sequence numbers\n\t\tself.readPacketArray[thisPacketNumber].seqNum = 0;\n\t\tself.readPacketArray[thisPacketNumber].itemList = [];  // Initialize as array.\n\n\t\tfor (i = requestNumber; i < requestList.length; i++) {\n\t\t\t//outputLog(\"Number is \" + (requestList[i].byteLengthWithFill + 4 + packetReplyLength));\n\t\t\tif (requestList[i].byteLengthWithFill + 4 + packetReplyLength > self.maxPDU || packetRequestLength + 12 > self.maxPDU) {\n\t\t\t\toutputLog(\"Splitting request: \" + numItems + \" items, requestLength would be \" + (packetRequestLength + 12) + \", replyLength would be \" + (requestList[i].byteLengthWithFill + 4 + packetReplyLength) + \", PDU is \" + self.maxPDU, 1, self.connectionID);\n\t\t\t\tif (numItems === 0) {\n\t\t\t\t\toutputLog(\"breaking when we shouldn't, rlibl \" + requestList[i].byteLengthWithFill + \" MBR \" + maxByteRequest, 0, self.connectionID);\n\t\t\t\t\tthrow new Error(\"Somehow write request didn't split properly - exiting.  Report this as a bug.\");\n\t\t\t\t}\n\t\t\t\tbreak;  // We can't fit this packet in here.\n\t\t\t}\n\t\t\trequestNumber++;\n\t\t\tnumItems++;\n\t\t\tpacketReplyLength += (requestList[i].byteLengthWithFill + 4);\n\t\t\tpacketRequestLength += 12;\n\t\t\t//outputLog('I is ' + i + ' Addr Type is ' + requestList[i].addrtype + ' and type is ' + requestList[i].datatype + ' and DBNO is ' + requestList[i].dbNumber + ' and offset is ' + requestList[i].offset + ' bit ' + requestList[i].bitOffset + ' len ' + requestList[i].arrayLength);\n\t\t\t// skip this for now S7AddrToBuffer(requestList[i]).copy(self.readReq, 19 + numItems * 12);  // i or numItems?\n\t\t\tself.readPacketArray[thisPacketNumber].itemList.push(requestList[i]);\n\t\t}\n\t}\n\tself.readPacketValid = true;\n}\n\nNodeS7.prototype.sendReadPacket = function() {\n\tvar self = this, i, j, flagReconnect = false;\n\n\toutputLog(\"SendReadPacket called\", 1, self.connectionID);\n\n\tif (!self.readPacketArray.length && (typeof(self.readDoneCallback) === \"function\")) {\n\t\t// Call back the callback if we are being asked for zero tags - for consistency\n\t\tself.readDoneCallback(false, {}); // Data is second argument and shouldn't be undefined\n\t}\n\n\tfor (i = 0; i < self.readPacketArray.length; i++) {\n\t\tif (self.readPacketArray[i].sent) { continue; }\n\t\tif (self.parallelJobsNow >= self.maxParallel) { continue; }\n\n\t\t// Set sequence number of packet here\n\t\tself.readPacketArray[i].seqNum = self.getNextSeqNum();\n\n\t\t// From here down is SENDING the packet\n\t\tself.readPacketArray[i].reqTime = process.hrtime();\n\t\tself.readReq.writeUInt8(self.readPacketArray[i].itemList.length, 18);\n\t\tself.readReq.writeUInt16BE(19 + self.readPacketArray[i].itemList.length * 12, 2); // buffer length\n\t\tself.readReq.writeUInt16BE(self.readPacketArray[i].seqNum, 11);\n\t\tself.readReq.writeUInt16BE(self.readPacketArray[i].itemList.length * 12 + 2, 13); // Parameter length - 14 for one read, 28 for 2.\n\n\t\tfor (j = 0; j < self.readPacketArray[i].itemList.length; j++) {\n\t\t\tS7AddrToBuffer(self.readPacketArray[i].itemList[j], false).copy(self.readReq, 19 + j * 12);\n\t\t}\n\n\t\tif (self.isoConnectionState == 4) {\n\t\t\toutputLog('Sending Read Packet With Sequence Number ' + self.readPacketArray[i].seqNum, 1, self.connectionID);\n\n\t\t\tself.readPacketArray[i].timeout = setTimeout(function() {\n\t\t\t\tself.packetTimeout.apply(self, arguments);\n\t\t\t}, self.globalTimeout, \"read\", self.readPacketArray[i].seqNum);\n\t\t\tself.isoclient.write(self.readReq.slice(0, 19 + self.readPacketArray[i].itemList.length * 12));  // was 31\n\t\t\tself.readPacketArray[i].sent = true;\n\t\t\tself.readPacketArray[i].rcvd = false;\n\t\t\tself.readPacketArray[i].timeoutError = false;\n\t\t\tself.parallelJobsNow += 1;\n\t\t} else {\n\t\t\t//\t\t\toutputLog('Somehow got into read block without proper self.isoConnectionState of 3.  Disconnect.');\n\t\t\t//\t\t\tself.isoclient.end();\n\t\t\t//\t\t\tsetTimeout(function(){\n\t\t\t//\t\t\t\tself.connectNow.apply(self, arguments);\n\t\t\t//\t\t\t}, 2000, self.connectionParams);\n\t\t\t// self.parallelJobsNow += 1;  // Note that we don't do this here - we want all packets to time out at once when not connected. \n\t\t\tself.readPacketArray[i].sent = true;\n\t\t\tself.readPacketArray[i].rcvd = false;\n\t\t\tself.readPacketArray[i].timeoutError = true;\n\t\t\tif (!flagReconnect) {\n\t\t\t\t// Prevent duplicates\n\t\t\t\toutputLog('Not Sending Read Packet because we are not connected - ISO CS is ' + self.isoConnectionState, 0, self.connectionID);\n\t\t\t}\n\t\t\t// This is essentially an instantTimeout.\n\t\t\tif (self.isoConnectionState === 0) {\n\t\t\t\tflagReconnect = true;\n\t\t\t}\n\t\t\toutputLog('Requesting PacketTimeout Due to ISO CS NOT 4 - READ SN ' + self.readPacketArray[i].seqNum, 1, self.connectionID);\n\t\t\tself.readPacketArray[i].timeout = setTimeout(function() {\n\t\t\t\tself.packetTimeout.apply(self, arguments);\n\t\t\t}, 0, \"read\", self.readPacketArray[i].seqNum);\n\t\t}\n\t}\n\n/* NOTE: We no longer do this here.\nReconnects are done on the response that we will get from the above packets.\nReason: We could have some packets waiting for timeout from the PLC, and others coming back instantly.\n\tif (flagReconnect) {\n\t\t//\t\tconsole.log(\"Asking for callback next tick and my ID is \" + self.connectionID);\n\t\tclearTimeout(self.reconnectTimer)\n\t\tself.reconnectTimer = setTimeout(function() {\n\t\t\t//\t\t\tconsole.log(\"Next tick is here and my ID is \" + self.connectionID);\n\t\t\toutputLog(\"The scheduled reconnect from sendReadPacket is happening now\", 1, self.connectionID);\n\t\t\tself.connectNow(self.connectionParams);  // We used to do this NOW - not NextTick() as we need to mark isoConnectionState as 1 right now.  Otherwise we queue up LOTS of connects and crash.\n\t\t}, 0);\n\t}\n*/\n\n}\n\n\nNodeS7.prototype.sendWritePacket = function() {\n\tvar self = this, i, dataBuffer, itemBuffer, dataBufferPointer, flagReconnect;\n\n\tdataBuffer = Buffer.alloc(8192);\n\n\tself.writeInQueue = false;\n\n\tfor (i = 0; i < self.writePacketArray.length; i++) {\n\t\tif (self.writePacketArray[i].sent) { continue; }\n\t\tif (self.parallelJobsNow >= self.maxParallel) { continue; }\n\t\t// From here down is SENDING the packet\n\t\tself.writePacketArray[i].reqTime = process.hrtime();\n\t\tself.writeReq.writeUInt8(self.writePacketArray[i].itemList.length, 18);\n\t\tself.writeReq.writeUInt16BE(self.writePacketArray[i].seqNum, 11);\n\n\t\tdataBufferPointer = 0;\n\t\tfor (var j = 0; j < self.writePacketArray[i].itemList.length; j++) {\n\t\t\tS7AddrToBuffer(self.writePacketArray[i].itemList[j], true).copy(self.writeReq, 19 + j * 12);\n\t\t\titemBuffer = getWriteBuffer(self.writePacketArray[i].itemList[j]);\n\t\t\titemBuffer.copy(dataBuffer, dataBufferPointer);\n\t\t\tdataBufferPointer += itemBuffer.length;\n\t\t\t// NOTE: It seems that when writing, the data that is sent must have a \"fill byte\" so that data length is even only for all\n\t\t\t//  but the last request.  The last request must have no padding.  So we add the padding here.\n\t\t\tif (j < (self.writePacketArray[i].itemList.length - 1)) {\n\t\t\t\tif (itemBuffer.length % 2) {\n\t\t\t\t\tdataBufferPointer += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\t\toutputLog('DataBufferPointer is ' + dataBufferPointer);\n\t\tself.writeReq.writeUInt16BE(19 + self.writePacketArray[i].itemList.length * 12 + dataBufferPointer, 2); // buffer length\n\t\tself.writeReq.writeUInt16BE(self.writePacketArray[i].itemList.length * 12 + 2, 13); // Parameter length - 14 for one read, 28 for 2.\n\t\tself.writeReq.writeUInt16BE(dataBufferPointer, 15); // Data length - as appropriate.\n\n\t\tdataBuffer.copy(self.writeReq, 19 + self.writePacketArray[i].itemList.length * 12, 0, dataBufferPointer);\n\n\t\tif (self.isoConnectionState === 4) {\n\t\t\t//\t\t\toutputLog('writing' + (19+dataBufferPointer+self.writePacketArray[i].itemList.length*12));\n\t\t\tself.writePacketArray[i].timeout = setTimeout(function() {\n\t\t\t\tself.packetTimeout.apply(self, arguments);\n\t\t\t}, self.globalTimeout, \"write\", self.writePacketArray[i].seqNum);\n\t\t\tself.isoclient.write(self.writeReq.slice(0, 19 + dataBufferPointer + self.writePacketArray[i].itemList.length * 12));  // was 31\n\t\t\tself.writePacketArray[i].sent = true;\n\t\t\tself.writePacketArray[i].rcvd = false;\n\t\t\tself.writePacketArray[i].timeoutError = false;\n\t\t\tself.parallelJobsNow += 1;\n\t\t\toutputLog('Sending Write Packet With Sequence Number ' + self.writePacketArray[i].seqNum, 1, self.connectionID);\n\t\t} else {\n\t\t\t//\t\t\toutputLog('Somehow got into write block without proper isoConnectionState of 4.  Disconnect.');\n\t\t\t//\t\t\tconnectionReset();\n\t\t\t//\t\t\tsetTimeout(connectNow, 2000, connectionParams);\n\t\t\t// This is essentially an instantTimeout.\n\t\t\tself.writePacketArray[i].sent = true;\n\t\t\tself.writePacketArray[i].rcvd = false;\n\t\t\tself.writePacketArray[i].timeoutError = true;\n\n\t\t\t// Without the scopePlaceholder, this doesn't work.   writePacketArray[i] becomes undefined.\n\t\t\t// The reason is that the value i is part of a closure and when seen \"nextTick\" has the same value\n\t\t\t// it would have just after the FOR loop is done.\n\t\t\t// (The FOR statement will increment it to beyond the array, then exit after the condition fails)\n\t\t\t// scopePlaceholder works as the array is de-referenced NOW, not \"nextTick\".\n//dm\t\t\tvar scopePlaceholder = self.writePacketArray[i].seqNum;\n//dm\t\t\tprocess.nextTick(function() {\n//dm\t\t\t\tself.packetTimeout(\"write\", scopePlaceholder);\n//dm\t\t\t});\n\n\t\t\tself.writePacketArray[i].timeout = setTimeout(function () {\n\t\t\t\tself.packetTimeout.apply(self, arguments);\n\t\t\t}, 0, \"write\", self.writePacketArray[i].seqNum);\n\n\t\t\tif (self.isoConnectionState === 0) {\n\t\t\t\tflagReconnect = true;\n\t\t\t}\n\t\t}\n\t}\n/* NOTE: We no longer do this here.\nReconnects are done on the response that we will get from the above packets.\nReason: We could have some packets waiting for timeout from the PLC, and others coming back instantly.\t\n\tif (flagReconnect) {\n\t\t//\t\tconsole.log(\"Asking for callback next tick and my ID is \" + self.connectionID);\n\t\tclearTimeout(self.reconnectTimer);\n\t\tself.reconnectTimer = setTimeout(function() {\n\t\t\t//\t\t\tconsole.log(\"Next tick is here and my ID is \" + self.connectionID);\n\t\t\toutputLog(\"The scheduled reconnect from sendWritePacket is happening now\", 1, self.connectionID);\n\t\t\tself.connectNow(self.connectionParams);  // We used to do this NOW - not NextTick() as we need to mark isoConnectionState as 1 right now.  Otherwise we queue up LOTS of connects and crash.\n\t\t}, 0);\n\t}*/\n}\n\nNodeS7.prototype.isOptimizableArea = function(area) {\n\tvar self = this;\n\n\tif (self.doNotOptimize) { return false; } // Are we skipping all optimization due to user request?\n\tswitch (area) {\n\t\tcase 0x84: // db\n\t\tcase 0x81: // input bytes\n\t\tcase 0x82: // output bytes\n\t\tcase 0x83: // memory bytes\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\nNodeS7.prototype.onResponse = function(theData) {\n\tvar self = this;\n\t// Packet Validity Check.  Note that this will pass even with a \"not available\" response received from the server.\n\t// For length calculation and verification:\n\t// data[4] = COTP header length. Normally 2.  This doesn't include the length byte so add 1.\n\t// read(13) is parameter length.  Normally 4.\n\t// read(14) is data length.  (Includes item headers)\n\t// 12 is length of \"S7 header\"\n\t// Then we need to add 4 for TPKT header.\n\n\t// Decrement our parallel jobs now\n\n\t// NOT SO FAST - can't do this here.  If we time out, then later get the reply, we can't decrement this twice.  Or the CPU will not like us.  Do it if not rcvd.  self.parallelJobsNow--;\n\n\t// hotfix for #78, prevents RangeErrors for undersized packets\n\tif (!(theData && theData.length > 6)) {\n\t\toutputLog('INVALID READ RESPONSE - DISCONNECTING');\n\t\toutputLog(\"The incoming packet doesn't have the required minimum length of 7 bytes\");\n\t\toutputLog(theData);\n\t\tself.connectionReset();\n\t\treturn;\n\t}\n\n\tvar data=checkRFCData(theData);\n\n\tif(data===\"fastACK\"){\n\t\t//read again and wait for the requested data\n\t\toutputLog('Fast Acknowledge received.', 0, self.connectionID);\n\t\tself.isoclient.removeAllListeners('error');\n\t\tself.isoclient.removeAllListeners('data');\n\t\tself.isoclient.on('data', function() {\n\t\t\tself.onResponse.apply(self, arguments);\n\t\t});\n\t\tself.isoclient.on('error', function() {\n\t\t\tself.readWriteError.apply(self, arguments);\n\t\t});\n\t}else if( data[7] === 0x32 ){//check the validy of FA+S7 package\n\n\t\t//*********************   VALIDY CHECK ***********************************\n\t\t//TODO: Check S7-Header properly\n\t\tif (data.length > 8 && data[8] != 3) {\n\t\t\toutputLog('PDU type (byte 8) was returned as ' + data[8] + ' where the response PDU of 3 was expected.');\n\t\t\toutputLog('Maybe you are requesting more than 240 bytes of data in a packet?');\n\t\t\toutputLog(data);\n\t\t\tself.connectionReset();\n\t\t\treturn null;\n\t\t}\n\t\t// The smallest read packet will pass a length check of 25.  For a 1-item write response with no data, length will be 22.\n\t\tif (data.length > data.readInt16BE(2)) {\n\t\t\toutputLog(\"An oversize packet was detected.  Excess length is \" + (data.length - data.readInt16BE(2)) + \".  \");\n\t\t\toutputLog(\"We assume this is because two packets were sent at nearly the same time by the PLC.\");\n\t\t\toutputLog(\"We are slicing the buffer and scheduling the second half for further processing next loop.\");\n\t\t\tsetTimeout(function() {\n\t\t\t\tself.onResponse.apply(self, arguments);\n\t\t\t}, 0, data.slice(data.readInt16BE(2)));  // This re-triggers this same function with the sliced-up buffer.\n\t\t\t// was used as a test\t\tsetTimeout(process.exit, 2000);\n\t\t}\n\n\t\tif (data.length < data.readInt16BE(2) || data.readInt16BE(2) < 22 || data[5] !== 0xf0 || data[4] + 1 + 12 + 4 + data.readInt16BE(13) + data.readInt16BE(15) !== data.readInt16BE(2) || !(data[6] >> 7) || (data[7] !== 0x32) || (data[8] !== 3)) {\n\t\t\toutputLog('INVALID READ RESPONSE - DISCONNECTING');\n\t\t\toutputLog('TPKT Length From Header is ' + data.readInt16BE(2) + ' and RCV buffer length is ' + data.length + ' and COTP length is ' + data.readUInt8(4) + ' and data[6] is ' + data[6]);\n\t\t\toutputLog(data);\n\t\t\tself.connectionReset();\n\t\t\treturn null;\n\t\t}\n\n\t\t//**********************   GO ON  *************************\n\t\t// Log the receive\n\t\toutputLog('Received ' + data.readUInt16BE(15) + ' bytes of S7-data from PLC.  Sequence number is ' + data.readUInt16BE(11), 1, self.connectionID);\n\n\t\t// Check the sequence number\n\t\tvar foundSeqNum; // self.readPacketArray.length - 1;\n\t\tvar isReadResponse, isWriteResponse;\n\n\t\t//\tfor (packetCount = 0; packetCount < self.readPacketArray.length; packetCount++) {\n\t\t//\t\tif (self.readPacketArray[packetCount].seqNum == data.readUInt16BE(11)) {\n\t\t//\t\t\tfoundSeqNum = packetCount;\n\t\t//\t\t\tbreak;\n\t\t//\t\t}\n\t\t//\t}\n\t\tfoundSeqNum = self.findReadIndexOfSeqNum(data.readUInt16BE(11));\n\n\t\t//\tif (self.readPacketArray[packetCount] == undefined) {\n\t\tif (foundSeqNum === undefined) {\n\t\t\tfoundSeqNum = self.findWriteIndexOfSeqNum(data.readUInt16BE(11));\n\t\t\tif (foundSeqNum !== undefined) {\n\t\t\t\t//\t\tfor (packetCount = 0; packetCount < self.writePacketArray.length; packetCount++) {\n\t\t\t\t//\t\t\tif (self.writePacketArray[packetCount].seqNum == data.readUInt16BE(11)) {\n\t\t\t\t//\t\t\t\tfoundSeqNum = packetCount;\n\t\t\t\tself.writeResponse(data, foundSeqNum);\n\t\t\t\tisWriteResponse = true;\n\t\t\t\t//\t\t\t\tbreak;\n\t\t\t}\n\n\n\t\t} else {\n\t\t\tisReadResponse = true;\n\t\t\tself.readResponse(data, foundSeqNum);\n\t\t}\n\n\t\tif ((!isReadResponse) && (!isWriteResponse)) {\n\t\t\toutputLog(\"Sequence number that arrived wasn't a write reply either - dropping\");\n\t\t\toutputLog(data);\n\t\t\t// \tI guess this isn't a showstopper, just ignore it.\n\t\t\t//\t\tself.isoclient.end();\n\t\t\t//\t\tsetTimeout(self.connectNow, 2000, self.connectionParams);\n\t\t\treturn null;\n\t\t}\n\n\t}else{\n\t\toutputLog('INVALID READ RESPONSE - DISCONNECTING');\n\t\toutputLog('TPKT Length From Header is ' + theData.readInt16BE(2) + ' and RCV buffer length is ' + theData.length + ' and COTP length is ' + theData.readUInt8(4) + ' and data[6] is ' + theData[6]);\n\t\toutputLog(theData);\n\t\tself.connectionReset();\n\t\treturn null;\n\t}\n\n}\n\nNodeS7.prototype.findReadIndexOfSeqNum = function(seqNum) {\n\tvar self = this, packetCounter;\n\tfor (packetCounter = 0; packetCounter < self.readPacketArray.length; packetCounter++) {\n\t\tif (self.readPacketArray[packetCounter].seqNum == seqNum) {\n\t\t\treturn packetCounter;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nNodeS7.prototype.findWriteIndexOfSeqNum = function(seqNum) {\n\tvar self = this, packetCounter;\n\tfor (packetCounter = 0; packetCounter < self.writePacketArray.length; packetCounter++) {\n\t\tif (self.writePacketArray[packetCounter].seqNum == seqNum) {\n\t\t\treturn packetCounter;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nNodeS7.prototype.writeResponse = function(data, foundSeqNum) {\n\tvar self = this, dataPointer = 21, i, anyBadQualities;\n\n\tfor (var itemCount = 0; itemCount < self.writePacketArray[foundSeqNum].itemList.length; itemCount++) {\n\t\t//\t\toutputLog('Pointer is ' + dataPointer);\n\t\tdataPointer = processS7WriteItem(data, self.writePacketArray[foundSeqNum].itemList[itemCount], dataPointer);\n\t\tif (!dataPointer) {\n\t\t\toutputLog('Stopping Processing Write Response Packet due to unrecoverable packet error');\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Make a note of the time it took the PLC to process the request.\n\tself.writePacketArray[foundSeqNum].reqTime = process.hrtime(self.writePacketArray[foundSeqNum].reqTime);\n\toutputLog('Time is ' + self.writePacketArray[foundSeqNum].reqTime[0] + ' seconds and ' + Math.round(self.writePacketArray[foundSeqNum].reqTime[1] * 10 / 1e6) / 10 + ' ms.', 1, self.connectionID);\n\n\t//\tself.writePacketArray.splice(foundSeqNum, 1);\n\tif (!self.writePacketArray[foundSeqNum].rcvd) {\n\t\tself.writePacketArray[foundSeqNum].rcvd = true;\n\t\tself.parallelJobsNow--;\n\t}\n\tclearTimeout(self.writePacketArray[foundSeqNum].timeout);\n\n\tif (!self.writePacketArray.every(doneSending)) {\n\t\toutputLog(\"Not done sending - sending more packets from writeResponse\",1,self.connectionID);\n\t\tself.sendWritePacket();\n\t} else {\n\t\toutputLog(\"Received all packets in writeResponse\",1,self.connectionID);\n\t\tfor (i = 0; i < self.writePacketArray.length; i++) {\n\t\t\tself.writePacketArray[i].sent = false;\n\t\t\tself.writePacketArray[i].rcvd = false;\n\t\t}\n\n\t\tanyBadQualities = false;\n\n\t\tfor (i = 0; i < self.globalWriteBlockList.length; i++) {\n\t\t\t// Post-process the write code and apply the quality.\n\t\t\t// Loop through the global block list...\n\t\t\twritePostProcess(self.globalWriteBlockList[i]);\n\t\t\tfor (var k = 0; k < self.globalWriteBlockList[i].itemReference.length; k++) {\n\t\t\t\toutputLog(self.globalWriteBlockList[i].itemReference[k].addr + ' write completed with quality ' + self.globalWriteBlockList[i].itemReference[k].writeQuality, 0, self.connectionID);\n\t\t\t\tif (!isQualityOK(self.globalWriteBlockList[i].itemReference[k].writeQuality)) {\n\t\t\t\t\tanyBadQualities = true;\n\t\t\t\t}\n\t\t\t}\n//\t\t\toutputLog(self.globalWriteBlockList[i].addr + ' write completed with quality ' + self.globalWriteBlockList[i].writeQuality, 1, self.connectionID);\n\t\t\tif (!isQualityOK(self.globalWriteBlockList[i].writeQuality)) { anyBadQualities = true; }\n\t\t}\n\t\tif (self.resetPending) {\n\t\t\toutputLog('Calling reset from writeResponse as there is one pending',0,self.connectionID);\n\t\t\tself.resetNow();\n\t\t}\n\t\tif (self.isoConnectionState === 0) {\n\t\t\tself.connectNow(self.connectionParams, false);\n\t\t}\n\t\toutputLog('We are calling back our writeDoneCallback.',1,self.connectionID);\n\t\tif (typeof(self.writeDoneCallback) === 'function') {\n\t\t\tself.writeDoneCallback(anyBadQualities);\n\t\t}\n\t}\n}\n\nfunction doneSending(element) {\n\treturn ((element.sent && element.rcvd) ? true : false);\n}\n\nNodeS7.prototype.readResponse = function(data, foundSeqNum) {\n\tvar self = this, i;\n\tvar anyBadQualities;\n\tvar dataPointer = 21; // For non-routed packets we start at byte 21 of the packet.  If we do routing it will be more than this.\n\tvar dataObject = {};\n\n\t//\tif (self.readPacketArray.timeod (i forget what was going on here)\n\t//\tif (typeof(data) === \"undefined\") {\n\t//\t\toutputLog(\"Undefined \" + foundSeqNum);\n\t//\t} else {\n\t//\t\toutputLog(\"Defined \" + foundSeqNum);\n\t//\t}\n\n\toutputLog(\"ReadResponse called\", 1, self.connectionID);\n\n\tif (!self.readPacketArray[foundSeqNum].sent) {\n\t\toutputLog('WARNING: Received a read response packet that was not marked as sent', 0, self.connectionID);\n\t\t//TODO - fix the network unreachable error that made us do this\n\t\treturn null;\n\t}\n\n\tif (self.readPacketArray[foundSeqNum].rcvd) {\n\t\toutputLog('WARNING: Received a read response packet that was already marked as received', 0, self.connectionID);\n\t\treturn null;\n\t}\n\n\tfor (var itemCount = 0; itemCount < self.readPacketArray[foundSeqNum].itemList.length; itemCount++) {\n\t\tdataPointer = processS7Packet(data, self.readPacketArray[foundSeqNum].itemList[itemCount], dataPointer, self.connectionID);\n\t\tif (!dataPointer) {\n\t\t\toutputLog('Received a ZERO RESPONSE Processing Read Packet due to unrecoverable packet error', 0, self.connectionID);\n\t\t\t// We rely on this for our timeout.\n\t\t}\n\t}\n\n\t// Make a note of the time it took the PLC to process the request.\n\tself.readPacketArray[foundSeqNum].reqTime = process.hrtime(self.readPacketArray[foundSeqNum].reqTime);\n\toutputLog('Time is ' + self.readPacketArray[foundSeqNum].reqTime[0] + ' seconds and ' + Math.round(self.readPacketArray[foundSeqNum].reqTime[1] * 10 / 1e6) / 10 + ' ms.', 1, self.connectionID);\n\n\t// Do the bookkeeping for packet and timeout.\n\tif (!self.readPacketArray[foundSeqNum].rcvd) {\n\t\tself.readPacketArray[foundSeqNum].rcvd = true;\n\t\tself.parallelJobsNow--;\n\t}\n\tclearTimeout(self.readPacketArray[foundSeqNum].timeout);\n\n\tif (self.readPacketArray.every(doneSending)) {  // if sendReadPacket returns true we're all done.\n\t\t// Mark our packets unread for next time.\n\t\tfor (i = 0; i < self.readPacketArray.length; i++) {\n\t\t\tself.readPacketArray[i].sent = false;\n\t\t\tself.readPacketArray[i].rcvd = false;\n\t\t}\n\n\t\tanyBadQualities = false;\n\n\t\t// Loop through the global block list...\n\t\tfor (i = 0; i < self.globalReadBlockList.length; i++) {\n\t\t\tvar lengthOffset = 0;\n\t\t\t// For each block, we loop through all the requests.  Remember, for all but large arrays, there will only be one.\n\t\t\tfor (var j = 0; j < self.globalReadBlockList[i].requestReference.length; j++) {\n\t\t\t\t// Now that our request is complete, we reassemble the BLOCK byte buffer as a copy of each and every request byte buffer.\n\t\t\t\tself.globalReadBlockList[i].requestReference[j].byteBuffer.copy(self.globalReadBlockList[i].byteBuffer, lengthOffset, 0, self.globalReadBlockList[i].requestReference[j].byteLength);\n\t\t\t\tself.globalReadBlockList[i].requestReference[j].qualityBuffer.copy(self.globalReadBlockList[i].qualityBuffer, lengthOffset, 0, self.globalReadBlockList[i].requestReference[j].byteLength);\n\t\t\t\tlengthOffset += self.globalReadBlockList[i].requestReference[j].byteLength;\n\t\t\t}\n\t\t\t// For each ITEM reference pointed to by the block, we process the item.\n\t\t\tfor (var k = 0; k < self.globalReadBlockList[i].itemReference.length; k++) {\n\t\t\t\tprocessS7ReadItem(self.globalReadBlockList[i].itemReference[k]);\n\t\t\t\toutputLog('Address ' + self.globalReadBlockList[i].itemReference[k].addr + ' has value ' + self.globalReadBlockList[i].itemReference[k].value + ' and quality ' + self.globalReadBlockList[i].itemReference[k].quality, 1, self.connectionID);\n\t\t\t\tif (!isQualityOK(self.globalReadBlockList[i].itemReference[k].quality)) {\n\t\t\t\t\tanyBadQualities = true;\n\t\t\t\t\tdataObject[self.globalReadBlockList[i].itemReference[k].useraddr] = self.globalReadBlockList[i].itemReference[k].quality;\n\t\t\t\t} else {\n\t\t\t\t\tdataObject[self.globalReadBlockList[i].itemReference[k].useraddr] = self.globalReadBlockList[i].itemReference[k].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n// Not as of Feb 2019\t\tif (self.resetPending) {\n// Not as of Feb 2019\t\t\tself.resetNow();\n// Not as of Feb 2019\t\t}\n\n\t\tif (!self.writeInQueue) {\n\t\t\tif (self.resetPending) {\n\t\t\t\toutputLog('Calling reset from readResponse as there is one pending',0,self.connectionID);\n\t\t\t\tself.resetNow();\n\t\t\t}\n\t\t\tif (self.isoConnectionState === 0) {\n\t\t\t\tself.connectNow(self.connectionParams, false);\n\t\t\t}\n\t\t} else {\n\t\t\toutputLog('Write In Queue.  ICS ' + self.isoConnectionState + ' resetPending ' + self.resetPending,1,self.connectionID);\t\t\n\t\t}\n\n\t\t// Inform our user that we are done and that the values are ready for pickup.\n\t\toutputLog(\"We are calling back our readDoneCallback.\", 1, self.connectionID);\n\t\tif (typeof (self.readDoneCallback) === 'function') {\n\t\t\tself.readDoneCallback(anyBadQualities, dataObject);\n\t\t}\n\n\t\tif (!self.isReading() && self.writeInQueue) {\n\t\t\toutputLog(\"SendWritePacket called because write was queued.\", 0, self.connectionID);\n\t\t\tself.sendWritePacket();\n\t\t}\n\t} else {\n\t\tself.sendReadPacket();\n\t}\n}\n\n\nNodeS7.prototype.onClientDisconnect = function() {\n\tvar self = this;\n\toutputLog('ISO-on-TCP connection DISCONNECTED.', 0, self.connectionID);\n\n\t// We issue the callback here for Trela/Honcho - in some cases TCP connects, and ISO-on-TCP doesn't.\n\t// If this is the case we need to issue the Connect CB in order to keep trying.\n\tif ((!self.connectCBIssued) && (typeof (self.connectCallback) === \"function\")) {\n\t\tself.connectCBIssued = true;\n\t\tself.connectCallback(\"Error - TCP connected, ISO didn't\");\n\t}\n\n\t// We used to call self.connectionCleanup() - in other words we would give up.\n\t// However - realize that this event is called when the OTHER END of the connection sends a FIN packet.\n\t// Certain situations (download user program to mem card on S7-400, pop memory card out of S7-300, both with NetLink) cause this to happen.\n\t// So now, let's try a \"connetionReset\".  This way, we are guaranteed to return values (or bad) and reset at the proper time.\n\t// self.connectionCleanup();\n\tself.connectionReset();\n}\n\nNodeS7.prototype.onClientClose = function() {\n\tvar self = this;\n    // clean up the connection now the socket has closed\n\t\t// We used to call self.connectionCleanup() here, but it caused problems.\n\t\t// However - realize that this event is also called when the OTHER END of the connection sends a FIN packet.\n\t\t// Certain situations (download user program to mem card on S7-400, pop memory card out of S7-300, both with NetLink) cause this to happen.\n\t\t// So now, let's try a \"connetionReset\".  This way, we are guaranteed to return values (even if bad) and reset at the proper time.\n\t\t// Without this, client applications had to be prepared for a read/write not returning.\n\tself.connectionReset();\n\n    // initiate the callback stored by dropConnection\n    if (self.dropConnectionCallback) {\n        self.dropConnectionCallback();\n        // prevent any possiblity of the callback being called twice\n        self.dropConnectionCallback = null;\n        // and cancel the timeout\n        clearTimeout(self.dropConnectionTimer);\n    }\n}\n\nNodeS7.prototype.connectionReset = function() {\n\tvar self = this;\n\tself.isoConnectionState = 0;\n\tself.resetPending = true;\n\toutputLog('ConnectionReset has been called to set the reset as pending', 0, self.connectionID);\n\tif (!self.isReading() && !self.isWriting() && !self.writeInQueue && typeof(self.resetTimeout) === 'undefined') { // We can no longer logically ignore writes here\n\t\tself.resetTimeout = setTimeout(function() {\n\t\t\toutputLog('Timed reset has happened. Ideally this would never be called as reset should be completed when done r/w.',0,self.connectionID);\n\t\t\tself.resetNow.apply(self, arguments);\n\t\t}, 3500);  // Increased to 3500 to prevent problems with packet timeouts\n\t}\n\t// We wait until read() is called again to re-connect.\n}\n\nNodeS7.prototype.resetNow = function() {\n\tvar self = this;\n\tself.isoConnectionState = 0;\n\tself.isoclient.end();\n\toutputLog('ResetNOW is happening', 0, self.connectionID);\n\tself.resetPending = false;\n\t// In some cases, we can have a timeout scheduled for a reset, but we don't want to call it again in that case.\n\t// We only want to call a reset just as we are returning values.  Otherwise, we will get asked to read // more values and we will \"break our promise\" to always return something when asked.\n\tif (typeof (self.resetTimeout) !== 'undefined') {\n\t\tclearTimeout(self.resetTimeout);\n\t\tself.resetTimeout = undefined;\n\t\toutputLog('Clearing an earlier scheduled reset', 0, self.connectionID);\n\t}\n}\n\nNodeS7.prototype.connectionCleanup = function() {\n\tvar self = this;\n\tself.isoConnectionState = 0;\n\toutputLog('Connection cleanup is happening', 0, self.connectionID);\n\tif (typeof (self.isoclient) !== \"undefined\") {\n\t\t// destroy the socket connection\n\t\tself.isoclient.destroy();\n\t\tself.isoclient.removeAllListeners('data');\n\t\tself.isoclient.removeAllListeners('error');\n\t\tself.isoclient.removeAllListeners('connect');\n\t\tself.isoclient.removeAllListeners('end');\n\t\tself.isoclient.removeAllListeners('close');\n\t\tself.isoclient.on('error',function() {\n\t\t\toutputLog('TCP socket error following connection cleanup');\n\t\t});\n\t}\n\tclearTimeout(self.connectTimeout);\n\tclearTimeout(self.PDUTimeout);\n\tself.clearReadPacketTimeouts();  // Note this clears timeouts.\n\tself.clearWritePacketTimeouts();  // Note this clears timeouts.\n}\n\n/**\n * Internal Functions\n */\n\nfunction checkRFCData(data){\n   var ret=null;\n   var RFC_Version = data[0];\n   var TPKT_Length = data.readInt16BE(2);\n   var TPDU_Code = data[5]; //Data==0xF0 !!\n   var LastDataUnit = data[6];//empty fragmented frame => 0=not the last package; 1=last package\n\n   if(RFC_Version !==0x03 && TPDU_Code !== 0xf0){\n      //Check if its an RFC package and a Data package\n      return 'error';\n   }else if((LastDataUnit >> 7) === 0 && TPKT_Length == data.length &&  data.length === 7){\n      // Check if its a Fast Acknowledge package from older PLCs or  WinAC or data is too long ...\n      // For example: <Buffer 03 00 00 07 02 f0 00> => data.length==7\n      ret='fastACK';\n   }else if((LastDataUnit >> 7) == 1 && TPKT_Length <= data.length){\n      // Check if its an  FastAcknowledge package + S7Data package\n      // <Buffer 03 00 00 1b 02 f0 80 32 03 00 00 00 00 00 08 00 00 00 00 f0 00 00 01 00 01 00 f0> => data.length==7+20=27\n      ret=data;\n   }else if((LastDataUnit >> 7) == 0  && TPKT_Length !== data.length){\n      // Check if its an  FastAcknowledge package + FastAcknowledge package+ S7Data package\n      // Possibly because NodeS7 or Application is too slow at this moment!\n      // <Buffer 03 00 00 07 02 f0 00 03 00 00 1b 02 f0 80 32 03 00 00 00 00 00 08 00 00 00 00 f0 00 00 01 00 01 00 f0>  => data.length==7+7+20=34\n      ret=data.slice(7, data.length)//Cut off the first Fast Acknowledge Packet\n   }else{\n      ret='error';\n   }\n   return ret;\n}\n\nfunction S7AddrToBuffer(addrinfo, isWriting) {\n\tvar thisBitOffset = 0, theReq = Buffer.from([0x12, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n\n\t// First 3 bytes (0,1,2) is constant, sniffed from other traffic, for S7 head.\n\t// Next one is \"byte length\" - we always request X number of bytes - even for a REAL with length of 1 we read BYTES length of 4.\n\ttheReq[3] = 0x02;  // Byte length\n\n\t// Next we write the number of bytes we are going to read.\n\tif (addrinfo.datatype === 'X') {\n\t\ttheReq.writeUInt16BE(addrinfo.byteLength, 4);\n\t\tif (isWriting && addrinfo.arrayLength === 1) {\n\t\t\t// Byte length will be 1 already so no need to special case this.\n\t\t\ttheReq[3] = 0x01;  // 1 = \"BIT\" length\n\t\t\t// We need to specify the bit offset in this case only.  Normally, when reading, we read the whole byte anyway and shift bits around.  Can't do this when writing only one bit.\n\t\t\tthisBitOffset = addrinfo.bitOffset;\n\t\t}\n\t} else if (addrinfo.datatype === 'TIMER' || addrinfo.datatype === 'COUNTER') {\n\t\ttheReq.writeUInt16BE(1, 4);\n\t\ttheReq.writeUInt8(addrinfo.areaS7Code, 3);\n\t} else {\n\t\ttheReq.writeUInt16BE(addrinfo.byteLength, 4);\n\t}\n\n\t// Then we write the data block number.\n\ttheReq.writeUInt16BE(addrinfo.dbNumber, 6);\n\n\t// Write our area crossing pointer.  When reading, write a bit offset of 0 - we shift the bit offset out later only when reading.\n\ttheReq.writeUInt32BE(addrinfo.offset * 8 + thisBitOffset, 8);\n\n\t// Now we have to BITWISE OR the area code over the area crossing pointer.\n\t// This must be done AFTER writing the area crossing pointer as there is overlap, but this will only be noticed on large DB.\n\ttheReq[8] |= addrinfo.areaS7Code;\n\n\treturn theReq;\n}\n\nfunction processS7Packet(theData, theItem, thePointer, theCID) {\n\n\tvar remainingLength;\n\n\tif (typeof (theData) === \"undefined\") {\n\t\tremainingLength = 0;\n\t\toutputLog(\"Processing an undefined packet, likely due to timeout error\", 0, theCID);\n\t} else if (isNaN(theItem.byteLength)) {\n\t\t// byteLength Nan should probably never reach this method.\n\t\t// This temporal fix avoids the library crashing\n\t\toutputLog(\"Processing an undefined packet, perhaps bad input?\", 0, theCID);\n\t\treturn 0;\n\t} else {\n\t\tremainingLength = theData.length - thePointer;  // Say if length is 39 and pointer is 35 we can access 35,36,37,38 = 4 bytes.\n\t}\n\tvar prePointer = thePointer;\n\n\t// Create a new buffer for the quality.\n\ttheItem.qualityBuffer = Buffer.alloc(theItem.byteLength);\n\ttheItem.qualityBuffer.fill(0xFF);  // Fill with 0xFF (255) which means NO QUALITY in the OPC world.\n\n\tif (remainingLength < 4) {\n\t\ttheItem.valid = false;\n\t\tif (typeof (theData) !== \"undefined\") {\n\t\t\ttheItem.errCode = 'Malformed Packet - Less Than 4 Bytes.  TDL' + theData.length + 'TP' + thePointer + 'RL' + remainingLength;\n\t\t} else {\n\t\t\ttheItem.errCode = \"Timeout error - zero length packet\";\n\t\t}\n\t\toutputLog(theItem.errCode, 0, theCID);\n\t\treturn 0;   \t\t\t// Hard to increment the pointer so we call it a malformed packet and we're done.\n\t}\n\n\tvar reportedDataLength;\n\n\tif (theItem.readTransportCode == 0x04) {\n\t\treportedDataLength = theData.readUInt16BE(thePointer + 2) / 8;  // For different transport codes this may not be right.\n\t} else {\n\t\treportedDataLength = theData.readUInt16BE(thePointer + 2);\n\t}\n\tvar responseCode = theData[thePointer];\n\tvar transportCode = theData[thePointer + 1];\n\n\tif (remainingLength == (reportedDataLength + 2)) {\n\t\toutputLog(\"Not last part.\", 0, theCID);\n\t}\n\n\tif (remainingLength < reportedDataLength + 2) {\n\t\ttheItem.valid = false;\n\t\ttheItem.errCode = 'Malformed Packet - Item Data Length and Packet Length Disagree.  RDL+2 ' + (reportedDataLength + 2) + ' remainingLength ' + remainingLength;\n\t\toutputLog(theItem.errCode, 0 , theCID);\n\t\treturn 0;   \t\t\t// Hard to increment the pointer so we call it a malformed packet and we're done.\n\t}\n\n\tif (responseCode !== 0xff) {\n\t\ttheItem.valid = false;\n\t\ttheItem.errCode = 'Invalid Response Code - ' + responseCode;\n\t\toutputLog(theItem.errCode, 0 , theCID);\n\t\treturn thePointer + reportedDataLength + 4;\n\t}\n\n\tif (transportCode !== theItem.readTransportCode) {\n\t\ttheItem.valid = false;\n\t\ttheItem.errCode = 'Invalid Transport Code - ' + transportCode;\n\t\toutputLog(theItem.errCode, 0 , theCID);\n\t\treturn thePointer + reportedDataLength + 4;\n\t}\n\n\tvar expectedLength = theItem.byteLength;\n\n\tif (reportedDataLength !== expectedLength) {\n\t\ttheItem.valid = false;\n\t\ttheItem.errCode = 'Invalid Response Length - Expected ' + expectedLength + ' but got ' + reportedDataLength + ' bytes.';\n\t\toutputLog(theItem.errCode, 0 , theCID);\n\t\treturn reportedDataLength + 2;\n\t}\n\n\t// Looks good so far.\n\t// Increment our data pointer past the status code, transport code and 2 byte length.\n\tthePointer += 4;\n\n\ttheItem.valid = true;\n\ttheItem.byteBuffer = theData.slice(thePointer, thePointer + reportedDataLength);\n\ttheItem.qualityBuffer.fill(0xC0);  // Fill with 0xC0 (192) which means GOOD QUALITY in the OPC world.\n\n\tthePointer += theItem.byteLength; //WithFill;\n\n\tif (((thePointer - prePointer) % 2)) { // Odd number.  With the S7 protocol we only request an even number of bytes.  So there will be a filler byte.\n\t\tthePointer += 1;\n\t}\n\n\t//\toutputLog(\"We have an item value of \" + theItem.value + \" for \" + theItem.addr + \" and pointer of \" + thePointer);\n\n\treturn thePointer;\n}\n\nfunction processS7WriteItem(theData, theItem, thePointer) {\n\n\tvar remainingLength;\n\n\tif (!theData) {\n\t\ttheItem.writeQualityBuffer.fill(0xFF);  // Note that ff is good in the S7 world but BAD in our fill here.\n\t\ttheItem.valid = false;\n\t\ttheItem.errCode = 'We must have timed Out - we have no response to process';\n\t\toutputLog(theItem.errCode);\n\t\treturn 0;\n\t}\n\n\tremainingLength = theData.length - thePointer;  // Say if length is 39 and pointer is 35 we can access 35,36,37,38 = 4 bytes.\n\n\tif (remainingLength < 1) {\n\t\ttheItem.writeQualityBuffer.fill(0xFF);  // Note that ff is good in the S7 world but BAD in our fill here.\n\t\ttheItem.valid = false;\n\t\ttheItem.errCode = 'Malformed Packet - Less Than 1 Byte.  TDL ' + theData.length + ' TP' + thePointer + ' RL' + remainingLength;\n\t\toutputLog(theItem.errCode);\n\t\treturn 0;   \t\t\t// Hard to increment the pointer so we call it a malformed packet and we're done.\n\t}\n\n\tvar writeResponse = theData.readUInt8(thePointer);\n\n\ttheItem.writeResponse = writeResponse;\n\n\tif (writeResponse !== 0xff) {\n\t\toutputLog('Received write error of ' + theItem.writeResponse + ' on ' + theItem.addr);\n\t\ttheItem.writeQualityBuffer.fill(0xFF);  // Note that ff is good in the S7 world but BAD in our fill here.\n\t} else {\n\t\ttheItem.writeQualityBuffer.fill(0xC0);\n\t}\n\n\treturn (thePointer + 1);\n}\n\nfunction writePostProcess(theItem) {\n\tvar thePointer = 0;\n\tif (theItem.arrayLength === 1) {\n\t\tif (theItem.writeQualityBuffer[0] === 0xFF) {\n\t\t\ttheItem.writeQuality = 'BAD';\n\t\t} else {\n\t\t\ttheItem.writeQuality = 'OK';\n\t\t}\n\t} else {\n\t\t// Array value.\n\t\ttheItem.writeQuality = [];\n\t\tfor (var arrayIndex = 0; arrayIndex < theItem.arrayLength; arrayIndex++) {\n\t\t\tif (theItem.writeQualityBuffer[thePointer] === 0xFF) {\n\t\t\t\ttheItem.writeQuality[arrayIndex] = 'BAD';\n\t\t\t} else {\n\t\t\t\ttheItem.writeQuality[arrayIndex] = 'OK';\n\t\t\t}\n\t\t\tif (theItem.datatype == 'X') {\n\t\t\t\t// For bit arrays, we have to do some tricky math to get the pointer to equal the byte offset.\n\t\t\t\t// Note that we add the bit offset here for the rare case of an array starting at other than zero.  We either have to\n\t\t\t\t// drop support for this at the request level or support it here.\n\n\t\t\t\tif ((((arrayIndex + theItem.bitOffset + 1) % 8) === 0) || (arrayIndex == theItem.arrayLength - 1)) {\n\t\t\t\t\tthePointer += theItem.dtypelen;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Add to the pointer every time.\n\t\t\t\tthePointer += theItem.dtypelen;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction fromBCD(n) {\n\treturn ((n >> 4) * 10) + (n & 0xf)\n}\n\nfunction toBCD(n) {\n\treturn ((n / 10) << 4) | (n % 10)\n}\n\nfunction readDT(buffer, offset, isUTC) {\n\tlet year = fromBCD(buffer.readUInt8(offset));\n\tlet month = fromBCD(buffer.readUInt8(offset + 1));\n\tlet day = fromBCD(buffer.readUInt8(offset + 2));\n\tlet hour = fromBCD(buffer.readUInt8(offset + 3));\n\tlet min = fromBCD(buffer.readUInt8(offset + 4));\n\tlet sec = fromBCD(buffer.readUInt8(offset + 5));\n\tlet ms_1 = fromBCD(buffer.readUInt8(offset + 6));\n\tlet ms_2 = fromBCD(buffer.readUInt8(offset + 7) & 0xf0);\n\n\tlet date;\n\tif (isUTC) {\n\t\tdate = new Date(Date.UTC((year > 89 ? 1900 : 2000) + year, month - 1,\n\t\t\tday, hour, min, sec, (ms_1 * 10) + (ms_2 / 10)))\n\t} else {\n\t\tdate = new Date((year > 89 ? 1900 : 2000) + year, month - 1,\n\t\t\tday, hour, min, sec, (ms_1 * 10) + (ms_2 / 10));\n\t}\n\n\treturn date;\n}\n\nfunction writeDT(date, buffer, offset, isUTC){\n\tif (!(date instanceof Date)) {\n\t\tif (date > 631152000000 && date < 3786911999999) {\n\t\t\t// is between \"1990-01-01T00:00:00.000Z\" and \"2089-12-31T23:59:59.999Z\" in JS epoch\n\t\t\t// as per data type's range definition\n\t\t\tdate = new Date(date);\n\t\t} else {\n\t\t\toutputLog(\"Unsupported value of [\" + date + \"] for writing data of type DATE_AND_TIME. Skipping item\");\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (isUTC) {\n\t\tbuffer.writeUInt8(toBCD(date.getUTCFullYear() % 100), offset);\n\t\tbuffer.writeUInt8(toBCD(date.getUTCMonth() + 1), offset + 1);\n\t\tbuffer.writeUInt8(toBCD(date.getUTCDate()), offset + 2);\n\t\tbuffer.writeUInt8(toBCD(date.getUTCHours()), offset + 3);\n\t\tbuffer.writeUInt8(toBCD(date.getUTCMinutes()), offset + 4);\n\t\tbuffer.writeUInt8(toBCD(date.getUTCSeconds()), offset + 5);\n\t\tbuffer.writeUInt8(toBCD((date.getUTCMilliseconds() / 10) >> 0), offset + 6);\n\t\tbuffer.writeUInt8(toBCD(((date.getUTCMilliseconds() % 10) * 10) + (date.getUTCDay() + 1)), offset + 7);\n\t} else {\n\t\tbuffer.writeUInt8(toBCD(date.getFullYear() % 100), offset);\n\t\tbuffer.writeUInt8(toBCD(date.getMonth() + 1), offset + 1);\n\t\tbuffer.writeUInt8(toBCD(date.getDate()), offset + 2);\n\t\tbuffer.writeUInt8(toBCD(date.getHours()), offset + 3);\n\t\tbuffer.writeUInt8(toBCD(date.getMinutes()), offset + 4);\n\t\tbuffer.writeUInt8(toBCD(date.getSeconds()), offset + 5);\n\t\tbuffer.writeUInt8(toBCD((date.getMilliseconds() / 10) >> 0), offset + 6);\n\t\tbuffer.writeUInt8(toBCD(((date.getMilliseconds() % 10) * 10) + (date.getDay() + 1)), offset + 7);\n\t}\n}\n\nfunction readDTL(buffer, offset, isUTC) {\n\tlet year = buffer.readUInt16BE(offset);\n\tlet month = buffer.readUInt8(offset + 2);\n\tlet day = buffer.readUInt8(offset + 3);\n\t//let weekday = buffer.readUInt8(offset + 4);\n\tlet hour = buffer.readUInt8(offset + 5);\n\tlet min = buffer.readUInt8(offset + 6);\n\tlet sec = buffer.readUInt8(offset + 7);\n\tlet ns = buffer.readUInt32BE(offset + 8);\n\n\tlet date;\n\tif (isUTC) {\n\t\tdate = new Date(Date.UTC(year, month - 1,\n\t\t\tday, hour, min, sec, ns / 1e6))\n\t} else {\n\t\tdate = new Date(year, month - 1,\n\t\t\tday, hour, min, sec, ns / 1e6);\n\t}\n\n\treturn date;\n}\n\nfunction writeDTL(date, buffer, offset, isUTC) {\n\tif (!(date instanceof Date)) {\n\t\tif (date >= 0 && date < 9223382836854) {\n\t\t\t// is between \"1970-01-01T00:00:00.000Z\" and \"2262-04-11T23:47:16.854Z\" in JS epoch\n\t\t\t// as per data type's range definition\n\t\t\tdate = new Date(date);\n\t\t} else {\n\t\t\toutputLog(\"Unsupported value of [\" + date + \"] for writing data of type DATE_AND_TIME. Skipping item\");\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (isUTC) {\n\t\tbuffer.writeUInt16BE(date.getUTCFullYear(), offset);\n\t\tbuffer.writeUInt8(date.getUTCMonth() + 1, offset + 2);\n\t\tbuffer.writeUInt8(date.getUTCDate(), offset + 3);\n\t\tbuffer.writeUInt8(date.getUTCDay() + 1, offset + 4);\n\t\tbuffer.writeUInt8(date.getUTCHours(), offset + 5);\n\t\tbuffer.writeUInt8(date.getUTCMinutes(), offset + 6);\n\t\tbuffer.writeUInt8(date.getUTCSeconds(), offset + 7);\n\t\tbuffer.writeUInt32BE(date.getUTCMilliseconds() * 1e6, offset + 8);\n\t} else {\n\t\tbuffer.writeUInt16BE(date.getFullYear(), offset);\n\t\tbuffer.writeUInt8(date.getMonth() + 1, offset + 2);\n\t\tbuffer.writeUInt8(date.getDate(), offset + 3);\n\t\tbuffer.writeUInt8(date.getDay() + 1, offset + 4);\n\t\tbuffer.writeUInt8(date.getHours(), offset + 5);\n\t\tbuffer.writeUInt8(date.getMinutes(), offset + 6);\n\t\tbuffer.writeUInt8(date.getSeconds(), offset + 7);\n\t\tbuffer.writeUInt32BE(date.getMilliseconds() * 1e6, offset + 8);\n\t}\n}\n\nfunction processS7ReadItem(theItem) {\n\n\tvar thePointer = 0;\n\tvar strlen = 0;\n\tvar tempString = '';\n\n\tif (theItem.arrayLength > 1) {\n\t\t// Array value.\n\t\tif (theItem.datatype != 'C' && theItem.datatype != 'CHAR') {\n\t\t\ttheItem.value = [];\n\t\t\ttheItem.quality = [];\n\t\t} else {\n\t\t\ttheItem.value = '';\n\t\t\ttheItem.quality = '';\n\t\t}\n\t\tvar bitShiftAmount = theItem.bitOffset;\n\t\tfor (var arrayIndex = 0; arrayIndex < theItem.arrayLength; arrayIndex++) {\n\t\t\tif (theItem.qualityBuffer[thePointer] !== 0xC0) {\n\t\t\t\tif (theItem.quality instanceof Array) {\n\t\t\t\t\ttheItem.value.push(theItem.badValue());\n\t\t\t\t\ttheItem.quality.push('BAD ' + theItem.qualityBuffer[thePointer]);\n\t\t\t\t} else {\n\t\t\t\t\ttheItem.value = theItem.badValue();\n\t\t\t\t\ttheItem.quality = 'BAD ' + theItem.qualityBuffer[thePointer];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If we're a string, quality is not an array.\n\t\t\t\tif (theItem.quality instanceof Array) {\n\t\t\t\t\ttheItem.quality.push('OK');\n\t\t\t\t} else {\n\t\t\t\t\ttheItem.quality = 'OK';\n\t\t\t\t}\n\t\t\t\tswitch (theItem.datatype) {\n\n\t\t\t\t\tcase \"DT\":\n\t\t\t\t\t\ttheItem.value.push(readDT(theItem.byteBuffer, thePointer, false));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"DTZ\":\n\t\t\t\t\t\ttheItem.value.push(readDT(theItem.byteBuffer, thePointer, true));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"DTL\":\n\t\t\t\t\t\ttheItem.value.push(readDTL(theItem.byteBuffer, thePointer, false));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"DTLZ\":\n\t\t\t\t\t\ttheItem.value.push(readDTL(theItem.byteBuffer, thePointer, true));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"REAL\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readFloatBE(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"LREAL\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readDoubleBE(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"LINT\":\n//\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readBigInt64BE(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"DWORD\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readUInt32BE(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"DINT\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readInt32BE(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"INT\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readInt16BE(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"WORD\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readUInt16BE(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"X\":\n\t\t\t\t\t\ttheItem.value.push(((theItem.byteBuffer.readUInt8(thePointer) >> (bitShiftAmount)) & 1) ? true : false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"B\":\n\t\t\t\t\tcase \"BYTE\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readUInt8(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"S\":\n\t\t\t\t\tcase \"STRING\":\n\t\t\t\t\t\tstrlen = theItem.byteBuffer.readUInt8(thePointer+1);\n\t\t\t\t\t\ttempString = '';\n\t\t\t\t\t\tfor (var charOffset = 2; charOffset < theItem.dtypelen && (charOffset - 2) < strlen; charOffset++) {\n\t\t\t\t\t\t\t// say strlen = 1 (one-char string) this char is at arrayIndex of 2.\n\t\t\t\t\t\t\t// Convert to string.\n\t\t\t\t\t\t\ttempString += String.fromCharCode(theItem.byteBuffer.readUInt8(thePointer+charOffset));\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttheItem.value.push(tempString);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"C\":\n\t\t\t\t\tcase \"CHAR\":\n\t\t\t\t\t\t// Convert to string.\n\t\t\t\t\t\ttheItem.value += String.fromCharCode(theItem.byteBuffer.readUInt8(thePointer));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"TIMER\":\n\t\t\t\t\tcase \"COUNTER\":\n\t\t\t\t\t\ttheItem.value.push(theItem.byteBuffer.readInt16BE(thePointer));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutputLog(\"Unknown data type in response - should never happen.  Should have been caught earlier.  \" + theItem.datatype);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (theItem.datatype == 'X') {\n\t\t\t\t// For bit arrays, we have to do some tricky math to get the pointer to equal the byte offset.\n\t\t\t\t// Note that we add the bit offset here for the rare case of an array starting at other than zero.  We either have to\n\t\t\t\t// drop support for this at the request level or support it here.\n\t\t\t\tbitShiftAmount++;\n\t\t\t\tif ((((arrayIndex + theItem.bitOffset + 1) % 8) === 0) || (arrayIndex == theItem.arrayLength - 1)) {\n\t\t\t\t\tthePointer += theItem.dtypelen;\n\t\t\t\t\tbitShiftAmount = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Add to the pointer every time.\n\t\t\t\tthePointer += theItem.dtypelen;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Single value.\n\t\tif (theItem.qualityBuffer[thePointer] !== 0xC0) {\n\t\t\ttheItem.value = theItem.badValue();\n\t\t\ttheItem.quality = ('BAD ' + theItem.qualityBuffer[thePointer]);\n\t\t} else {\n\t\t\ttheItem.quality = ('OK');\n\t\t\tswitch (theItem.datatype) {\n\n\t\t\t\tcase \"DT\":\n\t\t\t\t\ttheItem.value = readDT(theItem.byteBuffer, thePointer, false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DTZ\":\n\t\t\t\t\ttheItem.value = readDT(theItem.byteBuffer, thePointer, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DTL\":\n\t\t\t\t\ttheItem.value = readDTL(theItem.byteBuffer, thePointer, false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DTLZ\":\n\t\t\t\t\ttheItem.value = readDTL(theItem.byteBuffer, thePointer, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"REAL\":\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readFloatBE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"LREAL\":\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readDoubleBE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"LINT\":\n//\t\t\t\t\ttheItem.value = theItem.byteBuffer.readBigInt64BE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DWORD\":\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readUInt32BE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DINT\":\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readInt32BE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"INT\":\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readInt16BE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"WORD\":\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readUInt16BE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"X\":\n\t\t\t\t\ttheItem.value = (((theItem.byteBuffer.readUInt8(thePointer) >> (theItem.bitOffset)) & 1) ? true : false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"B\":\n\t\t\t\tcase \"BYTE\":\n\t\t\t\t\t// No support as of yet for signed 8 bit.  This isn't that common in Siemens.\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readUInt8(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"S\":\n\t\t\t\tcase \"STRING\":\n\t\t\t\t\tstrlen = theItem.byteBuffer.readUInt8(thePointer+1);\n\t\t\t\t\ttheItem.value = '';\n\t\t\t\t\tfor (var charOffset = 2; charOffset < theItem.dtypelen && (charOffset - 2) < strlen; charOffset++) {\n\t\t\t\t\t\t// say strlen = 1 (one-char string) this char is at arrayIndex of 2.\n\t\t\t\t\t\t// Convert to string.\n\t\t\t\t\t\ttheItem.value += String.fromCharCode(theItem.byteBuffer.readUInt8(thePointer+charOffset));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"C\":\n\t\t\t\tcase \"CHAR\":\n\t\t\t\t\t// No support as of yet for signed 8 bit.  This isn't that common in Siemens.\n\t\t\t\t\ttheItem.value = String.fromCharCode(theItem.byteBuffer.readUInt8(thePointer));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"TIMER\":\n\t\t\t\tcase \"COUNTER\":\n\t\t\t\t\ttheItem.value = theItem.byteBuffer.readInt16BE(thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\toutputLog(\"Unknown data type in response - should never happen.  Should have been caught earlier.  \" + theItem.datatype);\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tthePointer += theItem.dtypelen;\n\t}\n\n\tif (((thePointer) % 2)) { // Odd number.  With the S7 protocol we only request an even number of bytes.  So there will be a filler byte.\n\t\tthePointer += 1;\n\t}\n\n\t//\toutputLog(\"We have an item value of \" + theItem.value + \" for \" + theItem.addr + \" and pointer of \" + thePointer);\n\treturn thePointer; // Should maybe return a value now???\n}\n\nfunction getWriteBuffer(theItem) {\n\tvar newBuffer;\n\n\t// NOTE: It seems that when writing, the data that is sent must have a \"fill byte\" so that data length is even only for all\n\t//  but the last request.  The last request must have no padding.  So we DO NOT add the padding here anymore.\n\n\tif (theItem.datatype === 'X' && theItem.arrayLength === 1) {\n\t\tnewBuffer = Buffer.alloc(2 + 3); // Changed from 2 + 4 to 2 + 3 as padding was moved out of this function\n\t\t// Initialize, especially be sure to get last bit which may be a fill bit.\n\t\tnewBuffer.fill(0);\n\t\tnewBuffer.writeUInt16BE(1, 2); // Might need to do something different for different trans codes\n\t} else {\n\t\tnewBuffer = Buffer.alloc(theItem.byteLength + 4); // Changed from 2 + 4 to 2 + 3 as padding was moved out of this function\n\t\tnewBuffer.fill(0);\n\t\tnewBuffer.writeUInt16BE(theItem.byteLength * 8, 2); // Might need to do something different for different trans codes\n\t}\n\n\tif (theItem.writeBuffer.length < theItem.byteLengthWithFill) {\n\t\toutputLog(\"Attempted to access part of the write buffer that wasn't there when writing an item.\");\n\t}\n\n\tnewBuffer[0] = 0;\n\tnewBuffer[1] = theItem.writeTransportCode;\n\n\ttheItem.writeBuffer.copy(newBuffer, 4, 0, theItem.byteLength);  // Not with fill.  It might not be that long.\n\n\treturn newBuffer;\n}\n\nfunction bufferizeS7Item(theItem) {\n\tvar thePointer, theByte;\n\ttheByte = 0;\n\tthePointer = 0; // After length and header\n\n\tif (theItem.arrayLength > 1) {\n\t\t// Array value.\n\t\tvar bitShiftAmount = theItem.bitOffset;\n\t\tfor (var arrayIndex = 0; arrayIndex < theItem.arrayLength; arrayIndex++) {\n\t\t\tswitch (theItem.datatype) {\n\t\t\t\tcase \"DT\":\n\t\t\t\t\twriteDT(theItem.writeValue[arrayIndex], theItem.writeBuffer, thePointer, false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DTZ\":\n\t\t\t\t\twriteDT(theItem.writeValue[arrayIndex], theItem.writeBuffer, thePointer, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DTL\":\n\t\t\t\t\twriteDTL(theItem.writeValue[arrayIndex], theItem.writeBuffer, thePointer, false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DTLZ\":\n\t\t\t\t\twriteDTL(theItem.writeValue[arrayIndex], theItem.writeBuffer, thePointer, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"REAL\":\n\t\t\t\t\ttheItem.writeBuffer.writeFloatBE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"LREAL\":\n\t\t\t\t\ttheItem.writeBuffer.writeDoubleBE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"LINT\":\n//\t\t\t\t\ttheItem.writeBuffer.writeBigInt64BE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DWORD\":\n\t\t\t\t\ttheItem.writeBuffer.writeInt32BE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DINT\":\n\t\t\t\t\ttheItem.writeBuffer.writeInt32BE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"INT\":\n\t\t\t\t\ttheItem.writeBuffer.writeInt16BE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"WORD\":\n\t\t\t\t\ttheItem.writeBuffer.writeUInt16BE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"X\":\n\t\t\t\t\ttheByte = theByte | (((theItem.writeValue[arrayIndex] === true) ? 1 : 0) << bitShiftAmount);\n\t\t\t\t\t// Maybe not so efficient to do this every time when we only need to do it every 8.  Need to be careful with optimizations here for odd requests.\n\t\t\t\t\ttheItem.writeBuffer.writeUInt8(theByte, thePointer);\n\t\t\t\t\tbitShiftAmount++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"B\":\n\t\t\t\tcase \"BYTE\":\n\t\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"C\":\n\t\t\t\tcase \"CHAR\":\n\t\t\t\t\t// Convert to string.\n\t\t\t\t\t//??\t\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.writeValue.toCharCode(), thePointer);\n\t\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.writeValue.charCodeAt(arrayIndex), thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"S\":\n\t\t\t\tcase \"STRING\":\n\t\t\t\t\t// Convert to bytes.\n\t\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.dtypelen - 2, thePointer); // Array length is requested val, -2 is string length\n\t\t\t\t\ttheItem.writeBuffer.writeUInt8(Math.min(theItem.dtypelen - 2, theItem.writeValue[arrayIndex].length), thePointer+1); // Array length is requested val, -2 is string length\n\t\t\t\t\tfor (var charOffset = 2; charOffset < theItem.dtypelen; charOffset++) {\n\t\t\t\t\t\tif (charOffset < (theItem.writeValue[arrayIndex].length + 2)) {\n\t\t\t\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.writeValue[arrayIndex].charCodeAt(charOffset-2), thePointer+charOffset);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttheItem.writeBuffer.writeUInt8(32, thePointer+charOffset); // write space\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"TIMER\":\n\t\t\t\tcase \"COUNTER\":\n\t\t\t\t\t// I didn't think we supported arrays of timers and counters.\n\t\t\t\t\ttheItem.writeBuffer.writeInt16BE(theItem.writeValue[arrayIndex], thePointer);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\toutputLog(\"Unknown data type when preparing array write packet - should never happen.  Should have been caught earlier.  \" + theItem.datatype);\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (theItem.datatype == 'X') {\n\t\t\t\t// For bit arrays, we have to do some tricky math to get the pointer to equal the byte offset.\n\t\t\t\t// Note that we add the bit offset here for the rare case of an array starting at other than zero.  We either have to\n\t\t\t\t// drop support for this at the request level or support it here.\n\t\t\t\tif ((((arrayIndex + theItem.bitOffset + 1) % 8) === 0) || (arrayIndex == theItem.arrayLength - 1)) {\n\t\t\t\t\tthePointer += theItem.dtypelen;\n\t\t\t\t\tbitShiftAmount = 0;\n\t\t\t\t\t// Zero this now.  Otherwise it will have the same value next byte if non-zero.\n\t\t\t\t\ttheByte = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Add to the pointer every time.\n\t\t\t\tthePointer += theItem.dtypelen;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Single value.\n\t\tswitch (theItem.datatype) {\n\n\t\t\tcase \"DT\":\n\t\t\t\twriteDT(theItem.writeValue, theItem.writeBuffer, thePointer, false);\n\t\t\t\tbreak;\n\t\t\tcase \"DTZ\":\n\t\t\t\twriteDT(theItem.writeValue, theItem.writeBuffer, thePointer, true);\n\t\t\t\tbreak;\n\t\t\tcase \"DTL\":\n\t\t\t\twriteDTL(theItem.writeValue, theItem.writeBuffer, thePointer, false);\n\t\t\t\tbreak;\n\t\t\tcase \"DTLZ\":\n\t\t\t\twriteDTL(theItem.writeValue, theItem.writeBuffer, thePointer, true);\n\t\t\t\tbreak;\n\t\t\tcase \"REAL\":\n\t\t\t\ttheItem.writeBuffer.writeFloatBE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"LREAL\":\n\t\t\t\ttheItem.writeBuffer.writeDoubleBE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"LINT\":\n//\t\t\t\ttheItem.writeBuffer.writeBigInt64BE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"DWORD\":\n\t\t\t\ttheItem.writeBuffer.writeUInt32BE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"DINT\":\n\t\t\t\ttheItem.writeBuffer.writeInt32BE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"INT\":\n\t\t\t\ttheItem.writeBuffer.writeInt16BE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"WORD\":\n\t\t\t\ttheItem.writeBuffer.writeUInt16BE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"X\":\n\t\t\t\ttheItem.writeBuffer.writeUInt8(((theItem.writeValue === true) ? 1 : 0), thePointer);\n\t\t\t\t// not here\t\t\t\ttheItem.writeBuffer[1] = 1; // Set transport code to \"BIT\" to write a single bit.\n\t\t\t\t// not here\t\t\t\ttheItem.writeBuffer.writeUInt16BE(1, 2); // Write only one bit.\n\t\t\t\tbreak;\n\t\t\tcase \"B\":\n\t\t\tcase \"BYTE\":\n\t\t\t\t// No support as of yet for signed 8 bit.  This isn't that common in Siemens.\n\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"C\":\n\t\t\tcase \"CHAR\":\n\t\t\t\t// No support as of yet for signed 8 bit.  This isn't that common in Siemens.\n\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.writeValue.charCodeAt(0), thePointer);\n\t\t\t\tbreak;\n\t\t\tcase \"S\":\n\t\t\tcase \"STRING\":\n\t\t\t\t// Convert to bytes.\n\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.dtypelen - 2, thePointer); // Array length is requested val, -2 is string length\n\t\t\t\ttheItem.writeBuffer.writeUInt8(Math.min(theItem.dtypelen - 2, theItem.writeValue.length), thePointer+1); // Array length is requested val, -2 is string length\n\n\t\t\t\tfor (var charOffset = 2; charOffset < theItem.dtypelen; charOffset++) {\n\t\t\t\t\tif (charOffset < (theItem.writeValue.length + 2)) {\n\t\t\t\t\t\ttheItem.writeBuffer.writeUInt8(theItem.writeValue.charCodeAt(charOffset-2), thePointer+charOffset);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttheItem.writeBuffer.writeUInt8(32, thePointer+charOffset); // write space\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"TIMER\":\n\t\t\tcase \"COUNTER\":\n\t\t\t\ttheItem.writeBuffer.writeInt16BE(theItem.writeValue, thePointer);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\toutputLog(\"Unknown data type in write prepare - should never happen.  Should have been caught earlier.  \" + theItem.datatype);\n\t\t\t\treturn 0;\n\t\t}\n\t\tthePointer += theItem.dtypelen;\n\t}\n\treturn undefined;\n}\n\nfunction stringToS7Addr(addr, useraddr, cParam) {\n\t\"use strict\";\n\tvar theItem, splitString, splitString2;\n\n\tif (useraddr === '_COMMERR') { return undefined; } // Special-case for communication error status - this variable returns true when there is a communications error\n\n\ttheItem = new S7Item();\n\tsplitString = addr.split(',');\n\tif (splitString.length === 0 || splitString.length > 2) {\n\t\toutputLog(\"Error - String Couldn't Split Properly.\");\n\t\treturn undefined;\n\t}\n\n\tif (splitString.length > 1) { // Must be DB type\n\t\ttheItem.addrtype = 'DB';  // Hard code\n\t\tsplitString2 = splitString[1].split('.');\n\t\ttheItem.datatype = splitString2[0].replace(/[0-9]/gi, '').toUpperCase(); // Clear the numbers\n\t\tif (theItem.datatype === 'X' && splitString2.length === 3) {\n\t\t\ttheItem.arrayLength = parseInt(splitString2[2], 10);\n\t\t} else if ((theItem.datatype === 'S' || theItem.datatype === 'STRING') && splitString2.length === 3) {\n\t\t\ttheItem.dtypelen = parseInt(splitString2[1], 10) + 2; // With strings, add 2 to the length due to S7 header\n\t\t\ttheItem.arrayLength = parseInt(splitString2[2], 10);  // For strings, array length is now the number of strings\n\t\t} else if ((theItem.datatype === 'S' || theItem.datatype === 'STRING') && splitString2.length === 2) {\n\t\t\ttheItem.dtypelen = parseInt(splitString2[1], 10) + 2; // With strings, add 2 to the length due to S7 header\n\t\t\ttheItem.arrayLength = 1;\n\t\t} else if (theItem.datatype !== 'X' && splitString2.length === 2) {\n\t\t\ttheItem.arrayLength = parseInt(splitString2[1], 10);\n\t\t} else {\n\t\t\ttheItem.arrayLength = 1;\n\t\t}\n\t\tif (theItem.arrayLength <= 0) {\n\t\t\toutputLog('Zero length arrays not allowed, returning undefined');\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Get the data block number from the first part.\n\t\ttheItem.dbNumber = parseInt(splitString[0].replace(/[A-z]/gi, ''), 10);\n\n\t\t// Get the data block byte offset from the second part, eliminating characters.\n\t\t// Note that at this point, we may miss some info, like a \"T\" at the end indicating TIME data type or DATE data type or DT data type.  We ignore these.\n\t\t// This is on the TODO list.\n\t\ttheItem.offset = parseInt(splitString2[0].replace(/[A-z]/gi, ''), 10);  // Get rid of characters\n\n\t\t// Get the bit offset\n\t\tif (splitString2.length > 1 && theItem.datatype === 'X') {\n\t\t\ttheItem.bitOffset = parseInt(splitString2[1], 10);\n\t\t\tif (theItem.bitOffset > 7) {\n\t\t\t\toutputLog(\"Invalid bit offset specified for address \" + addr);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t} else { // Must not be DB.  We know there's no comma.\n\t\tsplitString2 = addr.split('.');\n\n\t\tswitch (splitString2[0].replace(/[0-9]/gi, '')) {\n\t\t\t/* We do have the memory areas:\n\t\t\t  \"input\", \"peripheral input\", \"output\", \"peripheral output\", \",marker\", \"counter\" and \"timer\" as I, PI, Q, PQ, M, C and T.\n\t\t\t   Datablocks are handles somewere else.\n\t\t\t   We do have the data types:\n\t\t\t   \"bit\", \"byte\", \"char\", \"word\", \"int16\", \"dword\", \"int32\", \"real\" as X, B, C, W, I, DW, DI and R\n\t\t\t   What about \"uint16\", \"uint32\"\n\t\t\t*/\n\n/* All styles of peripheral IOs (no bit access allowed) */\n\t\t\tcase \"PIB\":\n\t\t\tcase \"PEB\":\n\t\t\tcase \"PQB\":\n\t\t\tcase \"PAB\":\n\t\t\t\ttheItem.addrtype = \"P\";\n\t\t\t\ttheItem.datatype = \"BYTE\";\n\t\t\t\tbreak;\n\t\t\tcase \"PIC\":\n\t\t\tcase \"PEC\":\n\t\t\tcase \"PQC\":\n\t\t\tcase \"PAC\":\n\t\t\t\ttheItem.addrtype = \"P\";\n\t\t\t\ttheItem.datatype = \"CHAR\";\n\t\t\t\tbreak;\n\t\t\tcase \"PIW\":\n\t\t\tcase \"PEW\":\n\t\t\tcase \"PQW\":\n\t\t\tcase \"PAW\":\n\t\t\t\ttheItem.addrtype = \"P\";\n\t\t\t\ttheItem.datatype = \"WORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"PII\":\n\t\t\tcase \"PEI\":\n\t\t\tcase \"PQI\":\n\t\t\tcase \"PAI\":\n\t\t\t\ttheItem.addrtype = \"P\";\n\t\t\t\ttheItem.datatype = \"INT\";\n\t\t\t\tbreak;\n\t\t\tcase \"PID\":\n\t\t\tcase \"PED\":\n\t\t\tcase \"PQD\":\n\t\t\tcase \"PAD\":\n\t\t\t\ttheItem.addrtype = \"P\";\n\t\t\t\ttheItem.datatype = \"DWORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"PIDI\":\n\t\t\tcase \"PEDI\":\n\t\t\tcase \"PQDI\":\n\t\t\tcase \"PADI\":\n\t\t\t\ttheItem.addrtype = \"P\";\n\t\t\t\ttheItem.datatype = \"DINT\";\n\t\t\t\tbreak;\n\t\t\tcase \"PIR\":\n\t\t\tcase \"PER\":\n\t\t\tcase \"PQR\":\n\t\t\tcase \"PAR\":\n\t\t\t\ttheItem.addrtype = \"P\";\n\t\t\t\ttheItem.datatype = \"REAL\";\n\t\t\t\tbreak;\n\n/* All styles of standard inputs (in oposit to peripheral inputs) */\n\t\t\tcase \"I\":\n\t\t\tcase \"E\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"X\";\n\t\t\t\tbreak;\n\t\t\tcase \"IB\":\n\t\t\tcase \"EB\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"BYTE\";\n\t\t\t\tbreak;\n\t\t\tcase \"IC\":\n\t\t\tcase \"EC\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"CHAR\";\n\t\t\t\tbreak;\n\t\t\tcase \"IW\":\n\t\t\tcase \"EW\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"WORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"II\":\n\t\t\tcase \"EI\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"INT\";\n\t\t\t\tbreak;\n\t\t\tcase \"ID\":\n\t\t\tcase \"ED\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"DWORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"IDI\":\n\t\t\tcase \"EDI\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"DINT\";\n\t\t\t\tbreak;\n\t\t\tcase \"IR\":\n\t\t\tcase \"ER\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"REAL\";\n\t\t\t\tbreak;\n\t\t\tcase \"ILR\":\n\t\t\tcase \"ELR\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"LREAL\";\n\t\t\t\tbreak;\n\t\t\tcase \"ILI\":\n\t\t\tcase \"ELI\":\n\t\t\t\ttheItem.addrtype = \"I\";\n\t\t\t\ttheItem.datatype = \"LINT\";\n\t\t\t\tbreak;\n/* All styles of standard outputs (in oposit to peripheral outputs) */\n\t\t\tcase \"Q\":\n\t\t\tcase \"A\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"X\";\n\t\t\t\tbreak;\n\t\t\tcase \"QB\":\n\t\t\tcase \"AB\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"BYTE\";\n\t\t\t\tbreak;\n\t\t\tcase \"QC\":\n\t\t\tcase \"AC\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"CHAR\";\n\t\t\t\tbreak;\n\t\t\tcase \"QW\":\n\t\t\tcase \"AW\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"WORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"QI\":\n\t\t\tcase \"AI\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"INT\";\n\t\t\t\tbreak;\n\t\t\tcase \"QD\":\n\t\t\tcase \"AD\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"DWORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"QDI\":\n\t\t\tcase \"ADI\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"DINT\";\n\t\t\t\tbreak;\n\t\t\tcase \"QR\":\n\t\t\tcase \"AR\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"REAL\";\n\t\t\t\tbreak;\n\t\t\tcase \"QLR\":\n\t\t\tcase \"ALR\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"LREAL\";\n\t\t\t\tbreak;\n\t\t\tcase \"QLI\":\n\t\t\tcase \"ALI\":\n\t\t\t\ttheItem.addrtype = \"Q\";\n\t\t\t\ttheItem.datatype = \"LINT\";\n\t\t\t\tbreak;\n/* All styles of marker */\n\t\t\tcase \"M\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"X\";\n\t\t\t\tbreak;\n\t\t\tcase \"MB\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"BYTE\";\n\t\t\t\tbreak;\n\t\t\tcase \"MC\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"CHAR\";\n\t\t\t\tbreak;\n\t\t\tcase \"MW\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"WORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"MI\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"INT\";\n\t\t\t\tbreak;\n\t\t\tcase \"MD\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"DWORD\";\n\t\t\t\tbreak;\n\t\t\tcase \"MDI\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"DINT\";\n\t\t\t\tbreak;\n\t\t\tcase \"MR\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"REAL\";\n\t\t\t\tbreak;\n\t\t\tcase \"MLR\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"LREAL\";\n\t\t\t\tbreak;\n\t\t\tcase \"MLI\":\n\t\t\t\ttheItem.addrtype = \"M\";\n\t\t\t\ttheItem.datatype = \"LINT\";\n\t\t\t\tbreak;\n/* Timer */\n\t\t\tcase \"T\":\n\t\t\t\ttheItem.addrtype = \"T\";\n\t\t\t\ttheItem.datatype = \"TIMER\";\n\t\t\t\tbreak;\n\n/* Counter */\n\t\t\tcase \"C\":\n\t\t\t\ttheItem.addrtype = \"C\";\n\t\t\t\ttheItem.datatype = \"COUNTER\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\toutputLog('Failed to find a match for ' + splitString2[0]);\n\t\t\t\treturn undefined;\n\t\t}\n\n\t\ttheItem.bitOffset = 0;\n\t\tif (splitString2.length > 1 && theItem.datatype === 'X') { // Bit and bit array\n\t\t\ttheItem.bitOffset = parseInt(splitString2[1].replace(/[A-z]/gi, ''), 10);\n\t\t\tif (splitString2.length > 2) {  // Bit array only\n\t\t\t\ttheItem.arrayLength = parseInt(splitString2[2].replace(/[A-z]/gi, ''), 10);\n\t\t\t} else {\n\t\t\t\ttheItem.arrayLength = 1;\n\t\t\t}\n\t\t} else if (splitString2.length > 1 && theItem.datatype !== 'X') { // Bit and bit array\n\t\t\ttheItem.arrayLength = parseInt(splitString2[1].replace(/[A-z]/gi, ''), 10);\n\t\t} else {\n\t\t\ttheItem.arrayLength = 1;\n\t\t}\n\t\ttheItem.dbNumber = 0;\n\t\ttheItem.offset = parseInt(splitString2[0].replace(/[A-z]/gi, ''), 10);\n\t}\n\n\tif (theItem.datatype === 'DI') {\n\t\ttheItem.datatype = 'DINT';\n\t}\n\tif (theItem.datatype === 'I') {\n\t\ttheItem.datatype = 'INT';\n\t}\n\tif (theItem.datatype === 'DW' || theItem.datatype === 'DWT') {\n\t\ttheItem.datatype = 'DWORD';\n\t}\n\tif (theItem.datatype === 'WDT') {\n\t\tif (cParam.wdtAsUTC) {\n\t\t\ttheItem.datatype = 'DTZ';\n\t\t} else {\n\t\t\ttheItem.datatype = 'DT';\n\t\t}\n\t}\n\tif (theItem.datatype === 'W') {\n\t\ttheItem.datatype = 'WORD';\n\t}\n\tif (theItem.datatype === 'R') {\n\t\ttheItem.datatype = 'REAL';\n\t}\n\tif (theItem.datatype === 'LR') {\n\t\ttheItem.datatype = 'LREAL';\n\t}\n\tif (theItem.datatype === 'LI') {\n\t\ttheItem.datatype = 'LINT';\n\t}\n\tswitch (theItem.datatype) {\n\t\tcase \"DTL\":\n\t\tcase \"DTLZ\":\n\t\t\ttheItem.dtypelen = 12;\n\t\t\tbreak;\n\t\tcase \"LREAL\":\n\t\tcase \"LINT\":\n\t\tcase \"DT\":\n\t\tcase \"DTZ\":\n\t\t\ttheItem.dtypelen = 8;\n\t\t\tbreak;\n\t\tcase \"REAL\":\n\t\tcase \"DWORD\":\n\t\tcase \"DINT\":\n\t\t\ttheItem.dtypelen = 4;\n\t\t\tbreak;\n\t\tcase \"INT\":\n\t\tcase \"WORD\":\n\t\tcase \"TIMER\":\n\t\tcase \"COUNTER\":\n\t\t\ttheItem.dtypelen = 2;\n\t\t\tbreak;\n\t\tcase \"X\":\n\t\tcase \"B\":\n\t\tcase \"C\":\n\t\tcase \"BYTE\":\n\t\tcase \"CHAR\":\n\t\t\ttheItem.dtypelen = 1;\n\t\t\tbreak;\n\t\tcase \"S\":\n\t\tcase \"STRING\":\n\t\t\t// For strings, arrayLength and dtypelen were assigned during parsing.\n\t\t\tbreak;\n\t\tdefault:\n\t\t\toutputLog(\"Unknown data type \" + theItem.datatype);\n\t\t\treturn undefined;\n\t}\n\n\t// Default\n\ttheItem.readTransportCode = 0x04;\n\n\tswitch (theItem.addrtype) {\n\t\tcase \"DB\":\n\t\tcase \"DI\":\n\t\t\ttheItem.areaS7Code = 0x84;\n\t\t\tbreak;\n\t\tcase \"I\":\n\t\tcase \"E\":\n\t\t\ttheItem.areaS7Code = 0x81;\n\t\t\tbreak;\n\t\tcase \"Q\":\n\t\tcase \"A\":\n\t\t\ttheItem.areaS7Code = 0x82;\n\t\t\tbreak;\n\t\tcase \"M\":\n\t\t\ttheItem.areaS7Code = 0x83;\n\t\t\tbreak;\n\t\tcase \"P\":\n\t\t\ttheItem.areaS7Code = 0x80;\n\t\t\tbreak;\n\t\tcase \"C\":\n\t\t\ttheItem.areaS7Code = 0x1c;\n\t\t\ttheItem.readTransportCode = 0x09;\n\t\t\tbreak;\n\t\tcase \"T\":\n\t\t\ttheItem.areaS7Code = 0x1d;\n\t\t\ttheItem.readTransportCode = 0x09;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\toutputLog(\"Unknown memory area entered - \" + theItem.addrtype);\n\t\t\treturn undefined;\n\t}\n\n\tif (theItem.datatype === 'X' && theItem.arrayLength === 1) {\n\t\ttheItem.writeTransportCode = 0x03;\n\t} else {\n\t\ttheItem.writeTransportCode = theItem.readTransportCode;\n\t}\n\n\t// Save the address from the argument for later use and reference\n\ttheItem.addr = addr;\n\tif (useraddr === undefined) {\n\t\ttheItem.useraddr = addr;\n\t} else {\n\t\ttheItem.useraddr = useraddr;\n\t}\n\n\tif (theItem.datatype === 'X') {\n\t\ttheItem.byteLength = Math.ceil((theItem.bitOffset + theItem.arrayLength) / 8);\n\t} else {\n\t\ttheItem.byteLength = theItem.arrayLength * theItem.dtypelen;\n\t}\n\n\t//\toutputLog(' Arr lenght is ' + theItem.arrayLength + ' and DTL is ' + theItem.dtypelen);\n\n\ttheItem.byteLengthWithFill = theItem.byteLength;\n\tif (theItem.byteLengthWithFill % 2) { theItem.byteLengthWithFill += 1; }  // S7 will add a filler byte.  Use this expected reply length for PDU calculations.\n\n\treturn theItem;\n}\n\nfunction S7Packet() {\n\tthis.seqNum = undefined;\t\t\t\t// Made-up sequence number to watch for.\n\tthis.itemList = undefined;  \t\t\t// This will be assigned the object that details what was in the request.\n\tthis.reqTime = undefined;\n\tthis.sent = false;\t\t\t\t\t\t// Have we sent the packet yet?\n\tthis.rcvd = false;\t\t\t\t\t\t// Are we waiting on a reply?\n\tthis.timeoutError = undefined;\t\t\t// The packet is marked with error on timeout so we don't then later switch to good data.\n\tthis.timeout = undefined;\t\t\t\t// The timeout for use with clearTimeout()\n}\n\nfunction S7Item() { // Object\n\t// Save the original address\n\tthis.addr = undefined;\n\tthis.useraddr = undefined;\n\n\t// First group is properties to do with S7 - these alone define the address.\n\tthis.addrtype = undefined;\n\tthis.datatype = undefined;\n\tthis.dbNumber = undefined;\n\tthis.bitOffset = undefined;\n\tthis.offset = undefined;\n\tthis.arrayLength = undefined;\n\n\t// These next properties can be calculated from the above properties, and may be converted to functions.\n\tthis.dtypelen = undefined;\n\tthis.areaS7Code = undefined;\n\tthis.byteLength = undefined;\n\tthis.byteLengthWithFill = undefined;\n\n\t// Note that read transport codes and write transport codes will be the same except for bits which are read as bytes but written as bits\n\tthis.readTransportCode = undefined;\n\tthis.writeTransportCode = undefined;\n\n\t// This is where the data can go that arrives in the packet, before calculating the value.\n\tthis.byteBuffer = Buffer.alloc(8192);\n\tthis.writeBuffer = Buffer.alloc(8192);\n\n\t// We use the \"quality buffer\" to keep track of whether or not the requests were successful.\n\t// Otherwise, it is too easy to lose track of arrays that may only be partially complete.\n\tthis.qualityBuffer = Buffer.alloc(8192);\n\tthis.writeQualityBuffer = Buffer.alloc(8192);\n\n\t// Then we have item properties\n\tthis.value = undefined;\n\tthis.writeValue = undefined;\n\tthis.valid = false;\n\tthis.errCode = undefined;\n\n\t// Then we have result properties\n\tthis.part = undefined;\n\tthis.maxPart = undefined;\n\n\t// Block properties\n\tthis.isOptimized = false;\n\tthis.resultReference = undefined;\n\tthis.itemReference = undefined;\n\n\t// And functions...\n\tthis.clone = function() {\n\t\tvar newObj = new S7Item();\n\t\tfor (var i in this) {\n\t\t\tif (i == 'clone') continue;\n\t\t\tnewObj[i] = this[i];\n\t\t} return newObj;\n\t};\n\n\tthis.badValue = function() {\n\t\tswitch (this.datatype) {\n\t\t\tcase \"DT\":\n\t\t\tcase \"DTZ\":\n\t\t\tcase \"DTL\":\n\t\t\tcase \"DTLZ\":\n\t\t\t\treturn new Date(NaN);\n\t\t\tcase \"REAL\":\n\t\t\tcase \"LREAL\":\n\t\t\t\treturn 0.0;\n\t\t\tcase \"DWORD\":\n\t\t\tcase \"DINT\":\n\t\t\tcase \"INT\":\n\t\t\tcase \"LINT\":\n\t\t\tcase \"WORD\":\n\t\t\tcase \"B\":\n\t\t\tcase \"BYTE\":\n\t\t\tcase \"TIMER\":\n\t\t\tcase \"COUNTER\":\n\t\t\t\treturn 0;\n\t\t\tcase \"X\":\n\t\t\t\treturn false;\n\t\t\tcase \"C\":\n\t\t\tcase \"CHAR\":\n\t\t\tcase \"S\":\n\t\t\tcase \"STRING\":\n\t\t\t\t// Convert to string.\n\t\t\t\treturn \"\";\n\t\t\tdefault:\n\t\t\t\toutputLog(\"Unknown data type when figuring out bad value - should never happen.  Should have been caught earlier.  \" + this.datatype);\n\t\t\t\treturn 0;\n\t\t}\n\t};\n}\n\nfunction itemListSorter(a, b) {\n\t// Feel free to manipulate these next two lines...\n\tif (a.areaS7Code < b.areaS7Code) { return -1; }\n\tif (a.areaS7Code > b.areaS7Code) { return 1; }\n\n\t// Group first the items of the same DB\n\tif (a.addrtype === 'DB') {\n\t\tif (a.dbNumber < b.dbNumber) { return -1; }\n\t\tif (a.dbNumber > b.dbNumber) { return 1; }\n\t}\n\n\t// But for byte offset we need to start at 0.\n\tif (a.offset < b.offset) { return -1; }\n\tif (a.offset > b.offset) { return 1; }\n\n\t// Then bit offset\n\tif (a.bitOffset < b.bitOffset) { return -1; }\n\tif (a.bitOffset > b.bitOffset) { return 1; }\n\n\t// Then item length - most first.  This way smaller items are optimized into bigger ones if they have the same starting value.\n\tif (a.byteLength > b.byteLength) { return -1; }\n\tif (a.byteLength < b.byteLength) { return 1; }\n}\n\nfunction doNothing(arg) {\n\treturn arg;\n}\n\nfunction isQualityOK(obj) {\n\tif (typeof obj === \"string\") {\n\t\tif (obj !== 'OK') { return false; }\n\t} else if (Array.isArray(obj)) {\n\t\tfor (var i = 0; i < obj.length; i++) {\n\t\t\tif (typeof obj[i] !== \"string\" || obj[i] !== 'OK') { return false; }\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction outputLog(txt, debugLevel, id) {\n\tif (silentMode) return;\n\n\tvar idtext;\n\tif (typeof (id) === 'undefined') {\n\t\tidtext = '';\n\t} else {\n\t\tidtext = ' ' + id;\n\t}\n\tif (typeof (debugLevel) === 'undefined' || effectiveDebugLevel >= debugLevel) {\n\t\t// console.log('[' + process.hrtime() + idtext + '] ' + util.format(txt));\n\t}\n}\n","const fs = require('fs')\r\n// const ObjectsToCsv = require('objects-to-csv');\r\nvar Variable = require('./Variable')\r\nvar VariableSystem = require('./VariableSystem.js');\r\nconst {\r\n    DataType\r\n} = require(\"node-opcua\");\r\nconst { node } = require('webpack');\r\n\r\nfunction saveLogData(data) {\r\n    try {\r\n        VariableSystem.LocalDB.serialize(() => {\r\n            let tempText = ''\r\n            tempText = tempText + '_id text,'\r\n            tempText = tempText + 'currentTime datetime,'\r\n            tempText = tempText + 'parent text,'\r\n            tempText = tempText + 'idDevice text,'\r\n            tempText = tempText + 'typeObject text,'\r\n            tempText = tempText + 'tag text,'\r\n            tempText = tempText + 'previousValue text,'\r\n            tempText = tempText + 'newValue text,'\r\n            tempText = tempText + 'action text,'\r\n            tempText = tempText + 'nameObject text,'\r\n            tempText = tempText + 'user text,'\r\n\r\n            let newTempText = tempText.substring(0, tempText.length - 1);\r\n            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS LogData(' + newTempText + ')', (err) => {\r\n                if (err) {\r\n                    response.json({\r\n                        result: \"error\",\r\n                        data: {},\r\n                        message: err\r\n                    });\r\n                } else {\r\n                    let command = `INSERT INTO LogData(_id,currentTime,parent,idDevice,typeObject,tag,previousValue,newValue,action,nameObject,user)VALUES(\r\n                    '${'a' + Math.random().toString(36)}',\r\n                    '${Date.now()}',\r\n                    '${data.parent ? data.parent : '___'}',\r\n                    '${data.idDevice ? data.idDevice : ''}',\r\n                    '${data.typeObject ? data.typeObject : ''}',\r\n                    '${data.tag ? data.tag : 0}',\r\n                    '${data.previousValue ? data.previousValue : ''}',\r\n                    '${data.newValue ? data.newValue : ''}',\r\n                    '${data.action ? data.action : ''}',\r\n                    '${data.nameObject ? data.nameObject : ''}',\r\n                    '${data.user ? data.user : ''}'\r\n                    )`\r\n                    VariableSystem.LocalDB.run(command, (err) => {\r\n                        if (err) {\r\n                            console.log(err);\r\n                            throw err;\r\n                        } else {\r\n                            Variable.refreshLogData = true;\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nfunction saveAlarmData(data) {\r\n    try {\r\n        VariableSystem.LocalDB.serialize(() => {\r\n            let tempText = ''\r\n            tempText = tempText + '_id text,'\r\n            tempText = tempText + 'currentTime datetime,'\r\n            tempText = tempText + 'parent text,'\r\n            tempText = tempText + 'idDevice text,'\r\n            tempText = tempText + 'typeAlarm text,'\r\n            tempText = tempText + 'tag text,'\r\n            tempText = tempText + 'alarmText text,'\r\n            tempText = tempText + 'alarmAtOn int,'\r\n            tempText = tempText + 'alarmAtOff int,'\r\n            tempText = tempText + 'typeSnackBar text,'\r\n\r\n            let newTempText = tempText.substring(0, tempText.length - 1);\r\n            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS LogAlarmData(' + newTempText + ')', (err) => {\r\n                if (err) {\r\n                    response.json({\r\n                        result: \"error\",\r\n                        data: {},\r\n                        message: err\r\n                    });\r\n                } else {\r\n                    let command = `INSERT INTO LogAlarmData(_id,currentTime,parent,idDevice,typeAlarm,tag,alarmText,alarmAtOn,alarmAtOff,typeSnackBar)VALUES(\r\n                    '${'a' + Math.random().toString(36)}',\r\n                    '${Date.now()}',\r\n                    '${data.parent ? data.parent : '___'}',\r\n                    '${data.idDevice ? data.idDevice : ''}',\r\n                    '${data.typeAlarm ? data.typeAlarm : ''}',\r\n                    '${data.tag ? data.tag : 0}',\r\n                    '${data.alarmText ? data.alarmText : ''}',\r\n                    '${data.alarmAtOn ? data.alarmAtOn : ''}',\r\n                    '${data.alarmAtOff ? data.alarmAtOff : ''}',\r\n                    '${data.typeSnackBar ? data.typeSnackBar : ''}'\r\n                    )`\r\n                    VariableSystem.LocalDB.run(command, (err) => {\r\n                        if (err) {\r\n                            console.log(err);\r\n                            throw err;\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nfunction setLogServer(data) {\r\n    console.log(data)\r\n    Variable.logServer.push(data + '\\n')\r\n    if (Variable.logServer.length > 100) {\r\n        Variable.logServer.shift()\r\n    }\r\n}\r\nfunction isEmpty(val) {\r\n    return (val === undefined || val == null || val.length <= 0) ? true : false;\r\n}\r\nfunction ReadBitOfPLC(WordStart, LengthOfWord, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord; i++) {\r\n        var temp = Number(Values[i]);\r\n        for (var j = 0; j < 16; j++) {\r\n            Array[16 * (i - WordStart) + j] = temp & 1;\r\n            temp = temp >> 1;\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadBitOfPLCSiemens(WordStart, LengthOfWord, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord; i++) {\r\n        var temp = Number(Values[i]);\r\n        for (var j = 0; j < 16; j++) {\r\n            if (j < 8) {\r\n                Array[16 * (i - WordStart) + j + 8] = temp & 1;\r\n                temp = temp >> 1;\r\n            }\r\n            if (j >= 8) {\r\n                Array[16 * (i - WordStart) + j - 8] = temp & 1;\r\n                temp = temp >> 1;\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadWordOfPLC(Start, LengthOfWord, Values) {\r\n    var ArrayTemp = [];\r\n    if (Array.isArray(Values)) {\r\n        for (var i = Start; i < Start + LengthOfWord; i++) {\r\n            // console.log(i)\r\n            // console.log(Values[i])\r\n\r\n            if (Values[i] >= 0) {\r\n                ArrayTemp[i - Start] = (Values[i]);\r\n            } else {\r\n                ArrayTemp[i - Start] = (65536 + Values[i]);\r\n            }\r\n        }\r\n    }\r\n    return ArrayTemp;\r\n}\r\nfunction ReadWordOfPlcToByte(Start, LengthOfWord, Values) {\r\n    var byteArray = [];\r\n    for (var index = Start; index < Start + LengthOfWord; index++) {\r\n        var byte = Values[index] & 0xff;\r\n        byteArray[2 * (index - Start)] = byte;\r\n        Values[index] = (Values[index] - byte) / 256;\r\n        byteArray[2 * (index - Start) + 1] = Values[index]\r\n    }\r\n\r\n    return byteArray;\r\n}\r\nfunction StringToAscii(str) {\r\n    var code = new Array(str.length);\r\n    for (var i = 0; i < str.length; i++) {\r\n        code[i] = str.charCodeAt(i);\r\n    }\r\n    var arrOut = [], index = 0, result = 0;\r\n    for (var i = 0; i < code.length; i++) {\r\n        if (i % 2 === 0) {\r\n            result = code[i]\r\n            if (i + 1 === code.length) arrOut[index] = result;\r\n        };\r\n        if (i % 2 === 1) {\r\n            result = result + code[i] * 256;\r\n            arrOut[index] = result;\r\n            index = index + 1;\r\n        }\r\n    }\r\n    return arrOut;\r\n}\r\nfunction ReadDWordOfPLC(WordStart, LengthOfWord1, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord1 * 2; i++) {\r\n        if ((i - WordStart) % 2 == 1) {\r\n\r\n            // if((i - WordStart)==1){\r\n            //     console.log('Bit Thap '+ Values[i - 1])\r\n            //     console.log('Bit Cao '+ Values[i])\r\n            // }\r\n\r\n            if (Values[i] < 0) {\r\n                Values[i] = Values[i] + 65536;\r\n            }\r\n            if (Values[i - 1] < 0) {\r\n                Values[i - 1] = Values[i - 1] + 65536;\r\n            }\r\n\r\n            // if((i - WordStart)==1){\r\n            //     console.log('Bit Thap after '+ Values[i - 1])\r\n            //     console.log('Bit Cao after '+ Values[i])\r\n            // }\r\n\r\n            Array[(i - WordStart - 1) / 2] = (Values[i] * 65536 + Values[i - 1]);\r\n            if (Array[(i - WordStart - 1) / 2] < 0) {\r\n                Array[(i - WordStart - 1) / 2] = Array[(i - WordStart - 1) / 2] + 65536;\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadReal2OfPLC(WordStart, LengthOfWord1, Values) {\r\n    var Array = [];\r\n\r\n    if (LengthOfWord1) {\r\n        for (var i = WordStart; i < WordStart + LengthOfWord1 * 2; i++) {\r\n            if ((i - WordStart) % 2 == 1) {\r\n                let buf = new ArrayBuffer(4);\r\n                let ints = new Uint16Array(buf);\r\n                ints[0] = Values[i - 1];\r\n                ints[1] = Values[i];\r\n                var floats = new Float32Array(buf);\r\n                Array[(i - WordStart - 1) / 2] = floats[0]\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadDWordOfPLCSiemens(WordStart, LengthOfWord1, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord1 * 2; i++) {\r\n        if (i % 2 == 1) {\r\n            if (Values[i] < 0) { Values[i] = Values[i] + 65536 }\r\n            if (Values[i - 1] < 0) { Values[i - 1] = Values[i - 1] + 65536 }\r\n            Array[(i - WordStart - 1) / 2] = (Values[i] + Values[i - 1] * 65536);\r\n            if (Array[(i - WordStart - 1) / 2] < 0) {\r\n                Array[(i - WordStart - 1) / 2] = Array[(i - WordStart - 1) / 2] + 65536;\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadStringOfPLC(LengthOfString, Values) {\r\n    var Array = [];\r\n    for (var i = 0; i < Values.length / LengthOfString; i++) {\r\n        let TempArr = []\r\n        for (var j = 0; j < LengthOfString; j++) {\r\n            TempArr.push(Values[i * LengthOfString + j] & 0xff)\r\n            TempArr.push(parseInt(Values[i * LengthOfString + j] / 256))\r\n        }\r\n        Array[i] = String.fromCharCode(...TempArr).toString().replace(/[^ -~]+/g, \"\");\r\n        if (Array[i].length === 0) { Array[i] = '_' }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadStringOfPLC_NodeRed(WordStart, LengthOfWord, LengthOfString, Values) {\r\n    var Array = [];\r\n    if (WordStart + LengthOfWord <= Values.length) {\r\n        for (var i = WordStart; i < WordStart + LengthOfWord / LengthOfString; i++) {\r\n            let TempArr = []\r\n            for (var j = 0; j < LengthOfString; j++) {\r\n                TempArr.push(Values[WordStart + (i - WordStart) * LengthOfString + j] & 0xff)\r\n                TempArr.push(parseInt(Values[WordStart + (i - WordStart) * LengthOfString + j] / 256))\r\n            }\r\n            Array[i - WordStart] = String.fromCharCode(...TempArr).toString().replace(/[^ -~]+/g, \"\");\r\n            if (Array[i - WordStart].length === 0) { Array[i - WordStart] = '' }\r\n        }\r\n    }\r\n\r\n    return Array;\r\n}\r\n\r\nfunction ReadStringFlexible(iWordStart, iLengthOfString, Values) {\r\n    let WordStart = parseInt(iWordStart)\r\n    let LengthOfString = parseInt(iLengthOfString)\r\n    if ((parseInt(WordStart) + parseInt(LengthOfString) / 2) < Values.length) {\r\n        let TempArr = []\r\n        for (var j = 0; j < LengthOfString / 2; j++) {\r\n            TempArr.push(Values[WordStart + j] & 0xff)\r\n            TempArr.push(parseInt(Values[WordStart + j] / 256))\r\n        }\r\n        return (String.fromCharCode(...TempArr).toString().replace(/[^ -~]+/g, \"\"))\r\n    } else {\r\n        return ''\r\n    }\r\n}\r\n\r\nfunction ReadStringOfPLCModbus(Start, LengthOfWord, LengthOfString, Values) {\r\n    var Array = [];\r\n    for (var i = Start; i < Start + LengthOfWord; i++) {\r\n        if (Values[i] >= 0) {\r\n            Array[i - Start] = (Values[i]);\r\n        } else {\r\n            Array[i - Start] = (65536 + Values[i]);\r\n        }\r\n    }\r\n    var ArrayString = []\r\n    for (var j = 0; j < Array.length / LengthOfString; j++) {\r\n        let TempArr = []\r\n        for (var jj = 0; jj < LengthOfString; jj++) {\r\n            if ((j * LengthOfString + jj) < Array.length) {\r\n                TempArr.push(Array[j * LengthOfString + jj] & 0xff)\r\n                TempArr.push(parseInt(Values[j * LengthOfString + jj] / 256))\r\n            }\r\n        }\r\n        ArrayString[j] = String.fromCharCode(...TempArr).toString().replace(/[^ -~]+/g, \"\");\r\n        if (ArrayString[j].length == 0) {\r\n            ArrayString[j] = '___'\r\n        }\r\n    }\r\n    return ArrayString;\r\n}\r\nfunction ConvertArray2Text(data) {\r\n    var temp = \"\";\r\n    for (var i = 0; i < data.length; i++) {\r\n        temp = temp + '|' + data[i];\r\n    }\r\n    return temp;\r\n}\r\nfunction CheckChangeValue(Variable, OldVariable) {\r\n    var temp = false;\r\n    if (!isEmpty(Variable)) {\r\n        for (var i = 0; i < Variable.length; i++) {\r\n            if (Variable[i] != OldVariable[i]) {\r\n                temp = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return temp;\r\n}\r\nfunction CheckNegativeNumber(nb) {\r\n    if (nb < 0) { return nb + 65536 }\r\n    if (nb > 32767) { return nb - 65536 }\r\n    return nb\r\n}\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\nfunction saveJsonFile(path, dataStore) {\r\n    try {\r\n        if (!fs.existsSync(path)) {\r\n            fs.writeFile(path, JSON.stringify(dataStore), 'utf8', function (err) {\r\n                if (err) {\r\n                    console.log(\"An error occured while writing JSON Object to File.\");\r\n                    return console.log(err);\r\n                }\r\n\r\n                console.log(\"JSON file has been saved.\");\r\n            });\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\nfunction saveFeedbackFile(path, dataStore) {\r\n    try {\r\n        fs.writeFile(path, dataStore, 'utf8', function (err) {\r\n            if (err) {\r\n                console.log(\"An error occured while writing JSON Object to File.\");\r\n                return console.log(err);\r\n            }\r\n            console.log(\"JSON file has been saved.\");\r\n        });\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\nfunction getJsonFile(path, cb) {\r\n    try {\r\n        if (fs.existsSync(path)) {\r\n            fs.readFile(path, 'utf8', function (err, data) {\r\n                if (err) console.log(err);\r\n                obj = JSON.parse(data);\r\n                cb(obj)\r\n            });\r\n        } else { cb('update') }\r\n    } catch (err) {\r\n        console.error(err)\r\n        cb([])\r\n    }\r\n}\r\nfunction convertPosCobot(pos0, pos1) {\r\n    var data = [];\r\n    data[0] = parseInt(pos1 % 256)\r\n    data[1] = parseInt(pos1 / 256)\r\n    data[2] = parseInt(pos0 % 256)\r\n    data[3] = parseInt(pos0 / 256)\r\n    return Buffer.from([data[3], data[2], data[1], data[0]]).readFloatBE(0)\r\n}\r\nfunction getIndexCobotWriteMB(indexBit, index) {\r\n    if (index % 10 <= indexBit) {\r\n        return index / 10\r\n    }\r\n    else {\r\n        return index / 10 + 1\r\n    }\r\n}\r\nfunction getDateTime() {\r\n    var date = new Date();\r\n    var year = date.getFullYear();\r\n\r\n    var month = date.getMonth() + 1;\r\n    month = (month < 10 ? \"0\" : \"\") + month;\r\n    var day = date.getUTCDate();\r\n    day = (day < 10 ? \"0\" : \"\") + day;\r\n    var hour = date.getHours();\r\n    hour = (hour < 10 ? \"0\" : \"\") + hour;\r\n    var min = date.getMinutes();\r\n    min = (min < 10 ? \"0\" : \"\") + min;\r\n    var sec = date.getSeconds();\r\n    sec = (sec < 10 ? \"0\" : \"\") + sec;\r\n\r\n    return year + \"/\" + month + \"/\" + day + \" \" + hour + \":\" + min + \":\" + sec;\r\n\r\n}\r\nfunction getDate() {\r\n    var date = new Date();\r\n    var year = date.getFullYear();\r\n\r\n    var month = date.getMonth() + 1;\r\n    month = (month < 10 ? \"0\" : \"\") + month;\r\n    var day = date.getUTCDate();\r\n    day = (day < 10 ? \"0\" : \"\") + day;\r\n\r\n    return year + \"_\" + month + \"_\" + day;\r\n}\r\nfunction saveLog(path, command) {\r\n    var file = 'log/' + path + '.log';\r\n    var datetime = '[' + this.getDateTime() + '] ';\r\n    var text = datetime + command.replace(/[^ -~]+/g, \"\") + '\\r\\n';\r\n    try {\r\n        if (!fs.existsSync(file)) {\r\n            console.log(file)\r\n            fs.writeFile(file, 'Data:' + '\\r\\n', function (err) {\r\n                if (err) {\r\n                    console.log(\"An error occured while writing JSON Object to File.\");\r\n                }\r\n            });\r\n        }\r\n        fs.appendFile(file, text, function (err) {\r\n            if (err) return console.log(err);\r\n            console.log('successfully appended \"' + text + '\"');\r\n        });\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\nfunction checkVariableTypeNumber(variable) {\r\n    if (typeof variable === 'string' && !isNaN(Number(variable))) {\r\n        return true;\r\n    }\r\n    if (typeof variable === 'number') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n// function saveExcel(nick, command) {\r\n//     var file = 'log/' + nick + '.csv';\r\n//     var datetime = '[' + this.getDateTime() + '] ';\r\n//     // var text = datetime + command.replace(/[^ -~]+/g, \"\") + '\\r\\n';\r\n\r\n//     let TempArr = command.split('||')\r\n//     const data = [\r\n//         { Field0: datetime, Field1: TempArr[0], Field2: TempArr[2], Field3: TempArr[3], Field4: TempArr[4] },\r\n//     ];\r\n//     (async () => {\r\n//         console.log('export-----------------------')\r\n//         const csv = new ObjectsToCsv(data);\r\n//         await csv.toDisk(file, { append: true });\r\n//         console.log(await csv.toString());\r\n//     })();\r\n// }\r\nfunction ProcessSocketIO_Fins(data) {\r\n    // //Force 1\r\n    // if (data.NameCommand === 'ElementForce_Run' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [100, 100, data.tag, data.tag]);\r\n    // }\r\n    // //Force 0\r\n    // if (data.NameCommand === 'ElementForce_Stop' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [101, 101, data.tag, data.tag]);\r\n    // }\r\n    // //UnForce\r\n    // if (data.NameCommand === 'ElementForce_Auto' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [102, 102, data.tag, data.tag]);\r\n    // }\r\n    // //Interlock\r\n    // if (data.NameCommand === 'ElementForce_Interlock' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [103, 103, data.tag, data.tag]);\r\n    // }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && !isNaN(data.idDevice) && data.typeDevice === 'Fins-Omron') {\r\n        // if(!isNaN(data.idDevice)){\r\n        //   if(data.mode==0){\r\n        //     Variable.BitAdjust[data.idDevice][parseInt(data.tag)] = 0\r\n        //     Variable.BitDisplay[data.idDevice][parseInt(data.tag)] = 0\r\n        //   }\r\n        //   if(data.mode==1){\r\n        //     Variable.BitAdjust[data.idDevice][parseInt(data.tag)] = 1\r\n        //     Variable.BitDisplay[data.idDevice][parseInt(data.tag)] = 1\r\n        //   }\r\n        // }\r\n        if (parseInt(data.idDevice)) {\r\n            if (parseInt(VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)])) {\r\n                if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\r\n                    if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                        Variable.OldWordBitAdjust[parseInt(data.idDevice)] = Variable.WordBitAdjust[parseInt(data.idDevice)].slice()\r\n                    }\r\n                    let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                    let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(data.tag) / 16\r\n                    let currentWordOfBitAdjust = Variable.OldWordBitAdjust[data.idDevice][parseInt(parseInt(data.tag) / 16)]\r\n                    if (data.mode == 2) {\r\n                        currentWordOfBitAdjust ^= mask;\r\n                    }\r\n                    if (data.mode == 0) {\r\n                        currentWordOfBitAdjust &= ~mask;\r\n                    }\r\n                    if (data.mode == 1) {\r\n                        currentWordOfBitAdjust |= mask;\r\n                    }\r\n\r\n                    //currentWordOfBitAdjust ^= mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    Variable.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)] = currentWordOfBitAdjust\r\n                    console.log('Write Bit To PLC')\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + numberWordOfBitAdjust, [currentWordOfBitAdjust]);\r\n                }\r\n            } else {\r\n                if (parseInt(data.enableLogData)) {\r\n                    SubFunction.saveLogData({\r\n                        parent: 'logData',\r\n                        idDevice: data.idDevice,\r\n                        typeObject: 'BitAdjust',\r\n                        tag: data.tag,\r\n                        previousValue: 'old',\r\n                        newValue: 'new',\r\n                        action: 'Toggle',\r\n                        nameObject: '',\r\n                        user: data.currentUser\r\n                    })\r\n                }\r\n\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', [110, 110, data.mode, data.mode, data.tag, data.tag]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.tag) <= VariableSystem.PLC_LengthOfWordWordAdjust[parseInt(data.idDevice)]) {\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + (parseInt(VariableSystem.PLC_WordStartWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag)), [data.value]);\r\n                }\r\n            } else {\r\n                // Variable.WordAdjust[1][parseInt(data.tag)] = parseInt(data.value)\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', [111, 111, data.tag, data.tag, data.value, data.value]);\r\n            }\r\n        }\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        if (parseInt(data.idDevice)) {\r\n            var heightValueDWordAdjust = parseInt(data.value / 65536);\r\n            var lowValueDWordAdjust = parseInt(data.value % 65536);\r\n            VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + (parseInt(VariableSystem.PLC_WordStartDWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag) * 2), [lowValueDWordAdjust, heightValueDWordAdjust]);\r\n        }\r\n    }\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        var myBuffer = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 40) myBuffer[i] = buffer[i];\r\n        }\r\n        let arr1 = [113, 113, data.tag, data.tag, 0, 0, 0, 0, 0, 0, 0,]\r\n        let arrResult = arr1.concat(myBuffer)\r\n\r\n        if (data.idDevice == '0') {\r\n            Variable.TextFieldInput[0][parseInt(data.tag)] = arrResult\r\n        } else {\r\n            if (parseInt(data.idDevice)) {\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', arrResult);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction ProcessSocketIO_Fins_Flexible(data) {\r\n    //Bit\r\n    if (data.NameCommand === 'BitForce' && data.tag.length > 0 && checkVariableTypeNumber(data.idDevice) && data.typeDevice === 'Fins-Omron') {\r\n        const regex = /^\\d+\\.\\d+$/;\r\n        if (regex.test(data.tag)) {\r\n            //flexible\r\n            let tempTag = data.tag.split('.')\r\n            let Word = tempTag[0]\r\n            let Bit = tempTag[1]\r\n\r\n            if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                Variable.OldWordBitAdjust[parseInt(data.idDevice)] = Variable.WordAdjust[parseInt(data.idDevice)].slice()\r\n            }\r\n\r\n            if (tempTag.length == 2 && !isNaN(Word) && !isNaN(Bit)) {\r\n                let mask = 1 << parseInt(Bit);\r\n                let currentWordOfBitAdjust = Variable.Word[data.idDevice][parseInt(Word)]\r\n                if (data.mode == 2) {\r\n                    currentWordOfBitAdjust ^= mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + Word, [currentWordOfBitAdjust]);\r\n                }\r\n                if (data.mode == 0) {\r\n                    currentWordOfBitAdjust &= ~mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + Word, [currentWordOfBitAdjust]);\r\n                }\r\n                if (data.mode == 1) {\r\n                    currentWordOfBitAdjust |= mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + Word, [currentWordOfBitAdjust]);\r\n                }\r\n                if (data.mode == 3) {\r\n                    currentWordOfBitAdjust |= mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + Word, [currentWordOfBitAdjust]);\r\n\r\n                    setTimeout(() => {\r\n                        currentWordOfBitAdjust &= ~mask;\r\n                        VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                        VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + Word, [currentWordOfBitAdjust]);\r\n                    }, 1000);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (parseInt(data.enableLogData)) {\r\n            SubFunction.saveLogData({\r\n                parent: 'logData',\r\n                idDevice: data.idDevice,\r\n                typeObject: 'BitAdjust',\r\n                tag: data.tag,\r\n                previousValue: 'old',\r\n                newValue: 'new',\r\n                action: 'Toggle',\r\n                nameObject: '',\r\n                user: data.currentUser\r\n            })\r\n        }\r\n    }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && !isNaN(data.idDevice) && data.typeDevice === 'Fins-Omron') {\r\n        // if(!isNaN(data.idDevice)){\r\n        //   if(data.mode==0){\r\n        //     Variable.BitAdjust[data.idDevice][parseInt(data.tag)] = 0\r\n        //     Variable.BitDisplay[data.idDevice][parseInt(data.tag)] = 0\r\n        //   }\r\n        //   if(data.mode==1){\r\n        //     Variable.BitAdjust[data.idDevice][parseInt(data.tag)] = 1\r\n        //     Variable.BitDisplay[data.idDevice][parseInt(data.tag)] = 1\r\n        //   }\r\n        // }\r\n        if (parseInt(data.idDevice)) {\r\n            const regex = /^\\d+\\.\\d+$/;\r\n            if (!regex.test(data.tag)) {\r\n                if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\r\n                    if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                        Variable.OldWordBitAdjust[parseInt(data.idDevice)] = Variable.WordBitAdjust[parseInt(data.idDevice)].slice()\r\n                    }\r\n                    let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                    let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(data.tag) / 16\r\n                    let currentWordOfBitAdjust = Variable.OldWordBitAdjust[data.idDevice][parseInt(parseInt(data.tag) / 16)]\r\n                    if (data.mode == 2) {\r\n                        currentWordOfBitAdjust ^= mask;\r\n                    }\r\n                    if (data.mode == 0) {\r\n                        currentWordOfBitAdjust &= ~mask;\r\n                    }\r\n                    if (data.mode == 1) {\r\n                        currentWordOfBitAdjust |= mask;\r\n                    }\r\n\r\n                    //currentWordOfBitAdjust ^= mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    Variable.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)] = currentWordOfBitAdjust\r\n                    console.log('Write Bit To PLC')\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + numberWordOfBitAdjust, [currentWordOfBitAdjust]);\r\n                }\r\n            } else {\r\n                //flexible\r\n                let tempTag = data.tag.split('.')\r\n                let Word = tempTag[0]\r\n                let Bit = tempTag[1]\r\n\r\n                if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                    Variable.OldWordBitAdjust[parseInt(data.idDevice)] = Variable.WordAdjust[parseInt(data.idDevice)].slice()\r\n                }\r\n\r\n                if (tempTag.length == 2 && !isNaN(Word) && !isNaN(Bit)) {\r\n                    let mask = 1 << parseInt(Bit);\r\n                    let currentWordOfBitAdjust = Variable.WordAdjust[data.idDevice][parseInt(Word)]\r\n                    if (data.mode == 2) {\r\n                        currentWordOfBitAdjust ^= mask;\r\n                    }\r\n                    if (data.mode == 0) {\r\n                        currentWordOfBitAdjust &= ~mask;\r\n                    }\r\n                    if (data.mode == 1) {\r\n                        currentWordOfBitAdjust |= mask;\r\n                    }\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + Word, [currentWordOfBitAdjust]);\r\n                }\r\n            }\r\n\r\n            if (parseInt(data.enableLogData)) {\r\n                SubFunction.saveLogData({\r\n                    parent: 'logData',\r\n                    idDevice: data.idDevice,\r\n                    typeObject: 'BitAdjust',\r\n                    tag: data.tag,\r\n                    previousValue: 'old',\r\n                    newValue: 'new',\r\n                    action: 'Toggle',\r\n                    nameObject: '',\r\n                    user: data.currentUser\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    //Number\r\n    if (data.NameCommand === 'NumberForce' && data.tag.length > 0 && data.typeDevice === 'Fins-Omron') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            if (data.dataType === 'Word' && checkVariableTypeNumber(data.tag)) {\r\n                let DataWrite\r\n                if (parseInt(data.value) >= 0 && parseInt(data.value) < 65536) {\r\n                    DataWrite = parseInt(data.value)\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [DataWrite]);\r\n                } else if (parseInt(data.value) < 0 && parseInt(data.value) > -32767) {\r\n                    DataWrite = parseInt(data.value) + 65536\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [DataWrite]);\r\n                }\r\n            }\r\n            if (data.dataType === 'DWord' && checkVariableTypeNumber(data.tag)) {\r\n                var heightValueDWordAdjust = 0\r\n                var lowValueDWordAdjust = 0\r\n                if (parseInt(data.value) >= 0 && parseInt(data.value) < 4294967296) {\r\n                    heightValueDWordAdjust = parseInt(data.value / 65536);\r\n                    lowValueDWordAdjust = parseInt(data.value % 65536);\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [lowValueDWordAdjust, heightValueDWordAdjust]);\r\n                }\r\n                if (parseInt(data.value) < 0 && parseInt(data.value) > -2147483648) {\r\n                    let tempValue = 4294967296 + parseInt(data.value)\r\n                    heightValueDWordAdjust = parseInt(tempValue / 65536);\r\n                    lowValueDWordAdjust = parseInt(tempValue % 65536);\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [lowValueDWordAdjust, heightValueDWordAdjust]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        if (parseInt(data.idDevice)) {\r\n            let DataWrite\r\n            if (parseInt(data.value) >= 0 && parseInt(data.value) < 65536) {\r\n                DataWrite = parseInt(data.value)\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [DataWrite]);\r\n            } else if (parseInt(data.value) < 0 && parseInt(data.value) > -32767) {\r\n                DataWrite = parseInt(data.value) + 65536\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [DataWrite]);\r\n            }\r\n        }\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        if (parseInt(data.idDevice)) {\r\n            var heightValueDWordAdjust = 0\r\n            var lowValueDWordAdjust = 0\r\n            if (parseInt(data.value) >= 0 && parseInt(data.value) < 4294967296) {\r\n                heightValueDWordAdjust = parseInt(data.value / 65536);\r\n                lowValueDWordAdjust = parseInt(data.value % 65536);\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [lowValueDWordAdjust, heightValueDWordAdjust]);\r\n            }\r\n            if (parseInt(data.value) < 0 && parseInt(data.value) > -2147483648) {\r\n                let tempValue = 4294967296 + parseInt(data.value)\r\n                heightValueDWordAdjust = parseInt(tempValue / 65536);\r\n                lowValueDWordAdjust = parseInt(tempValue % 65536);\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + parseInt(data.tag), [lowValueDWordAdjust, heightValueDWordAdjust]);\r\n            }\r\n        }\r\n    }\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        var myBuffer = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 40) myBuffer[i] = buffer[i];\r\n        }\r\n        let arr1 = [113, 113, data.tag, data.tag, 0, 0, 0, 0, 0, 0, 0,]\r\n        let arrResult = arr1.concat(myBuffer)\r\n\r\n        if (data.idDevice == '0') {\r\n            Variable.TextFieldInput[0][parseInt(data.tag)] = arrResult\r\n        } else {\r\n            if (parseInt(data.idDevice)) {\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', arrResult);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction ProcessSocketIO_System(data) {\r\n    // //Force 1\r\n    // if (data.NameCommand === 'ElementForce_Run' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [100, 100, data.tag, data.tag]);\r\n    // }\r\n    // //Force 0\r\n    // if (data.NameCommand === 'ElementForce_Stop' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [101, 101, data.tag, data.tag]);\r\n    // }\r\n    // //UnForce\r\n    // if (data.NameCommand === 'ElementForce_Auto' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [102, 102, data.tag, data.tag]);\r\n    // }\r\n    // //Interlock\r\n    // if (data.NameCommand === 'ElementForce_Interlock' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [103, 103, data.tag, data.tag]);\r\n    // }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && !isNaN(data.idDevice) && data.typeDevice === 'System') {\r\n        if (data.mode == 2) {\r\n            Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = !Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\r\n            Variable.BitDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\r\n        }\r\n        if (data.mode == 0) {\r\n            Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = 0\r\n            Variable.BitDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = 0\r\n        }\r\n        if (data.mode == 1) {\r\n            Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = 1\r\n            Variable.BitDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = 1\r\n        }\r\n    }\r\n    //Bit\r\n    if (data.NameCommand === 'BitForce' && !isNaN(data.tag) && !isNaN(data.idDevice) && data.typeDevice === 'System') {\r\n        if (data.mode == 2) {\r\n            Variable.Bit[parseInt(data.idDevice)][parseInt(data.tag)] = !Variable.Bit[parseInt(data.idDevice)][parseInt(data.tag)]\r\n        }\r\n        if (data.mode == 0) {\r\n            Variable.Bit[parseInt(data.idDevice)][parseInt(data.tag)] = 0\r\n        }\r\n        if (data.mode == 1) {\r\n            Variable.Bit[parseInt(data.idDevice)][parseInt(data.tag)] = 1\r\n        }\r\n        if (data.mode == 3) {//memontary\r\n            Variable.Bit[parseInt(data.idDevice)][parseInt(data.tag)] = 1\r\n            //delay after 1s will reset\r\n            setTimeout(() => {\r\n                Variable.Bit[parseInt(data.idDevice)][parseInt(data.tag)] = 0\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    //Number\r\n    if (data.NameCommand === 'NumberForce' && data.tag.length > 0 && data.typeDevice === 'System') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            if (data.dataType === 'Number' && checkVariableTypeNumber(data.tag)) {\r\n                Variable.Number[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n            }\r\n            if (data.dataType === 'String' && checkVariableTypeNumber(data.tag)) {\r\n                Variable.Number[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n            }\r\n        }\r\n    }\r\n    //String\r\n    if (data.NameCommand === 'StringForce' && data.tag.length > 0 && data.typeDevice === 'System') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            if (checkVariableTypeNumber(data.tag)) {\r\n                Variable.ListString[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n            }\r\n        }\r\n    }\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'System') {\r\n        Variable.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n        Variable.WordDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'System') {\r\n        Variable.DWordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n        Variable.DWordDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n    }\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'System') {\r\n        var myBuffer = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 40) myBuffer[i] = buffer[i];\r\n        }\r\n        let arr1 = [113, 113, data.tag, data.tag, 0, 0, 0, 0, 0, 0, 0,]\r\n        let arrResult = arr1.concat(myBuffer)\r\n\r\n        if (data.idDevice == '0') {\r\n            Variable.TextFieldInput[parseInt(data.idDevice)][parseInt(data.tag)] = arrResult\r\n        }\r\n    }\r\n}\r\nfunction ProcessSocketIO_OPCUA(data) {\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitForce' && (data.tag.length > 0) && data.typeDevice === 'OPC-UA') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n\r\n            if (data.mode == 2) {\r\n                for (let obj of Variable.Bit[parseInt(data.idDevice)]) {\r\n                    if (data.tag in obj) {\r\n                        let oldValue = obj[data.tag]\r\n                        const nodeIdToWrite = data.tag; // Adjust to your server's nodeId\r\n                        const valueToWrite = {\r\n                            dataType: DataType.Boolean,\r\n                            value: !oldValue\r\n                        };\r\n                        VariableSystem.COMMUNICATION_OPCUA[parseInt(data.idDevice)].writeSingleNode(nodeIdToWrite, valueToWrite);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (data.mode == 1) {\r\n                const nodeIdToWrite = data.tag; // Adjust to your server's nodeId\r\n                const valueToWrite = {\r\n                    dataType: DataType[data.dataType],\r\n                    value: true\r\n                };\r\n                VariableSystem.COMMUNICATION_OPCUA[parseInt(data.idDevice)].writeSingleNode(nodeIdToWrite, valueToWrite);\r\n            }\r\n            if (data.mode == 0) {\r\n                const nodeIdToWrite = data.tag; // Adjust to your server's nodeId\r\n                const valueToWrite = {\r\n                    dataType: DataType[data.dataType],\r\n                    value: false\r\n                };\r\n                VariableSystem.COMMUNICATION_OPCUA[parseInt(data.idDevice)].writeSingleNode(nodeIdToWrite, valueToWrite);\r\n            }\r\n            if (data.mode == 3) {\r\n                const nodeIdToWrite = data.tag; // Adjust to your server's nodeId\r\n                const valueToWrite = {\r\n                    dataType: DataType[data.dataType],\r\n                    value: true\r\n                };\r\n                VariableSystem.COMMUNICATION_OPCUA[parseInt(data.idDevice)].writeSingleNode(nodeIdToWrite, valueToWrite);\r\n                setTimeout(() => {\r\n                    const nodeIdToWrite = data.tag; // Adjust to your server's nodeId\r\n                    const valueToWrite = {\r\n                        dataType: DataType[data.dataType],\r\n                        value: false\r\n                    };\r\n                    VariableSystem.COMMUNICATION_OPCUA[parseInt(data.idDevice)].writeSingleNode(nodeIdToWrite, valueToWrite);\r\n                }, 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Number\r\n    if (data.NameCommand === 'NumberForce' && data.tag.length > 0 && data.typeDevice === 'OPC-UA') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            const nodeIdToWrite = data.tag; // Adjust to your server's nodeId\r\n            const valueToWrite = {\r\n                dataType: DataType[data.dataType],\r\n                value: data.value\r\n            };\r\n            VariableSystem.COMMUNICATION_OPCUA[parseInt(data.idDevice)].writeSingleNode(nodeIdToWrite, valueToWrite);\r\n        }\r\n    }\r\n\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        var myBuffer = new Array(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]).fill(0);\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 2 * VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]) myBuffer[i] = buffer[i];\r\n        }\r\n        VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(VariableSystem.PLC_WordStartString[parseInt(data.idDevice)]) + parseInt(data.tag) * parseInt(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]), myBuffer).then(function (resp) {\r\n            console.log(resp)\r\n        }, console.error);\r\n    }\r\n}\r\nfunction ProcessSocketIO_ProfiNet(data) {\r\n    function sanitizeVariableName(input) {\r\n        // Remove invalid characters (e.g., '.', '=', etc.)\r\n        let sanitized = input.replace(/[^a-zA-Z0-9_$]/g, '');\r\n        // Ensure the variable name doesn't start with a digit\r\n        if (/^[0-9]/.test(sanitized)) {\r\n            sanitized = '_' + sanitized;\r\n        }\r\n        return sanitized;\r\n    }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitForce' && (data.tag.length > 0) && data.typeDevice === 'ProfiNet') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            if (data.mode == 2) {\r\n                let currentValue = Variable.Communication_Profinet_Raw_Result[parseInt(data.idDevice)][(sanitizeVariableName(data._id + data.tag))];\r\n                VariableSystem.COMMUNICATION_SIEMENS[parseInt(data.idDevice)].writeItems(sanitizeVariableName(data._id + data.tag), !currentValue);\r\n            }\r\n            if (data.mode == 1) {\r\n                VariableSystem.COMMUNICATION_SIEMENS[parseInt(data.idDevice)].writeItems(sanitizeVariableName(data._id + data.tag), true);\r\n            }\r\n            if (data.mode == 0) {\r\n                VariableSystem.COMMUNICATION_SIEMENS[parseInt(data.idDevice)].writeItems(sanitizeVariableName(data._id + data.tag), false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Number\r\n    if (data.NameCommand === 'NumberForce' && data.tag.length > 0 && data.typeDevice === 'ProfiNet') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            VariableSystem.COMMUNICATION_SIEMENS[parseInt(data.idDevice)].writeItems(sanitizeVariableName(data._id), data.value);\r\n        }\r\n    }\r\n    //String\r\n    if (data.NameCommand === 'StringForce' && data.tag.length > 0 && data.typeDevice === 'ProfiNet') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            VariableSystem.COMMUNICATION_SIEMENS[parseInt(data.idDevice)].writeItems(sanitizeVariableName(data._id), data.value);\r\n        }\r\n    }\r\n\r\n}\r\nfunction ProcessSocketIO_Modbus(data) {\r\n    // if (data.NameCommand === 'ElementWord_Force_RUN' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n    //     if (!NaN(data.idDevice)) {\r\n    //         // let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n    //         // let currentWordOfElement = Variable.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n    //         // currentWordOfElement = currentWordOfElement | 1 << 4;\r\n    //         // currentWordOfElement = currentWordOfElement & ~(1 << 3);\r\n    //         VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleCoil(parseInt(data.tag), true).then(function (resp) {\r\n    //         }, console.error);\r\n    //     }\r\n    // }\r\n    // if (data.NameCommand === 'ElementWord_Force_STOP' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n    //     if (!NaN(data.idDevice)) {\r\n    //         if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n    //             let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n    //             let currentWordOfElement = Variable.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n    //             //num & ~(1<<bit);\r\n    //             currentWordOfElement = currentWordOfElement | 1 << 3;\r\n    //             currentWordOfElement = currentWordOfElement & ~(1 << 4);\r\n    //             Variable.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n    //             }, console.error);\r\n    //         }\r\n    //     }\r\n    // }\r\n    // if (data.NameCommand === 'ElementWord_RUN' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n    //     if (parseInt(data.idDevice)) {\r\n    //         if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n    //             let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n    //             let currentWordOfElement = Variable.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n    //             currentWordOfElement = currentWordOfElement | 1 << 0;\r\n    //             Variable.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n    //             }, console.error);\r\n    //         }\r\n    //     }\r\n    // }\r\n    // if (data.NameCommand === 'ElementWord_STOP' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n    //     if (parseInt(data.idDevice)) {\r\n    //         if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n    //             let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n    //             let currentWordOfElement = Variable.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n    //             //num & ~(1<<bit);\r\n    //             currentWordOfElement = currentWordOfElement & ~(1 << 0);\r\n    //             Variable.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n    //             }, console.error);\r\n    //         }\r\n    //     }\r\n    // }\r\n    // if (data.NameCommand === 'ElementWord_AUTO' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n    //     if (parseInt(data.idDevice)) {\r\n    //         if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n    //             let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n    //             let currentWordOfElement = Variable.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n    //             //num & ~(1<<bit);\r\n    //             currentWordOfElement = currentWordOfElement & ~(1 << 3);\r\n    //             currentWordOfElement = currentWordOfElement & ~(1 << 4);\r\n    //             Variable.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n    //             }, console.error);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        if (!isNaN(data.idDevice) && !isNaN(data.tag)) {\r\n            if (data.mode == 2) {\r\n                // if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                //     Variable.OldWordBitAdjust[parseInt(data.idDevice)] = Variable.WordBitAdjust[parseInt(data.idDevice)].slice()\r\n                // }\r\n                // let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                // let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(parseInt(data.tag) / 16)\r\n                // let currentWordOfBitAdjust = Variable.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)]\r\n                // currentWordOfBitAdjust ^= mask;\r\n                // VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                // Variable.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)] = currentWordOfBitAdjust\r\n                // VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleRegister(parseInt(numberWordOfBitAdjust), currentWordOfBitAdjust).then(function (resp) {\r\n                let oldValue = Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\r\n                VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), !oldValue).then(function (resp) {\r\n                }, console.error);\r\n            }\r\n            if (data.mode == 1) {\r\n                // if (parseInt(data.tag) / 16 <= VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)]) {\r\n                //     let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                //     let numberWordOfBitAdjust = VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)] + parseInt(data.tag) / 16\r\n                //     let currentWordOfBitAdjust = Variable.WordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)]\r\n                //     currentWordOfBitAdjust |= mask;\r\n                //     VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                //     VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(numberWordOfBitAdjust), currentWordOfBitAdjust).then(function (resp) {\r\n                //     }, console.error);\r\n                // }\r\n                VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), true).then(function (resp) {\r\n                }, console.error);\r\n            }\r\n            if (data.mode == 0) {\r\n                // if (parseInt(data.tag) / 16 <= VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)]) {\r\n                //     let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                //     console.log(mask)\r\n                //     let numberWordOfBitAdjust = VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)] + parseInt(data.tag) / 16\r\n                //     let currentWordOfBitAdjust = Variable.WordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)]\r\n                //     currentWordOfBitAdjust &= ~mask;\r\n                //     VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                //     VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(numberWordOfBitAdjust), currentWordOfBitAdjust).then(function (resp) {\r\n                //     }, console.error);\r\n                // }\r\n                VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), false).then(function (resp) {\r\n                }, console.error);\r\n            }\r\n        }\r\n    }\r\n    // if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag) && data.tag == 'ExportPos') {\r\n    //     var TAB = '\\t';\r\n    //     ProjectFunction.savePositions('PositionSolomon', Variable.WordDisplay[4] + TAB + Variable.WordDisplay[5] + TAB + Variable.WordDisplay[6] + TAB + Variable.WordDisplay[7] + TAB + Variable.WordDisplay[8] + TAB + Variable.WordDisplay[9]);\r\n    // }\r\n\r\n    //Bit\r\n    if (data.NameCommand === 'BitForce' && checkVariableTypeNumber(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        if (checkVariableTypeNumber(data.idDevice) && checkVariableTypeNumber(data.tag) && Variable.Bit[parseInt(data.idDevice)]) {\r\n            if (data.mode == 2) {\r\n                if (data.dataType == 'Coil') {\r\n                    if (Variable.Bit[parseInt(data.idDevice)][data.tag] && Variable.Bit[parseInt(data.idDevice)][data.tag].hasOwnProperty('Coil')) {\r\n                        let currentCoil = Variable.Bit[parseInt(data.idDevice)][data.tag].Coil\r\n                        VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), !currentCoil).then(function (resp) {\r\n                        }, console.error);\r\n                    }\r\n                }\r\n            }\r\n            if (data.mode == 1) {\r\n                if (data.dataType == 'Coil') {\r\n                    if (Variable.Bit[parseInt(data.idDevice)][data.tag] && Variable.Bit[parseInt(data.idDevice)][data.tag].hasOwnProperty('Coil')) {\r\n                        VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), 1).then(function (resp) {\r\n                        }, console.error);\r\n                    }\r\n                }\r\n            }\r\n            if (data.mode == 0) {\r\n                if (data.dataType == 'Coil') {\r\n                    if (Variable.Bit[parseInt(data.idDevice)][data.tag] && Variable.Bit[parseInt(data.idDevice)][data.tag].hasOwnProperty('Coil')) {\r\n                        VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), 0).then(function (resp) {\r\n                        }, console.error);\r\n                    }\r\n                }\r\n            }\r\n            if (data.mode == 3) {\r\n                if (data.dataType == 'Coil') {\r\n                    if (Variable.Bit[parseInt(data.idDevice)][data.tag] && Variable.Bit[parseInt(data.idDevice)][data.tag].hasOwnProperty('Coil')) {\r\n                        VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), 1).then(function (resp) {\r\n                        }, console.error);\r\n\r\n                        setTimeout(() => {\r\n                            VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleCoil(parseInt(data.tag), 0).then(function (resp) {\r\n                            }, console.error);\r\n                        }, 1000);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //Number\r\n    if (data.NameCommand === 'NumberForce' && data.tag.length > 0 && data.typeDevice === 'Modbus-Client') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            if (data.dataType === 'HoldingRegister-Int16' && checkVariableTypeNumber(data.tag)) {\r\n                let DataWrite\r\n                if (parseInt(data.value) >= 0 && parseInt(data.value) < 65536) {\r\n                    DataWrite = parseInt(data.value)\r\n                    VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(data.tag), DataWrite).then(function (resp) {\r\n                    }, console.error);\r\n                } else if (parseInt(data.value) < 0 && parseInt(data.value) > -32767) {\r\n                    DataWrite = parseInt(data.value) + 65536\r\n                    VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(data.tag), DataWrite).then(function (resp) {\r\n                    }, console.error);\r\n                }\r\n            }\r\n            if (data.dataType === 'HoldingRegister-Int32' && checkVariableTypeNumber(data.tag)) {\r\n                var heightValueDWordAdjust = 0\r\n                var lowValueDWordAdjust = 0\r\n                if (parseInt(data.value) >= 0 && parseInt(data.value) < 4294967296) {\r\n                    heightValueDWordAdjust = parseInt(data.value / 65536);\r\n                    lowValueDWordAdjust = parseInt(data.value % 65536);\r\n                    const values = Buffer.alloc(4); // 6 bytes for 3 registers\r\n                    values.writeUInt16BE(lowValueDWordAdjust, 0); // Write 1 to the first register\r\n                    values.writeUInt16BE(heightValueDWordAdjust, 2); // Write 2 to the second register\r\n                    VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(data.tag), values).then(function (resp) {\r\n                        console.log(resp)\r\n                    }, console.error);\r\n                }\r\n                if (parseInt(data.value) < 0 && parseInt(data.value) > -2147483648) {\r\n                    let tempValue = 4294967296 + parseInt(data.value)\r\n                    heightValueDWordAdjust = parseInt(tempValue / 65536);\r\n                    lowValueDWordAdjust = parseInt(tempValue % 65536);\r\n                    const values = Buffer.alloc(4); // 6 bytes for 3 registers\r\n                    values.writeUInt16BE(lowValueDWordAdjust, 0); // Write 1 to the first register\r\n                    values.writeUInt16BE(heightValueDWordAdjust, 2); // Write 2 to the second register\r\n                    VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(data.tag), values).then(function (resp) {\r\n                        console.log(resp)\r\n                    }, console.error);\r\n                }\r\n            }\r\n            if (data.dataType === 'HoldingRegister-Float' && checkVariableTypeNumber(data.tag)) {\r\n                const buffer = new ArrayBuffer(4); // 32 bits (4 bytes)\r\n                const view = new DataView(buffer);\r\n\r\n                view.setFloat32(0, data.value, true); // Store in little-endian format\r\n\r\n                let lowWord = view.getUint16(0, true);  // Lower 16 bits\r\n                let highWord = view.getUint16(2, true); // Upper 16 bits\r\n\r\n                const values = Buffer.alloc(4); // 6 bytes for 3 registers\r\n                values.writeUInt16BE(lowWord, 0); // Write 1 to the first register\r\n                values.writeUInt16BE(highWord, 2); // Write 2 to the second register\r\n\r\n                VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(data.tag), values).then(function (resp) {\r\n                    console.log(resp)\r\n                }, console.error);\r\n            }\r\n        }\r\n    }\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        let DataWrite\r\n        if (parseInt(data.value) >= 0 && parseInt(data.value) < 65536) {\r\n            DataWrite = parseInt(data.value)\r\n            VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(data.tag), DataWrite).then(function (resp) {\r\n            }, console.error);\r\n        } else if (parseInt(data.value) < 0 && parseInt(data.value) > -32767) {\r\n            DataWrite = parseInt(data.value) + 65536\r\n            VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(data.tag), DataWrite).then(function (resp) {\r\n            }, console.error);\r\n        }\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        var heightValueDWordAdjust = 0\r\n        var lowValueDWordAdjust = 0\r\n        if (parseInt(data.value) >= 0 && parseInt(data.value) < 4294967296) {\r\n            heightValueDWordAdjust = parseInt(data.value / 65536);\r\n            lowValueDWordAdjust = parseInt(data.value % 65536);\r\n            VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(data.tag), [lowValueDWordAdjust, heightValueDWordAdjust]).then(function (resp) {\r\n                console.log(resp)\r\n            }, console.error);\r\n        }\r\n        if (parseInt(data.value) < 0 && parseInt(data.value) > -2147483648) {\r\n            let tempValue = 4294967296 + parseInt(data.value)\r\n            heightValueDWordAdjust = parseInt(tempValue / 65536);\r\n            lowValueDWordAdjust = parseInt(tempValue % 65536);\r\n            VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(data.tag), [lowValueDWordAdjust, heightValueDWordAdjust]).then(function (resp) {\r\n                console.log(resp)\r\n            }, console.error);\r\n        }\r\n\r\n    }\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        var myBuffer = new Array(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]).fill(0);\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 2 * VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]) myBuffer[i] = buffer[i];\r\n        }\r\n        VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(VariableSystem.PLC_WordStartString[parseInt(data.idDevice)]) + parseInt(data.tag) * parseInt(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]), myBuffer).then(function (resp) {\r\n            console.log(resp)\r\n        }, console.error);\r\n    }\r\n}\r\nfunction ProcessSocketIO_Modbus_Server(data) {\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Server') {\r\n        if (parseInt(data.idDevice)) {\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_BitAdjust[parseInt(data.idDevice)]\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = parseInt(data.value)\r\n        }\r\n    }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Server') {\r\n        if (parseInt(data.value) >= 0 && parseInt(data.value) < 65536) {\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_WordAdjust[parseInt(data.idDevice)]\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = parseInt(data.value)\r\n        } else if (parseInt(data.value) < 0 && parseInt(data.value) > -32767) {\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_WordAdjust[parseInt(data.idDevice)]\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n            Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = parseInt(data.value) + 65536\r\n        }\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Server') {\r\n        var heightValueDWordAdjust = parseInt(data.value / 65536);\r\n        var lowValueDWordAdjust = parseInt(data.value % 65536);\r\n        Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_DWordAdjust[parseInt(data.idDevice)]\r\n        Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n        Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = heightValueDWordAdjust\r\n        Variable.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 3] = lowValueDWordAdjust\r\n    }\r\n    //TextFieldInput\r\n    // if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\r\n    //     var myBuffer = new Array(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]).fill(0);\r\n    //     var str = data.value;\r\n    //     var buffer = new Buffer(str, 'utf8');\r\n    //     for (let i = 0; i < buffer.length; i++) {\r\n    //         if (i < 2 * VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]) myBuffer[i] = buffer[i];\r\n    //     }\r\n    // VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(VariableSystem.PLC_WordStartString[parseInt(data.idDevice)]) + parseInt(data.tag) * parseInt(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]), myBuffer).then(function (resp) {\r\n    //     console.log(resp)\r\n    // }, console.error);\r\n    // }\r\n}\r\nfunction ProcessSocketIO_ACE(data) {\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitForce' && (data.tag.length > 0) && data.typeDevice === 'ACE') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            if (data.mode == 2) {\r\n                for (let obj of Variable.Bit[parseInt(data.idDevice)]) {\r\n                    if (data.tag in obj) {\r\n                        let oldValue = obj[data.tag]\r\n                        let newValue = null\r\n                        if (parseInt(oldValue) !== 0) {\r\n                            newValue = 0\r\n                        } else {\r\n                            newValue = 1\r\n                        }\r\n                        VariableSystem.COMMUNICATION_ACE_SOCKET[parseInt(data.idDevice)].write(`write|${data.tag}|${newValue}`);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (data.mode == 1) {\r\n                VariableSystem.COMMUNICATION_ACE_SOCKET[parseInt(data.idDevice)].write(`write|${data.tag}|1`);\r\n            }\r\n            if (data.mode == 0) {\r\n                VariableSystem.COMMUNICATION_ACE_SOCKET[parseInt(data.idDevice)].write(`write|${data.tag}|0`);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Number\r\n    if (data.NameCommand === 'NumberForce' && data.tag.length > 0 && data.typeDevice === 'ACE') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            VariableSystem.COMMUNICATION_ACE_SOCKET[parseInt(data.idDevice)].write(`write|${data.tag}|${data.value}`);\r\n        }\r\n    }\r\n    //String\r\n    if (data.NameCommand === 'StringForce' && data.tag.length > 0 && data.typeDevice === 'ACE') {\r\n        if (checkVariableTypeNumber(data.idDevice)) {\r\n            VariableSystem.COMMUNICATION_ACE_SOCKET[parseInt(data.idDevice)].write(`writeString|${data.tag}|${data.value}`);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    saveLogData, saveAlarmData, setLogServer,\r\n    ReadWordOfPlcToByte, StringToAscii, ReadBitOfPLC, ReadBitOfPLCSiemens, ReadWordOfPLC, ReadDWordOfPLCSiemens,\r\n    ReadDWordOfPLC, ConvertArray2Text, CheckChangeValue, CheckNegativeNumber,\r\n    getRandomInt, saveJsonFile, getJsonFile, saveFeedbackFile,\r\n    convertPosCobot, getIndexCobotWriteMB, ReadStringOfPLC, ReadStringOfPLCModbus, getDateTime,\r\n    saveLog,\r\n    // saveExcel,\r\n    getDate, ReadReal2OfPLC, ReadStringOfPLC_NodeRed, ReadStringFlexible,\r\n    ProcessSocketIO_Fins, ProcessSocketIO_Fins_Flexible,\r\n    ProcessSocketIO_Modbus, ProcessSocketIO_Modbus_Server, ProcessSocketIO_ProfiNet, ProcessSocketIO_System,\r\n    ProcessSocketIO_OPCUA, ProcessSocketIO_ACE\r\n}","var logServer = []\r\nvar oldLogServer = []\r\nvar currentUser = '';\r\nvar logs = []\r\n\r\nvar refreshData3D = true\r\nvar refreshDataPercent = true;\r\nvar refreshDataElement = true;\r\nvar refreshDataElementWord = true;\r\nvar refreshDataBitAdjust = true;\r\nvar refreshDataBit = true;\r\nvar refreshDataMap = true;\r\nvar refreshDataBitDisplay = true;\r\nvar refreshDataWordAdjust = true;\r\nvar refreshDataWordDisplay = true;\r\nvar refreshDataNumber = true;\r\nvar refreshDataDWordAdjust = true;\r\nvar refreshDataDWordDisplay = true;\r\nvar refreshDataRealDisplay = true;\r\nvar refreshDataImage = true;\r\nvar refreshDataLabel = true;\r\nvar refreshDataString = true;\r\nvar refreshDataMemonic = true;\r\nvar refreshDataLine = true;\r\nvar refreshDataPoint = true;\r\nvar refreshDataPointPickPlace = true;\r\nvar refreshDataPanel = true;\r\nvar refreshDataCameraStream = true;\r\nvar refreshDataViewImage = true;\r\nvar refreshDataGridView = true;\r\nvar refreshDataDateTimePicker = true;\r\nvar refreshDataChart = true;\r\nvar refreshDataProjectCall = true;\r\nvar refreshDataPalletizer = true;\r\nvar refreshDataPalletizerProduct = true;\r\nvar refreshDataTextField = true;\r\nvar refreshDataTextFieldInput = true;\r\nvar refreshDataPosCobot = true;\r\nvar refreshDataSubScreenImageLibrary = true;\r\nvar refreshDataBitDisplayImageLibrary = true;\r\nvar refreshDataBitAdjustImageLibrary = true;\r\nvar refreshDataMapImageLibrary = true;\r\nvar refreshDataElementImageLibrary = true;\r\nvar refreshDataGroupControl = true;\r\nvar refreshDataUser = true;\r\nvar refreshDataProduct = true;\r\nvar refreshDataSampleRoute = true;\r\nvar refreshDataFormularProject = true;\r\nvar refreshDataScaleProject = true;\r\nvar refreshDataGoal = true;\r\nvar refreshDataSearchBox = true;\r\nvar refreshDataSearchBoxList = true;\r\nvar refreshDataReportScaleProject = true;\r\nvar refreshDataReportScaleProjectTonKho = true;\r\nvar refreshDataProjectNanoenvi = true;\r\nvar refreshDataProjectStampingMachine = true;\r\nvar refreshDataJoystick = true;\r\nvar refreshDataIconImageLibrary = true\r\nvar refreshDataImageBackgroundImageLibrary = true\r\nvar refreshDataDesign = true\r\nvar refreshDataDesignTable=true\r\nvar refreshDataPopup = true\r\nvar refreshMemonic = true;\r\nvar refreshDataDesignImageLibrary = true\r\nvar refreshDataPopupImageLibrary = true\r\nvar refreshDataBitImageLibrary = true\r\n\r\nvar refreshLogData = true;\r\n\r\nvar haveChangeElement = false;\r\nvar haveChangeBit = false;\r\nvar haveChangeBitAdjust = false;\r\nvar haveChangeMap = false;\r\nvar haveChangeBitDisplay = false;\r\nvar haveChangeWordAdjust = false;\r\nvar haveChangeWordDisplay = false;\r\nvar haveChangeNumber = false;\r\nvar haveChangeDWordAdjust = false;\r\nvar haveChangeDWordDisplay = false;\r\nvar haveChangeRealDisplay = false;\r\nvar haveChangeTextField = false;\r\nvar haveChangeTextFieldInput = false;\r\nvar haveChangeString = false;\r\nvar haveChangePercent = false;\r\nvar haveChangeValueRotate = false;\r\nvar haveChangeJoystick = true;\r\n\r\nvar haveChangeMemonic = false;\r\n\r\nvar haveChangeArrElement = new Array(20).fill(true);\r\nvar haveChangeArrBit = new Array(20).fill(true);\r\nvar haveChangeArrBitAdjust = new Array(20).fill(true);\r\nvar haveChangeArrBitDisplay_SetupAlarm = new Array(20).fill(true);\r\nvar haveChangeArrBitDisplay = new Array(20).fill(true);\r\nvar haveChangeArrWordAdjust = new Array(20).fill(true);\r\nvar haveChangeArrWordDisplay = new Array(20).fill(true);\r\nvar haveChangeArrNumber = new Array(20).fill(true);\r\nvar haveChangeArrGauge = new Array(20).fill(true);\r\nvar haveChangeArrProgressBar = new Array(20).fill(true);\r\nvar haveChangeArrSlider = new Array(20).fill(true);\r\nvar haveChangeArrDWordAdjust = new Array(20).fill(true);\r\nvar haveChangeArrDWordDisplay = new Array(20).fill(true);\r\nvar haveChangeArrRealDisplay = new Array(20).fill(true);\r\nvar haveChangeArrString = new Array(20).fill(true);\r\nvar haveChangeArrTextField = new Array(20).fill(true);\r\nvar haveChangeArrTextFieldInput = new Array(20).fill(true);\r\n\r\nvar Modbus_Client_InputRegister = [];\r\nvar Modbus_Client_HoldingRegister = [];\r\nvar Modbus_Client_Coil = [];\r\nvar Modbus_Client_DiscreteInput = [];\r\nvar Communication_OPC_Items = [];\r\nvar Communication_ACE_Items = [];\r\nvar Communication_Profinet_Items = [];\r\nvar Communication_Profinet_Items_Number = [];\r\nvar Communication_Profinet_Items_Bit = [];\r\nvar Communication_Profinet_Items_String = [];\r\nvar Communication_Profinet_Items_Number_Popup = [];\r\nvar Communication_Profinet_Items_Bit_Popup = [];\r\nvar Communication_Profinet_Items_String_Popup = [];\r\nvar Communication_Profinet_Items_Gauge = [];\r\nvar Communication_Profinet_Items_ProgressBar = [];\r\nvar Communication_Profinet_Items_Slider = [];\r\nvar Communication_Profinet_Raw_Result = [];\r\n\r\nvar Temp_ProfiNet_Items_Number=[]\r\nvar Temp_ProfiNet_Items_Bit=[]\r\nvar Communication_PLC_Number_Address = [];\r\nvar Communication_PLC_Word_Address = [];\r\nvar Communication_PLC_Bit_Address = [];\r\nvar Communication_PLC_Bit_Address_String = [];\r\nvar Communication_PLC_String_Start_Address=[]\r\nvar Communication_PLC_String_Length=[]\r\n//////////////////////////////////////////////////////////////////MODBUS\r\nvar StoreModbusServerReg = new Array(100).fill(null).map(() => []);\r\nvar StoreModbusServerBit = new Array(100).fill(null).map(() => []);\r\nvar Element = new Array(100).fill(null).map(() => []);\r\nvar OldElement = new Array(100).fill(null).map(() => []);\r\nvar Map = [];\r\nvar Bit = new Array(100).fill(null).map(() => []);\r\nvar OldBit = new Array(100).fill(null).map(() => []);\r\nvar BitDisplay = new Array(100).fill(null).map(() => []);\r\nvar OldBitDisplay = new Array(100).fill(null).map(() => []);\r\nvar BitAdjust = new Array(100).fill(null).map(() => []);\r\nvar OldBitAdjust = new Array(100).fill(null).map(() => []);\r\nvar WordDisplay = new Array(100).fill(null).map(() => []);\r\nvar Number = new Array(100).fill(null).map(() => []);\r\nvar OldWordDisplay = new Array(100).fill(null).map(() => []);\r\nvar OldNumber = new Array(100).fill(null).map(() => []);\r\nvar WordAdjust = new Array(100).fill(null).map(() => []);\r\nvar OldWordAdjust = new Array(100).fill(null).map(() => []);\r\nvar DWordDisplay = new Array(100).fill(null).map(() => []);\r\nvar DWord = new Array(100).fill(null).map(() => []);\r\nvar OldDWord = new Array(100).fill(null).map(() => []);\r\nvar Word = new Array(100).fill(null).map(() => []);\r\nvar OldWord = new Array(100).fill(null).map(() => []);\r\nvar WordTag = [];\r\nvar DWordTag = [];\r\nvar OldDWordDisplay = new Array(100).fill(null).map(() => []);\r\nvar RealDisplay = new Array(100).fill(null).map(() => []);\r\nvar OldRealDisplay = new Array(100).fill(null).map(() => []);\r\nvar DWordAdjust = new Array(100).fill(null).map(() => []);\r\nvar OldDWordAdjust = new Array(100).fill(null).map(() => []);\r\nvar TextField = new Array(100).fill(null).map(() => []);\r\nvar OldTextField = new Array(100).fill(null).map(() => []);\r\nvar TextFieldInput = new Array(100).fill(null).map(() => []);\r\nvar OldTextFieldInput = new Array(100).fill(null).map(() => []);\r\nvar WritePosCobot = [];\r\nvar WordBitAdjust = [];\r\nvar OldWordBitAdjust = [];\r\nvar ListString = new Array(100).fill(null).map(() => []);\r\nvar ListUserPass = [];\r\nvar ResultString = [];\r\nvar OldListString = new Array(100).fill(null).map(() => []);\r\nvar Percent = [];\r\nvar OldPercent = [];\r\nvar ValueRotate = [];\r\nvar OldValueRotate = [];\r\nvar ComPC = []\r\nvar ListTagBit=[]\r\nvar ListTagNumber=[]\r\nvar ListTagString=[]\r\n\r\nvar IndexSocketInputSignal = 2;\r\nvar IndexSocketBitDisplay = 3;\r\nvar IndexSocketBitAdjust = 4;\r\nvar IndexSocketWordDisplay = 5;\r\nvar IndexSocketWordAdjust = 6;\r\nvar IndexSocketDWordDisplay = 7;\r\nvar IndexSocketDWordAdjust = 8;\r\n\r\nvar CheckBitDisplay = \"\";\r\nvar CheckBitAdjust = \"\";\r\nvar CheckWordDisplay = \"\";\r\nvar CheckWordAdjust = \"\";\r\nvar CheckDWordDisplay = \"\";\r\nvar CheckDWordAdjust = \"\";\r\n\r\nvar resultPercent = [];\r\nvar resultBit = [];\r\nvar resultBitDisplay = [];\r\nvar resultBitAdjust = [];\r\nvar resultWordDisplay = [];\r\nvar resultNumber = [];\r\nvar resultWordAdjust = [];\r\nvar resultDWordDisplay = [];\r\nvar resultRealDisplay = [];\r\nvar resultDWordAdjust = [];\r\nvar resultPanel = [];\r\nvar resultCameraStream = [];\r\nvar resultViewImage = [];\r\nvar resultGridView = [];\r\nvar resultDateTimePicker = [];\r\nvar resultChart = [];\r\nvar resultProjectCall = [];\r\nvar resultPalletizer = [];\r\nvar resultPalletizerProduct = [];\r\nvar resultlabel = [];\r\nvar resultline = [];\r\nvar resultElement = [];\r\nvar resultElementWord = [];\r\nvar resultTextField = [];\r\nvar resultTextFieldInput = [];\r\nvar resultcustomeroperator;\r\nvar refreshdata;\r\nvar CustomerOperator;\r\nvar resultPosCobot = []\r\nvar resultImage = []\r\nvar resultBitImageLibrary = []\r\nvar resultBitDisplayImageLibrary = []\r\nvar resultSubScreenImageLibrary = []\r\nvar resultBitAdjustImageLibrary = []\r\nvar resultIconImageLibrary = []\r\nvar resultImageBackgroundImageLibrary = []\r\nvar resultMapImageLibrary = []\r\nvar resultElementImageLibrary = []\r\nvar resultGroupControl = []\r\nvar resultUser = []\r\nvar resultProduct = []\r\nvar resultSampleRoute = []\r\nvar resultFormularProject = []\r\nvar resultScaleProject = []\r\nvar resultFormularProjectConvertType = []\r\nvar resultGoal = []\r\nvar resultSearchBox = []\r\nvar resultSearchBoxList = []\r\nvar resultReportScaleProject = []\r\nvar resultReportScaleProjectTonKho = []\r\nvar resultProjectNanoenvi1 = []\r\nvar resultProjectNanoenvi2 = []\r\nvar resultProjectNanoenvi3 = []\r\nvar resultProjectNanoenvi4 = []\r\nvar resultProjectNanoenvi = []\r\nvar resultStampingMachineStartTime = []\r\nvar storeListString = []\r\nvar resultFlow = []\r\nvar resultJoystick = []\r\nvar resultDesign = []\r\nvar resultDesignTable = []\r\nvar resultPopup = []\r\n\r\n//PALLETIZER\r\nvar namePallet = ''\r\n//////////////////////////////////////////////////////////////////OMRON\r\nvar ValueCommunicationPLC = [];\r\n\r\nvar LoadProductsToPLC = false;\r\nvar xlData;\r\nvar xlData2;\r\nvar StoreBoxPalletizer = [];\r\nvar Plc_Connect_Status = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nvar Timer_Check_Connect_Status = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3];\r\n\r\n//HungKhang\r\nvar StoragePallet = []\r\nvar refreshStoragePallet = true\r\n\r\nvar StoragePallet2 = []\r\nvar refreshStoragePallet2 = true\r\n\r\nvar StoragePalletManual = []\r\nvar refreshStoragePalletManual = true\r\n\r\n//Weinteck\r\nvar refreshScreen_Label = true\r\nvar resultProjectScreen_Label = []\r\n\r\nvar refreshScreen_Panel = true\r\nvar resultProjectScreen_Panel = []\r\n\r\nvar refreshScreen_CameraStream = true\r\nvar resultProjectScreen_CameraStream = []\r\n\r\nvar refreshScreen_Element = true\r\nvar resultProjectScreen_Element = []\r\n\r\nvar refreshScreen_BitDisplay = true\r\nvar resultProjectScreen_BitDisplay = []\r\n\r\nvar refreshScreen_BitAdjust = true\r\nvar resultProjectScreen_BitAdjust = []\r\n\r\nvar refreshScreen_WordDisplay = true\r\nvar resultProjectScreen_WordDisplay = []\r\n\r\nvar refreshScreen_WordAdjust = true\r\nvar resultProjectScreen_WordAdjust = []\r\n\r\nvar refreshScreen_DWordDisplay = true\r\nvar resultProjectScreen_DWordDisplay = []\r\n\r\nvar refreshScreen_DWordAdjust = true\r\nvar resultProjectScreen_DWordAdjust = []\r\n\r\nvar refreshScreen_Line = true\r\nvar resultProjectScreen_Line = []\r\n\r\nvar refreshScreen_String = true\r\nvar resultProjectScreen_String = []\r\n\r\nvar refreshScreen_TextFieldInput = true\r\nvar resultProjectScreen_TextFieldInput = []\r\n\r\nvar refreshSetupElement = true\r\nvar resultSetupElement = []\r\n\r\nvar refreshDataSetupAlarm = true\r\nvar resultSetupAlarm = []\r\nvar resultSetupAlarmTable = []\r\nvar resultSetupAlarmTable_BitDisplay = []\r\nvar resultSetupAlarmTable_BitAdjust = []\r\n\r\nvar resultMemonic = []\r\n\r\nvar clientMB, clientMB_Writting = false;\r\nvar turnOff = 0\r\nvar result3D = []\r\nmodule.exports = {\r\n    ListTagBit,ListTagNumber,ListTagString,\r\n    turnOff, logs,\r\n    Word,OldWord,DWord,OldDWord,\r\n    logServer, oldLogServer, refreshLogData,\r\n    Plc_Connect_Status, Timer_Check_Connect_Status,\r\n    namePallet,\r\n    currentUser,\r\n    ValueCommunicationPLC, ListUserPass,\r\n    WritePosCobot, resultImage, refreshDataSubScreenImageLibrary, refreshDataBitDisplayImageLibrary, refreshDataBitAdjustImageLibrary, resultBitImageLibrary, resultBitDisplayImageLibrary, resultBitAdjustImageLibrary,\r\n    refreshDataMapImageLibrary,\r\n    resultSubScreenImageLibrary, resultMapImageLibrary, refreshDataElementImageLibrary, resultElementImageLibrary,\r\n    refreshDataElement, refreshDataElementWord, refreshDataBitAdjust, refreshDataBit, refreshDataBitDisplay, refreshDataMap, refreshDataWordAdjust, refreshDataWordDisplay, refreshDataNumber, refreshDataDWordAdjust, refreshDataDWordDisplay,\r\n    refreshDataImage, refreshDataLabel, refreshDataString, refreshDataMemonic, refreshDataLine, refreshDataPoint, refreshDataPointPickPlace, refreshDataPanel, refreshDataCameraStream, refreshDataViewImage, refreshDataGridView, refreshDataDateTimePicker, refreshDataChart, refreshDataProjectCall, refreshDataPalletizer,\r\n    refreshDataPalletizerProduct, refreshDataTextField, refreshDataTextFieldInput,\r\n    refreshDataGroupControl, refreshDataRealDisplay, refreshDataJoystick,\r\n\r\n    haveChangeElement, haveChangeBitAdjust, haveChangeBit, haveChangeBitDisplay, haveChangeMap, haveChangeWordAdjust, haveChangeWordDisplay, haveChangeNumber, haveChangeDWordAdjust, haveChangeDWordDisplay, haveChangeTextField, haveChangeTextFieldInput,\r\n    haveChangeRealDisplay, haveChangeJoystick,\r\n\r\n    Modbus_Client_HoldingRegister, Modbus_Client_InputRegister,\r\n    Modbus_Client_Coil, Modbus_Client_DiscreteInput,\r\n    Communication_OPC_Items, Communication_PLC_Number_Address, Communication_ACE_Items,\r\n    Communication_PLC_Word_Address, Communication_PLC_Bit_Address, Communication_PLC_Bit_Address_String,\r\n    Communication_Profinet_Items,\r\n    Communication_Profinet_Items_Number,\r\n    Communication_Profinet_Items_Bit,\r\n    Communication_Profinet_Items_String,\r\n    Communication_Profinet_Items_Number_Popup,\r\n    Communication_Profinet_Items_Bit_Popup,\r\n    Communication_Profinet_Items_String_Popup,\r\n    Communication_Profinet_Items_Gauge,\r\n    Communication_Profinet_Items_ProgressBar,\r\n    Communication_Profinet_Items_Slider,\r\n    Communication_Profinet_Raw_Result,\r\n    Temp_ProfiNet_Items_Number,Temp_ProfiNet_Items_Bit,\r\n    Communication_PLC_String_Start_Address,\r\n    Communication_PLC_String_Length,\r\n\r\n    StoreModbusServerReg, StoreModbusServerBit,\r\n    refreshDataPercent, resultPercent, Percent, OldPercent, haveChangePercent,\r\n    Element, OldElement,\r\n    Map, BitDisplay, BitAdjust, Bit, OldBit, WordDisplay, Number, WordAdjust, DWordDisplay, Word, DWord, DWordAdjust, WordTag, DWordTag,\r\n    OldBitDisplay, OldBitAdjust, OldWordDisplay, OldNumber, OldWordAdjust, OldDWordDisplay, OldDWordAdjust,\r\n    TextField, OldTextField, TextFieldInput, OldTextFieldInput, WordBitAdjust, OldWordBitAdjust,\r\n    RealDisplay, OldRealDisplay,\r\n\r\n    IndexSocketInputSignal, IndexSocketBitAdjust, IndexSocketBitDisplay, IndexSocketWordDisplay, IndexSocketWordAdjust, IndexSocketDWordDisplay, IndexSocketDWordAdjust,\r\n    CheckBitDisplay, CheckBitAdjust, CheckWordDisplay, CheckWordAdjust, CheckDWordDisplay, CheckDWordAdjust,\r\n    resultlabel, resultline, resultElement, resultElementWord, resultBitDisplay, resultBitAdjust, resultBit, resultWordDisplay, resultNumber, resultWordAdjust, resultDWordDisplay, resultDWordAdjust, resultPanel, resultCameraStream, resultViewImage, resultGridView, resultDateTimePicker, resultChart, resultProjectCall,\r\n    resultPalletizer, resultPalletizerProduct,\r\n    resultTextField, resultTextFieldInput,\r\n    resultRealDisplay,\r\n    resultcustomeroperator, refreshdata, CustomerOperator,\r\n    resultFlow, resultJoystick, resultDesign, resultDesignTable, resultPopup,\r\n\r\n    refreshDataPosCobot, resultPosCobot, resultGroupControl,\r\n    ListString, OldListString, haveChangeString, ResultString, storeListString,\r\n\r\n    refreshData3D, refreshDataDesign, refreshDataDesignTable, refreshDataDesignImageLibrary, refreshDataPopup, refreshDataPopupImageLibrary,\r\n    refreshDataProduct, resultProduct, refreshDataUser, resultUser, LoadProductsToPLC,\r\n    refreshDataGoal, resultGoal, refreshDataSampleRoute, resultSampleRoute,\r\n    refreshDataFormularProject, resultFormularProject, resultFormularProjectConvertType,\r\n    xlData, xlData2,\r\n    refreshDataScaleProject, resultScaleProject,\r\n    refreshDataSearchBox, resultSearchBox,\r\n    refreshDataSearchBoxList, resultSearchBoxList,\r\n    refreshDataReportScaleProject, resultReportScaleProject,\r\n    refreshDataReportScaleProjectTonKho, resultReportScaleProjectTonKho,\r\n    refreshDataProjectNanoenvi, resultProjectNanoenvi, resultProjectNanoenvi1, resultProjectNanoenvi2, resultProjectNanoenvi3, resultProjectNanoenvi4,\r\n    refreshDataProjectStampingMachine, resultStampingMachineStartTime,\r\n    ValueRotate, OldValueRotate, haveChangeValueRotate, StoreBoxPalletizer,\r\n    StoragePallet, refreshStoragePallet,\r\n    StoragePallet2, refreshStoragePallet2,\r\n    StoragePalletManual, refreshStoragePalletManual,\r\n    refreshScreen_Label, resultProjectScreen_Label,\r\n    refreshScreen_Panel, resultProjectScreen_Panel,\r\n    refreshScreen_CameraStream, resultProjectScreen_CameraStream,\r\n    refreshScreen_Element, resultProjectScreen_Element,\r\n    refreshScreen_BitDisplay, resultProjectScreen_BitDisplay,\r\n    refreshScreen_BitAdjust, resultProjectScreen_BitAdjust,\r\n    refreshScreen_WordDisplay, resultProjectScreen_WordDisplay,\r\n    refreshScreen_WordAdjust, resultProjectScreen_WordAdjust,\r\n    refreshScreen_DWordDisplay, resultProjectScreen_DWordDisplay,\r\n    refreshScreen_DWordAdjust, resultProjectScreen_DWordAdjust,\r\n    refreshScreen_String, resultProjectScreen_String,\r\n    refreshScreen_TextFieldInput, resultProjectScreen_TextFieldInput,\r\n    refreshScreen_Line, resultProjectScreen_Line,\r\n    refreshSetupElement, resultSetupElement,\r\n    refreshDataSetupAlarm, resultSetupAlarm, resultSetupAlarmTable, resultSetupAlarmTable_BitDisplay, resultSetupAlarmTable_BitAdjust,\r\n    refreshDataBitImageLibrary,\r\n\r\n    haveChangeArrBit, haveChangeArrBitAdjust,\r\n    haveChangeArrBitDisplay, haveChangeArrBitDisplay_SetupAlarm,\r\n    haveChangeArrWordAdjust, haveChangeArrWordDisplay, haveChangeArrNumber, haveChangeArrGauge, haveChangeArrProgressBar, haveChangeArrSlider,\r\n    haveChangeArrDWordAdjust, haveChangeArrDWordDisplay,\r\n    haveChangeArrElement, haveChangeArrString, haveChangeArrTextField, haveChangeArrTextFieldInput,\r\n    haveChangeArrRealDisplay,\r\n    clientMB, clientMB_Writting,\r\n    ComPC,\r\n\r\n    refreshMemonic, haveChangeMemonic, resultMemonic,\r\n    resultIconImageLibrary, refreshDataIconImageLibrary,\r\n    resultImageBackgroundImageLibrary, refreshDataImageBackgroundImageLibrary,\r\n    result3D\r\n}","\r\nvar active = false\r\nvar LocalDB = 'null'\r\nvar PathLocalDB;\r\nvar IO;\r\nvar ProjectPalletizer = false\r\nvar COMMUNICATION_PLC_OMRON = [];\r\nvar COMMUNICATION_PLC_MODBUS = [];\r\nvar COMMUNICATION_ACE_SOCKET = [];\r\nvar COMMUNICATION_MOBILE_ROBOT = [];\r\nvar COMMUNICATION_MOBILE_ROBOT_TIMER = [];\r\nvar COMMUNICATION_OPCUA = [];\r\nvar COMMUNICATION_SIEMENS = [];\r\nvar PositionMobileRobot = [{}, {}, {}, {}, {}]\r\nvar OldPositionMobileRobot = []\r\n\r\nvar COMMUNICATION_PLC_SIEMENS = []\r\nvar COMMUNICATION_VNC = []\r\nvar COMMUNICATION_VNC_INITIAL_DATA = []\r\nvar COMMUNICATION_SERVER_TYPE = [];\r\n\r\nvar TimeDelayWriteWordBitAdjust = [];\r\n\r\nvar PLC_Code_BitAdjust = [];\r\nvar PLC_Code_WordAdjust = [];\r\nvar PLC_Code_DWordAdjust = [];\r\n\r\nvar PLC_WordStartElement = []\r\nvar PLC_LengthOfWordElement = []\r\n\r\nvar PLC_WordStartBitDisplay = []\r\nvar PLC_LengthOfWordBitDisplay = []\r\n\r\nvar PLC_BitStartBitDisplay = []\r\nvar PLC_LengthOfBitBitDisplay = []\r\n\r\nvar PLC_WordStartBitAdjust = []\r\nvar PLC_LengthOfWordBitAdjust = []\r\n\r\nvar PLC_BitStartBitAdjust = []\r\nvar PLC_LengthOfBitBitAdjust = []\r\n\r\nvar PLC_WordStartWordDisplay = []\r\nvar PLC_LengthOfWordWordDisplay = []\r\n\r\nvar PLC_WordStartWordAdjust = []\r\nvar PLC_LengthOfWordWordAdjust = []\r\n\r\nvar PLC_WordStartDWordDisplay = []\r\nvar PLC_LengthOfWordDWordDisplay = []\r\n\r\nvar PLC_WordStartDWordAdjust = []\r\nvar PLC_LengthOfWordDWordAdjust = []\r\n\r\nvar PLC_Length_ReadWrite = []\r\n\r\nvar PLC_WriteUnSafe = []\r\nvar PLC_WordStartRotate = []\r\nvar PLC_LengthOfWordRotate = []\r\nvar PLC_WordStartComPC = []\r\nvar PLC_LengthOfWordComPC = []\r\nvar PLC_IntervalWriteData = []\r\nvar PLC_Enable_String = []\r\nvar PLC_WordStartString = []\r\nvar PLC_LengthOfWordString = []\r\nvar PLC_NumberWordInString = []\r\n\r\nvar RefreshData = false\r\n\r\nmodule.exports = {\r\n    PositionMobileRobot, OldPositionMobileRobot,\r\n    active,\r\n    IO, PathLocalDB, LocalDB,\r\n    PLC_Code_BitAdjust, PLC_Code_WordAdjust, PLC_Code_DWordAdjust,\r\n    ProjectPalletizer, COMMUNICATION_SERVER_TYPE,\r\n    COMMUNICATION_OPCUA, COMMUNICATION_ACE_SOCKET,COMMUNICATION_SIEMENS,\r\n    COMMUNICATION_PLC_OMRON, COMMUNICATION_MOBILE_ROBOT, COMMUNICATION_MOBILE_ROBOT_TIMER, COMMUNICATION_PLC_MODBUS,\r\n    COMMUNICATION_PLC_SIEMENS, COMMUNICATION_VNC, COMMUNICATION_VNC_INITIAL_DATA,\r\n    TimeDelayWriteWordBitAdjust,\r\n    PLC_WordStartElement, PLC_LengthOfWordElement,\r\n    PLC_WordStartBitDisplay, PLC_LengthOfWordBitDisplay,\r\n    PLC_WordStartBitAdjust, PLC_LengthOfWordBitAdjust,\r\n\r\n    PLC_BitStartBitDisplay, PLC_LengthOfBitBitDisplay,\r\n    PLC_BitStartBitAdjust, PLC_LengthOfBitBitAdjust,\r\n\r\n    PLC_WordStartWordDisplay, PLC_LengthOfWordWordDisplay,\r\n    PLC_WordStartWordAdjust, PLC_LengthOfWordWordAdjust,\r\n    PLC_WordStartDWordDisplay, PLC_LengthOfWordDWordDisplay,\r\n    PLC_WordStartDWordAdjust, PLC_LengthOfWordDWordAdjust,\r\n    PLC_Length_ReadWrite,\r\n\r\n    PLC_WriteUnSafe, PLC_IntervalWriteData,\r\n    PLC_WordStartRotate, PLC_LengthOfWordRotate,\r\n    PLC_WordStartComPC, PLC_LengthOfWordComPC,\r\n    PLC_Enable_String, PLC_WordStartString, PLC_LengthOfWordString, PLC_NumberWordInString,\r\n    RefreshData\r\n}","import { Controller, Get } from '@nestjs/common';\r\nimport { SocketGateway } from './socket_io/socket_io.gateway';\r\nimport { ScadaWordDisplayRefreshService } from './scada_word-display/scada_word-display-refresh.service';\r\nimport { ScadaNumberRefreshService } from './scada_number/scada_number-refresh.service';\r\nimport { ScadaGaugeRefreshService } from './scada_gauge/scada_gauge-refresh.service';\r\nimport { ScadaProgressBarRefreshService } from './scada_progress_bar/scada_progress_bar-refresh.service';\r\nimport { ScadaSliderRefreshService } from './scada_slider/scada_slider-refresh.service';\r\nimport { ScadaElementRefreshService } from './scada_element/scada_element-refresh.service';\r\nimport { ScadaBitAdjustRefreshService } from './scada_bit-adjust/scada_bit-adjust-refresh.service';\r\nimport { ScadaBitRefreshService } from './scada_bit/scada_bit-refresh.service';\r\nimport { ScadaBitDisplayRefreshService } from './scada_bit-display/scada_bit-display-refresh.service';\r\nimport { ScadaDWordDisplayRefreshService } from './scada_dword-display/scada_dword-display-refresh.service';\r\nimport { ScadaDWordAdjustRefreshService } from './scada_dword-adjust/scada_dword-adjust-refresh.service';\r\nimport { ScadaStringRefreshService } from './scada_string/scada_string-refresh.service';\r\nimport { ScadaTextFieldRefreshService } from './scada_text-field/scada_text-field-refresh.service';\r\nimport { ScadaWordAdjustRefreshService } from './scada_word-adjust/scada_word-adjust-refresh.service';\r\nimport { ScadaSetupAlarmRefreshService } from './scada_setup-alarm/scada_setup-alarm-refresh.service';\r\nconst Variable = require('../Variable');\r\nconst VariableSystem = require('../VariableSystem');\r\nconst LS_Admin = require('../LS_Admin.js');\r\n@Controller()\r\nexport class AppController {\r\n  constructor(\r\n    private readonly socketGateway: SocketGateway,\r\n    private readonly scadaWordDisplayRefreshService: ScadaWordDisplayRefreshService,\r\n    private readonly scadaNumberRefreshService: ScadaNumberRefreshService,\r\n    private readonly scadaGaugeRefreshService: ScadaGaugeRefreshService,\r\n    private readonly scadaProgressBarRefreshService: ScadaProgressBarRefreshService,\r\n    private readonly scadaSliderRefreshService: ScadaSliderRefreshService,\r\n    private readonly scadaWordAdjustRefreshService: ScadaWordAdjustRefreshService,\r\n    private readonly scadaDWordDisplayRefreshService: ScadaDWordDisplayRefreshService,\r\n    private readonly scadaElementRefreshService: ScadaElementRefreshService,\r\n    private readonly scadaBitAdjustRefreshService: ScadaBitAdjustRefreshService,\r\n    private readonly scadaBitRefreshService: ScadaBitRefreshService,\r\n    private readonly scadaBitDisplayRefreshService: ScadaBitDisplayRefreshService,\r\n    private readonly scadaDWordAdjustRefreshService: ScadaDWordAdjustRefreshService,\r\n    private readonly scadaStringRefreshService: ScadaStringRefreshService,\r\n    private readonly scadaTextFieldRefreshService: ScadaTextFieldRefreshService,\r\n    private readonly scadaSetupAlarmRefreshService: ScadaSetupAlarmRefreshService,\r\n  ) {\r\n    setInterval(() => {\r\n      if (Variable && LS_Admin.active == true) {\r\n        for (let i = 0; i < Variable.Element.length; i++) {\r\n          if (JSON.stringify(Variable.Element[i]) !== JSON.stringify(Variable.OldElement[i])) {\r\n            Variable.OldElement[i] = Variable.Element[i].slice();\r\n            Variable.haveChangeArrElement[i] = true;\r\n            this.scadaElementRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.Bit.length; i++) {\r\n          if (JSON.stringify(Variable.Bit[i]) !== JSON.stringify(Variable.OldBit[i])) {\r\n            Variable.OldBit[i] = Variable.Bit[i].slice();\r\n            Variable.haveChangeArrBit[i] = true;\r\n            this.scadaBitRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.BitAdjust.length; i++) {\r\n          if (JSON.stringify(Variable.BitAdjust[i]) !== JSON.stringify(Variable.OldBitAdjust[i])) {\r\n            Variable.OldBitAdjust[i] = Variable.BitAdjust[i].slice();\r\n            Variable.haveChangeArrBitAdjust[i] = true;\r\n            this.scadaBitAdjustRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.BitDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.BitDisplay[i]) !== JSON.stringify(Variable.OldBitDisplay[i])) {\r\n            Variable.OldBitDisplay[i] = Variable.BitDisplay[i].slice();\r\n            Variable.haveChangeArrBitDisplay[i] = true;\r\n            this.scadaBitDisplayRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.Word.length; i++) {\r\n          if (JSON.stringify(Variable.Word[i]) !== JSON.stringify(Variable.OldWord[i])) {\r\n            Variable.OldWord[i] = Variable.Word[i].slice();\r\n            Variable.haveChangeArrNumber[i] = true;\r\n            this.scadaNumberRefreshService.refreshData()\r\n            Variable.haveChangeArrProgressBar[i] = true;\r\n            this.scadaProgressBarRefreshService.refreshData()\r\n            Variable.haveChangeArrSlider[i] = true;\r\n            this.scadaSliderRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.WordDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.WordDisplay[i]) !== JSON.stringify(Variable.OldWordDisplay[i])) {\r\n            Variable.OldWordDisplay[i] = Variable.WordDisplay[i].slice();\r\n            Variable.haveChangeArrWordDisplay[i] = true;\r\n            this.scadaWordDisplayRefreshService.refreshData()\r\n            Variable.haveChangeArrNumber[i] = true;\r\n            this.scadaNumberRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.Number.length; i++) {\r\n          if (JSON.stringify(Variable.Number[i]) !== JSON.stringify(Variable.OldNumber[i])) {\r\n            Variable.OldNumber[i] = Variable.Number[i].slice();\r\n            Variable.haveChangeArrNumber[i] = true;\r\n            this.scadaNumberRefreshService.refreshData()\r\n            Variable.haveChangeArrGauge[i] = true;\r\n            this.scadaGaugeRefreshService.refreshData()\r\n            Variable.haveChangeArrProgressBar[i] = true;\r\n            this.scadaProgressBarRefreshService.refreshData()\r\n            Variable.haveChangeArrSlider[i] = true;\r\n            this.scadaSliderRefreshService.refreshData()\r\n            Variable.haveChangeArrString[i] = true;\r\n            this.scadaStringRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.WordAdjust.length; i++) {\r\n          if (JSON.stringify(Variable.WordAdjust[i]) !== JSON.stringify(Variable.OldWordAdjust[i])) {\r\n            Variable.OldWordAdjust[i] = Variable.WordAdjust[i].slice();\r\n            Variable.haveChangeArrWordAdjust[i] = true;\r\n            this.scadaWordAdjustRefreshService.refreshData()\r\n            Variable.haveChangeArrNumber[i] = true;\r\n            this.scadaNumberRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.DWord.length; i++) {\r\n          if (JSON.stringify(Variable.DWord[i]) !== JSON.stringify(Variable.OldDWord[i])) {\r\n            Variable.OldDWord[i] = Variable.DWord[i].slice();\r\n            Variable.haveChangeArrNumber[i] = true;\r\n            this.scadaNumberRefreshService.refreshData()\r\n            Variable.haveChangeArrProgressBar[i] = true;\r\n            this.scadaProgressBarRefreshService.refreshData()\r\n            Variable.haveChangeArrSlider[i] = true;\r\n            this.scadaSliderRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.DWordDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.DWordDisplay[i]) !== JSON.stringify(Variable.OldDWordDisplay[i])) {\r\n            Variable.OldDWordDisplay[i] = Variable.DWordDisplay[i].slice();\r\n            Variable.haveChangeArrDWordDisplay[i] = true;\r\n            this.scadaDWordDisplayRefreshService.refreshData()\r\n            Variable.haveChangeArrNumber[i] = true;\r\n            this.scadaNumberRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.DWordAdjust.length; i++) {\r\n          if (JSON.stringify(Variable.DWordAdjust[i]) !== JSON.stringify(Variable.OldDWordAdjust[i])) {\r\n            Variable.OldDWordAdjust[i] = Variable.DWordAdjust[i].slice();\r\n            Variable.haveChangeArrDWordAdjust[i] = true;\r\n            this.scadaDWordAdjustRefreshService.refreshData()\r\n            Variable.haveChangeArrNumber[i] = true;\r\n            this.scadaNumberRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        // if (JSON.stringify(Variable.logServer) !== JSON.stringify(Variable.oldLogServer)) {\r\n        //   Variable.oldLogServer = Variable.logServer.slice();\r\n        //   VariableSystem.IO.sockets.emit('LogServer', Variable.logServer);\r\n        // }\r\n\r\n        for (let i = 0; i < Variable.ListString.length; i++) {\r\n          if (JSON.stringify(Variable.ListString[i]) !== JSON.stringify(Variable.OldListString[i])) {\r\n            Variable.OldListString[i] = Variable.ListString[i].slice();\r\n            Variable.haveChangeArrString[i] = true;\r\n            this.scadaStringRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.RealDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.RealDisplay[i]) !== JSON.stringify(Variable.OldRealDisplay[i])) {\r\n            Variable.OldRealDisplay[i] = Variable.RealDisplay[i].slice();\r\n            Variable.haveChangeArrRealDisplay[i] = true;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.TextField.length; i++) {\r\n          if (JSON.stringify(Variable.TextField[i]) !== JSON.stringify(Variable.OldTextField[i])) {\r\n            Variable.OldTextField[i] = Variable.TextField[i].slice();\r\n            Variable.haveChangeArrTextField[i] = true;\r\n            this.scadaTextFieldRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        if (JSON.stringify(VariableSystem.PositionMobileRobot) !== JSON.stringify(VariableSystem.OldPositionMobileRobot)) {\r\n          VariableSystem.OldPositionMobileRobot = VariableSystem.PositionMobileRobot.slice();\r\n          if (this.socketGateway && this.socketGateway.server) {\r\n            this.socketGateway.server.emit('PositionMobile', VariableSystem.PositionMobileRobot);\r\n          }\r\n        }\r\n      }\r\n    }, 100);\r\n\r\n    setInterval(() => {\r\n      if (this.socketGateway && this.socketGateway.server) {\r\n        this.socketGateway.server.emit('PLC_Connect_Status', Variable.Plc_Connect_Status);\r\n      }\r\n      if (Variable.turnOff == 1) {\r\n        process.exit(0)\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n}\r\n","import { Module, OnModuleInit } from '@nestjs/common';\r\nimport { AppController } from './app.controller';\r\nimport { PostModule } from './post/post.module';\r\nimport { UserModule } from './user/user.module';\r\nimport { NoteModule } from './note/note.module';\r\n// import { ConfigModule } from '@nestjs/config'\r\nimport { SocketGateway } from './socket_io/socket_io.gateway';\r\nimport { SocketIoModule } from './socket_io/socket_io.module';\r\nimport { SystemApiModule } from './system_api/system_api.module';\r\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\r\n\r\nimport { ScadaTotalModule } from './scada_total/scada_total.module';\r\nimport { ScadaLabelModule } from './scada_label/scada_label.module';\r\nimport { ScadaChartModule } from './scada_chart/scada_chart.module';\r\nimport { ScadaUserModule } from './scada_user/scada_user.module';\r\nimport { ScadaPanelModule } from './scada_panel/scada_panel.module';\r\nimport { ScadaCameraStreamModule } from './scada_camera_stream/scada_camera_stream.module';\r\nimport { ScadaViewImageModule } from './scada_viewImage/scada_viewImage.module';\r\nimport { ScadaGridViewModule } from './scada_gridView/scada_gridView.module';\r\nimport { ScadaDateTimePickerModule } from './scada_date-time-picker/scada_dateTimePicker.module';\r\nimport { ScadaSelectModule } from './scada_select/scada_select.module';\r\nimport { ScadaGaugeModule } from './scada_gauge/scada_gauge.module';\r\nimport { ScadaProgressBarModule } from './scada_progress_bar/scada_progress_bar.module';\r\nimport { ScadaSliderModule } from './scada_slider/scada_slider.module';\r\nimport { Scada3DModule } from './scada_3D/scada_3D.module';\r\nimport { ScadaBitAdjustModule } from './scada_bit-adjust/scada_bit-adjust.module';\r\nimport { ScadaBitModule } from './scada_bit/scada_bit.module';\r\nimport { ScadaConnectionModule } from './scada_connection/scada_connection.module';\r\nimport { ScadaNavigateModule } from './scada_navigate/scada_navigate.module';\r\nimport { ScadaPrintModule } from './scada_print/scada_print.module'\r\nimport { ScadaReportModule } from './scada_report/scada_report.module'\r\nimport { ScadaWordAdjustModule } from './scada_word-adjust/scada_word-adjust.module';\r\nimport { ScadaDWordAdjustModule } from './scada_dword-adjust/scada_dword-adjust.module';\r\nimport { ScadaBitDisplayModule } from './scada_bit-display/scada_bit-display.module';\r\nimport { ScadaDesignModule } from './scada_design/scada_design.module';\r\nimport { ScadaDesignTableModule } from './scada_design_table/scada_design_table.module';\r\nimport { ScadaPopupModule } from './scada_popup/scada_popup.module';\r\nimport { ScadaPopupImageLibraryModule } from './scada_popup-image-library/scada_popup-image-library.module';\r\nimport { ScadaWordDisplayModule } from './scada_word-display/scada_word-display.module';\r\nimport { ScadaNumberModule } from './scada_number/scada_number.module';\r\nimport { ScadaDWordDisplayModule } from './scada_dword-display/scada_dword-display.module';\r\nimport { ScadaBitDisplayImageLibraryModule } from './scada_bit-display-image-library/scada_bit-display-image-library.module';\r\nimport { ScadaDesignImageLibraryModule } from './scada_design-image-library/scada_design-image-library.module';\r\nimport { ScadaBitAdjustImageLibraryModule } from './scada_bit-adjust-image-library/scada_bit-adjust-image-library.module';\r\nimport { ScadaBitImageLibraryModule } from './scada_bit-image-library/scada_bit-image-library.module';\r\nimport { ScadaNumberImageLibraryModule } from './scada_number-image-library/scada_number-image-library.module';\r\nimport { ScadaNavigateImageLibraryModule } from './scada_navigate-image-library/scada_navigate-image-library.module';\r\nimport { ScadaElementImageLibraryModule } from './scada_element-image-library/scada_element-image-library.module';\r\nimport { ScadaIconImageLibraryModule } from './scada_icon-image-library/scada_icon-image-library.module';\r\nimport { ScadaBackgroundImageLibraryModule } from './scada_background-image-library/scada_background-image-library.module';\r\nimport { ScadaMapImageLibraryModule } from './scada_map-image-library/scada_map-image-library.module';\r\nimport { ScadaMapModule } from './scada_map/scada_map.module';\r\nimport { ScadaStringModule } from './scada_string/scada_string.module';\r\nimport { ScadaTextFieldModule } from './scada_text-field/scada_text-field.module';\r\nimport { ScadaLineModule } from './scada_line/scada_line.module';\r\nimport { ScadaElementModule } from './scada_element/scada_element.module';\r\nimport { ScadaMemonicModule } from './scada_memonic/scada_memonic.module';\r\nimport { ScadaSetupAlarmModule } from './scada_setup-alarm/scada_setup-alarm.module';\r\n\r\nimport { ScadaWordDisplayRefreshService } from './scada_word-display/scada_word-display-refresh.service';\r\nimport { ScadaElementRefreshService } from './scada_element/scada_element-refresh.service';\r\nimport { ScadaBitAdjustRefreshService } from './scada_bit-adjust/scada_bit-adjust-refresh.service';\r\nimport { ScadaBitDisplayRefreshService } from './scada_bit-display/scada_bit-display-refresh.service';\r\nimport { ScadaDWordDisplayRefreshService } from './scada_dword-display/scada_dword-display-refresh.service';\r\nimport { ScadaDWordAdjustRefreshService } from './scada_dword-adjust/scada_dword-adjust-refresh.service';\r\nimport { ScadaStringRefreshService } from './scada_string/scada_string-refresh.service';\r\nimport { ScadaTextFieldRefreshService } from './scada_text-field/scada_text-field-refresh.service';\r\nimport { ConfigService } from './config/config.service';\r\nimport { MicroserviceClientModule } from './microservice-client/microservice-client.module';\r\nimport { MqttModule } from './mqtt/mqtt.module';\r\nimport { ConfigModule } from './config/config.module';\r\n\r\nimport { typeOrmConfigAsync } from './database/typeorm.config';\r\nimport { ScadaWordAdjustRefreshService } from './scada_word-adjust/scada_word-adjust-refresh.service';\r\nimport { ScadaSetupAlarmRefreshService } from './scada_setup-alarm/scada_setup-alarm-refresh.service';\r\nimport { ScadaNumberRefreshService } from './scada_number/scada_number-refresh.service';\r\nimport { ScadaGaugeRefreshService } from './scada_gauge/scada_gauge-refresh.service';\r\nimport { ScadaProgressBarRefreshService } from './scada_progress_bar/scada_progress_bar-refresh.service';\r\nimport { ScadaSliderRefreshService } from './scada_slider/scada_slider-refresh.service';\r\nimport { ScadaBitRefreshService } from './scada_bit/scada_bit-refresh.service';\r\nimport { SharedModule } from './shared_module/shared.module';\r\n@Module({\r\n  imports: [\r\n    // ConfigModule.forRoot({ isGlobal: true }),\r\n    PostModule,\r\n    // UserModule,\r\n    NoteModule,\r\n    SocketIoModule,\r\n    SystemApiModule,\r\n    ConfigModule,\r\n\r\n    TypeOrmModule.forRootAsync(typeOrmConfigAsync),\r\n\r\n    ScadaLabelModule,\r\n    ScadaChartModule,\r\n\r\n    ScadaUserModule,\r\n\r\n    ScadaPanelModule,\r\n    ScadaCameraStreamModule,\r\n    ScadaViewImageModule,\r\n    ScadaGridViewModule,\r\n    ScadaDateTimePickerModule,\r\n    ScadaSelectModule,\r\n    ScadaGaugeModule,\r\n    ScadaProgressBarModule,\r\n    ScadaSliderModule,\r\n    Scada3DModule,\r\n    ScadaBitModule,\r\n    ScadaConnectionModule,\r\n    ScadaNavigateModule,\r\n    ScadaPrintModule,\r\n    ScadaReportModule,\r\n    ScadaBitAdjustModule,\r\n    ScadaWordAdjustModule,\r\n    ScadaDWordAdjustModule,\r\n\r\n    ScadaDesignModule,\r\n    ScadaDesignTableModule,\r\n    ScadaPopupModule,\r\n    ScadaPopupImageLibraryModule,\r\n    ScadaBitDisplayModule,\r\n    ScadaWordDisplayModule,\r\n    ScadaNumberModule,\r\n    ScadaDWordDisplayModule,\r\n\r\n    ScadaBitDisplayImageLibraryModule,\r\n    ScadaBitAdjustImageLibraryModule,\r\n    ScadaBitImageLibraryModule,\r\n    ScadaNumberImageLibraryModule,\r\n    ScadaNavigateImageLibraryModule,\r\n    ScadaDesignImageLibraryModule,\r\n    ScadaIconImageLibraryModule,\r\n    ScadaBackgroundImageLibraryModule,\r\n    ScadaMapImageLibraryModule,\r\n    ScadaMapModule,\r\n    ScadaStringModule,\r\n    ScadaTextFieldModule,\r\n    ScadaLineModule,\r\n    ScadaElementImageLibraryModule,\r\n    ScadaElementModule,\r\n    ScadaMemonicModule,\r\n    SocketIoModule,\r\n    MicroserviceClientModule,\r\n    MqttModule,\r\n    ScadaSetupAlarmModule,\r\n    ScadaTotalModule,\r\n    SharedModule,\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [\r\n    // ConfigService,\r\n    ScadaWordDisplayRefreshService,\r\n    ScadaNumberRefreshService,\r\n    ScadaGaugeRefreshService,\r\n    ScadaProgressBarRefreshService,\r\n    ScadaSliderRefreshService,\r\n    ScadaWordAdjustRefreshService,\r\n    ScadaElementRefreshService,\r\n    ScadaBitAdjustRefreshService,\r\n    ScadaBitRefreshService,\r\n    ScadaBitDisplayRefreshService,\r\n    ScadaDWordDisplayRefreshService,\r\n    ScadaDWordAdjustRefreshService,\r\n    ScadaStringRefreshService,\r\n    ScadaTextFieldRefreshService,\r\n    ScadaSetupAlarmRefreshService,\r\n  ],\r\n})\r\nexport class AppModule {\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ConfigService } from './config.service';\r\n\r\n@Module({\r\n    providers: [ConfigService],\r\n    exports: [ConfigService]\r\n})\r\nexport class ConfigModule {\r\n\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport * as dotenv from 'dotenv';\r\nimport * as fs from 'fs';\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    private readonly envConfig: Record<string, string>;\r\n\r\n    constructor() {\r\n        const isDevelopmentEnv = process.env.NODE_ENV !== 'production';\r\n\r\n        if (isDevelopmentEnv) {\r\n            const envFilePath = __dirname + '/../../.env';\r\n            const existsPath = fs.existsSync(envFilePath);\r\n\r\n            if (!existsPath) {\r\n                console.log('.env file does not exist');\r\n                process.exit(0);\r\n            }\r\n\r\n            this.envConfig = dotenv.parse(fs.readFileSync(envFilePath));\r\n        } else {\r\n            const envFilePath = __dirname + '/../.env';\r\n            const existsPath = fs.existsSync(envFilePath);\r\n\r\n            if (!existsPath) {\r\n                console.log('.env file does not exist');\r\n                process.exit(0);\r\n            }\r\n\r\n            this.envConfig = dotenv.parse(fs.readFileSync(envFilePath));\r\n        };\r\n    }\r\n\r\n    get(key: string): string {\r\n        return this.envConfig[key];\r\n    }\r\n}\r\n","import { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\r\nimport { ConfigModule } from \"../config/config.module\";\r\nimport { ConfigService } from \"../config/config.service\"; // Update with the correct path\r\n\r\nimport { BackgroundImageLibraryEntity } from \"../scada_background-image-library/scada_background-image-library.entity\";\r\nimport { BitAdjustImageLibraryEntity } from \"../scada_bit-adjust-image-library/scada_bit-adjust-image-library.entity\";\r\nimport { BitImageLibraryEntity } from \"../scada_bit-image-library/scada_bit-image-library.entity\";\r\nimport {NumberImageLibraryEntity} from \"../scada_number-image-library/scada_number-image-library.entity\";\r\nimport { NavigateImageLibraryEntity } from \"../scada_navigate-image-library/scada_navigate-image-library.entity\";\r\nimport { BitAdjustEntity } from \"../scada_bit-adjust/scada_bit-adjust.entity\";\r\nimport { BitEntity } from \"../scada_bit/scada_bit.entity\";\r\nimport { ConnectionEntity} from \"../scada_connection/scada_connection.entity\";\r\nimport { NavigateEntity } from \"../scada_navigate/scada_navigate.entity\";\r\nimport { PrintEntity } from \"../scada_print/scada_print.entity\";\r\nimport { ReportEntity } from \"../scada_report/scada_report.entity\";\r\nimport { BitDisplayImageLibraryEntity } from \"../scada_bit-display-image-library/scada_bit-display-image-library.entity\";\r\nimport { BitDisplayEntity } from \"../scada_bit-display/scada_bit-display.entity\";\r\n\r\nimport { DesignImageLibraryEntity } from \"../scada_design-image-library/scada_design-image-library.entity\";\r\nimport { DesignEntity } from \"../scada_design/scada_design.entity\";\r\nimport {DesignTableEntity} from \"../scada_design_table/scada_design_table.entity\";\r\n\r\nimport { PopupImageLibraryEntity } from \"../scada_popup-image-library/scada_popup-image-library.entity\";\r\nimport { PopupEntity } from \"../scada_popup/scada_popup.entity\";\r\n\r\nimport { DWordAdjustEntity } from \"../scada_dword-adjust/scada_dword-adjust.entity\";\r\nimport { DWordDisplayEntity } from \"../scada_dword-display/scada_dword-display.entity\";\r\nimport { ElementImageLibraryEntity } from \"../scada_element-image-library/scada_element-image-library.entity\";\r\nimport { ElementEntity } from \"../scada_element/scada_element.entity\";\r\nimport { IconImageLibraryEntity } from \"../scada_icon-image-library/scada_icon-image-library.entity\";\r\nimport { LabelEntity } from \"../scada_label/scada_label.entity\";\r\nimport { ChartEntity } from \"../scada_chart/scada_chart.entity\";\r\nimport { LineEntity } from \"../scada_line/scada_line.entity\";\r\nimport { MapImageLibraryEntity } from \"../scada_map-image-library/scada_map-image-library.entity\";\r\nimport { MapEntity } from \"../scada_map/scada_map.entity\";\r\nimport { MemonicEntity } from \"../scada_memonic/scada_memonic.entity\";\r\nimport { PanelEntity } from \"../scada_panel/scada_panel.entity\";\r\nimport { CameraStreamEntity } from \"../scada_camera_stream/scada_camera_stream.entity\";\r\nimport { ViewImageEntity } from \"../scada_viewImage/scada_viewImage.entity\";\r\nimport { GridViewEntity } from \"../scada_gridView/scada_gridView.entity\";\r\nimport { DateTimePickerEntity } from \"../scada_date-time-picker/scada_dateTimePicker.entity\";\r\nimport { SelectEntity } from \"../scada_select/scada_select.entity\";\r\nimport { GaugeEntity } from \"../scada_gauge/scada_gauge.entity\";\r\nimport { ProgressBarEntity } from \"../scada_progress_bar/scada_progress_bar.entity\";\r\nimport { SliderEntity } from \"../scada_slider/scada_slider.entity\";\r\nimport { _3DEntity } from \"../scada_3D/scada_3D.entity\";\r\nimport { StringEntity } from \"../scada_string/scada_string.entity\";\r\nimport { TextFieldEntity } from \"../scada_text-field/scada_text-field.entity\";\r\nimport { UserEntity } from \"../scada_user/scada_user.entity\";\r\nimport { WordAdjustEntity } from \"../scada_word-adjust/scada_word-adjust.entity\";\r\nimport { WordDisplayEntity } from \"../scada_word-display/scada_word-display.entity\";\r\nimport { NumberEntity } from \"../scada_number/scada_number.entity\";\r\nimport { SetupAlarmEntity } from \"../scada_setup-alarm/scada_setup-alarm.entity\";\r\nrequire('dotenv').config();\r\nconst VariableSystem = require('../../VariableSystem.js');\r\n\r\n \r\n\r\nexport const typeOrmConfigAsync = {\r\n    imports: [ConfigModule],\r\n    inject: [ConfigService],\r\n    useFactory: async (configService: ConfigService): Promise<TypeOrmModuleOptions> => {\r\n        const database = configService.get('DB_Path') || './db/default.db';\r\n        VariableSystem.PathLocalDB = database\r\n        return {\r\n            type: 'sqlite',\r\n            database,\r\n            entities: [\r\n                BackgroundImageLibraryEntity,\r\n                UserEntity,\r\n                BitAdjustEntity,\r\n                BitEntity,\r\n                ConnectionEntity,\r\n                NavigateEntity,\r\n                PrintEntity,\r\n                ReportEntity,\r\n                BitImageLibraryEntity,\r\n                NumberImageLibraryEntity,\r\n                NavigateImageLibraryEntity,\r\n                BitAdjustImageLibraryEntity,\r\n                BitDisplayEntity,\r\n                BitDisplayImageLibraryEntity,\r\n\r\n                DesignImageLibraryEntity,\r\n                DesignEntity,\r\n                DesignTableEntity,\r\n\r\n                PopupEntity,\r\n                PopupImageLibraryEntity,\r\n\r\n                DWordAdjustEntity,\r\n                DWordDisplayEntity,\r\n                ElementEntity,\r\n                ElementImageLibraryEntity,\r\n                IconImageLibraryEntity,\r\n                LabelEntity,\r\n                ChartEntity,\r\n                LineEntity,\r\n                MapEntity,\r\n                MapImageLibraryEntity,\r\n                MemonicEntity,\r\n                PanelEntity,\r\n                CameraStreamEntity,\r\n                ViewImageEntity,\r\n                GridViewEntity,\r\n                DateTimePickerEntity,\r\n                SelectEntity,\r\n                GaugeEntity,\r\n                ProgressBarEntity,\r\n                SliderEntity,\r\n                _3DEntity,\r\n                StringEntity,\r\n                TextFieldEntity,\r\n                WordAdjustEntity,\r\n                WordDisplayEntity,\r\n                NumberEntity,\r\n                SetupAlarmEntity\r\n            ],\r\n            synchronize: true, // Set to false in production\r\n        };\r\n    },\r\n}","// app.controller.ts\r\nimport { Controller, Get } from '@nestjs/common';\r\nimport { MicroserviceClientService } from './microservice-client.service';\r\n\r\n@Controller()\r\nexport class MicroserviceClientController {\r\n    constructor(private readonly microserviceClientService: MicroserviceClientService) { }\r\n\r\n    @Get()\r\n    async sendMessage(): Promise<string> {\r\n        const response = await this.microserviceClientService.sendMessage('Hello from client!');\r\n        return response;\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MicroserviceClientService } from './microservice-client.service';\nimport { MicroserviceClientController } from './microservice-client.controller';\n\r\n@Module({\n  providers: [MicroserviceClientService],\n  controllers: [MicroserviceClientController]\n})\r\nexport class MicroserviceClientModule {}\r\n","// microservice-client.service.ts\r\nimport { Injectable } from '@nestjs/common';\r\nimport { ClientProxyFactory, Transport, ClientProxy } from '@nestjs/microservices';\r\n\r\n@Injectable()\r\nexport class MicroserviceClientService {\r\n    private client: ClientProxy;\r\n\r\n    constructor() {\r\n        this.client = ClientProxyFactory.create({\r\n            transport: Transport.MQTT,\r\n            options: {\r\n                host: 'localhost',\r\n                port: 1883, // Change this to the port your server microservice is running on\r\n            },\r\n        });\r\n    }\r\n\r\n    // Add methods to interact with the server microservice\r\n    async sendMessage(message: string): Promise<string> {\r\n        return this.client.send<string>('message', message).toPromise();\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MqttService } from './mqtt.service';\r\nimport { ConfigService } from '../config/config.service';\r\n\r\n@Module({\r\n  providers: [MqttService, ConfigService],\r\n  exports: [MqttService]\r\n})\r\nexport class MqttModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { connect, MqttClient } from \"mqtt\";\r\nimport { ConfigService } from '../config/config.service';\r\nconst Variable = require('../../Variable');\r\nconst LS_Admin = require('../../LS_Admin.js');\r\nrequire('dotenv').config();\r\n@Injectable()\r\nexport class MqttService implements OnModuleInit {\r\n    private static mqttClient: MqttClient | null = null; // Static property for singleton pattern\r\n    constructor(private readonly configService: ConfigService) {\r\n    }\r\n\r\n    onModuleInit() {\r\n        // Initialize the MQTT client only if it hasn't been initialized before\r\n        if (!MqttService.mqttClient) {\r\n            this.initializeMqttClient();\r\n        }\r\n    }\r\n\r\n    private initializeMqttClient() {\r\n        const host = process.env.MQTT_HOST;\r\n        const port = process.env.MQTT_PORT;\r\n        const clientId = `mqtt_${Math.random().toString(16).slice(3)}`;\r\n\r\n        const connectUrl = `mqtt://${host}:${port}`;\r\n        const topic = \"/nodejs/mqtt/sp\";\r\n\r\n        // Create the MQTT client connection\r\n        MqttService.mqttClient = connect(connectUrl, {\r\n            clientId,\r\n            clean: true,\r\n            connectTimeout: 4000,\r\n            reconnectPeriod: 1000,\r\n        });\r\n\r\n        // Set up MQTT event handlers\r\n        MqttService.mqttClient.on(\"connect\", () => {\r\n            console.log(\"Connected to CloudMQTT\");\r\n            MqttService.mqttClient.publish('MQTT_Raw_ResultBit', JSON.stringify(Variable.resultBit), { retain: true });\r\n            MqttService.mqttClient.publish('MQTT_Raw_ResultNumber', JSON.stringify(Variable.resultNumber), { retain: true });\r\n            MqttService.mqttClient.publish('MQTT_Raw_ResultString', JSON.stringify(Variable.resultString), { retain: true });\r\n            MqttService.mqttClient.publish('MQTT_Raw_ResultElement', JSON.stringify(Variable.resultElement), { retain: true });\r\n        });\r\n\r\n        MqttService.mqttClient.on(\"error\", (error) => {\r\n            // console.error(\"Error in connecting to CloudMQTT\", error);\r\n        });\r\n    }\r\n    \r\n    publish(topic: string, payload: string): string {\r\n        if (LS_Admin.active == true && MqttService.mqttClient) {\r\n            MqttService.mqttClient.publish(topic, payload, { retain: true });\r\n            return `Publishing to ${topic}`;\r\n        }\r\n        return `Failed to publish to ${topic}`;\r\n    }\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\n@Module({})\r\nexport class NoteModule {}\r\n","import { Module } from '@nestjs/common';\r\n\r\n@Module({})\r\nexport class PostModule {}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { Scada3DService } from './scada_3D.service';\r\n\r\n@Controller('3D')\r\nexport class Scada3DController {\r\n    constructor(\r\n        private readonly scada3DService: Scada3DService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scada3DService.getData();\r\n    }\r\n\r\n    @Post('/insert_3D')\r\n    insert3D(@Body() requestBody) {\r\n        return this.scada3DService.insert3D(requestBody);\r\n    }\r\n\r\n    @Put('/update_3D')\r\n    update3D(@Body() requestBody) {\r\n        return this.scada3DService.update3D(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_3D')\r\n    delete3D(@Body() requestBody) {\r\n        return this.scada3DService.delete3D(requestBody);\r\n    }\r\n\r\n}\r\n","// src/3D/3D.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('3D')\r\nexport class _3DEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttTopicJointChange: string;\r\n\r\n    @Column({ nullable: true })\r\n    arrModelUrls: string;\r\n\r\n    @Column({ nullable: true })\r\n    evalSetupJoint: string;\r\n\r\n    @Column({ nullable: true })\r\n    evalUpdateRotation: string;\r\n\r\n    @Column({ nullable: true })\r\n    cameraConfig: string;\r\n\r\n    @Column({ nullable: true })\r\n    arrTargetOrbitControls: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { Scada3DService } from './scada_3D.service';\nimport { Scada3DController } from './scada_3D.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { _3DEntity } from './scada_3D.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([_3DEntity]), SocketIoModule],\n  providers: [Scada3DService,],\n  controllers: [Scada3DController]\n})\nexport class Scada3DModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { _3DEntity } from './scada_3D.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class Scada3DService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(_3DEntity)\r\n        private readonly _3DRepository: Repository<_3DEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshData3D) {\r\n                Variable.refreshData3D = false;\r\n                // console.log('===============================refresh 3D========================================');\r\n                try {\r\n                    Variable.result3D = await this._3DRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('Update3D', Variable.result3D);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.result3D\r\n    }\r\n\r\n    async insert3D(_3DData: any): Promise<any> {\r\n        try {\r\n            _3DData._id = 'a' + Math.random().toString(36)\r\n            const new3D = this._3DRepository.create(_3DData);\r\n            await this._3DRepository.save(new3D);\r\n            Variable.refreshData3D = true\r\n            return { result: 'success', message: 'Add 3D Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update3D(updateData: any): Promise<any> {\r\n        try {\r\n            await this._3DRepository.update(updateData._id, updateData);\r\n            Variable.refreshData3D = true\r\n            return { result: 'success', message: 'Update 3D Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete3D(_3DId: string): Promise<any> {\r\n        try {\r\n            await this._3DRepository.delete(_3DId);\r\n            Variable.refreshData3D = true\r\n            return { result: 'success', message: 'Delete 3D Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body, Query } from '@nestjs/common';\r\nimport { ScadaBackgroundImageLibraryService } from './scada_background-image-library.service';\r\n\r\n@Controller('uploadImageImageBackground')\r\nexport class ScadaBackgroundImageLibraryController {\r\n    constructor(\r\n        private readonly scadaBackgroundImageLibraryService: ScadaBackgroundImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBackgroundImageLibraryService.getData();\r\n    }\r\n\r\n    @Get('/getdata_query')\r\n    getDataQuery(@Query('screenName') screenName: string) {\r\n        return this.scadaBackgroundImageLibraryService.getDataQuery(screenName);\r\n    }\r\n    user\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        console.log('requestBody', requestBody);\r\n        return this.scadaBackgroundImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaBackgroundImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaBackgroundImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('ImageBackgroundImageLibrary')\r\nexport class BackgroundImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    height: number;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BackgroundImageLibraryEntity } from './scada_background-image-library.entity';\r\nimport { ScadaBackgroundImageLibraryController } from './scada_background-image-library.controller';\r\nimport { ScadaBackgroundImageLibraryService } from './scada_background-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([BackgroundImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaBackgroundImageLibraryController],\r\n    providers: [ScadaBackgroundImageLibraryService]\r\n})\r\nexport class ScadaBackgroundImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { BackgroundImageLibraryEntity } from './scada_background-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBackgroundImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BackgroundImageLibraryEntity)\r\n        private readonly BackgroundImageLibraryRepository: Repository<BackgroundImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BACKGROUND IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataImageBackgroundImageLibrary) {\r\n                Variable.refreshDataImageBackgroundImageLibrary = false;\r\n                // console.log('===============================refresh background image library========================================');\r\n                try {\r\n                    Variable.resultImageBackgroundImageLibrary = await this.BackgroundImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateImageBackgroundImageLibrary', Variable.resultImageBackgroundImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultImageBackgroundImageLibrary\r\n    }\r\n\r\n    async getDataQuery(screenName): Promise<any> {\r\n        let user = await this.BackgroundImageLibraryRepository.query(\"SELECT * FROM ImageBackgroundImageLibrary WHERE name=\" + '\"' + screenName + '\"');\r\n        // let user = await this.BackgroundImageLibraryRepository.createQueryBuilder('ImageBackgroundImageLibrary')\r\n        //     .where('name = :screenName', { screenName })\r\n        //     .getOne();\r\n\r\n        return user;\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data,\r\n                enable: data.enable,\r\n                width: data.width,\r\n                height: data.height\r\n            }\r\n\r\n            const newBackgroundImageLibrary = this.BackgroundImageLibraryRepository.create(temp);\r\n            await this.BackgroundImageLibraryRepository.save(newBackgroundImageLibrary);\r\n            Variable.refreshDataImageBackgroundImageLibrary = true\r\n            return { result: 'success', message: 'Add Background Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.BackgroundImageLibraryRepository.delete(id);\r\n            Variable.refreshDataImageBackgroundImageLibrary = true\r\n            return { result: 'success', message: 'Delete Background Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.BackgroundImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataImageBackgroundImageLibrary = true\r\n            return { result: 'success', message: 'Update Background Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitAdjustImageLibraryService } from './scada_bit-adjust-image-library.service';\r\n\r\n@Controller('uploadImageBitAdjust')\r\nexport class ScadaBitAdjustImageLibraryController {\r\n    constructor(\r\n        private readonly scadaBitAdjustImageLibraryService: ScadaBitAdjustImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitAdjustImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaBitAdjustImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaBitAdjustImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitAdjustImageLibrary')\r\nexport class BitAdjustImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitAdjustImageLibraryEntity } from './scada_bit-adjust-image-library.entity';\r\nimport { ScadaBitAdjustImageLibraryController } from './scada_bit-adjust-image-library.controller';\r\nimport { ScadaBitAdjustImageLibraryService } from './scada_bit-adjust-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([BitAdjustImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaBitAdjustImageLibraryController],\r\n    providers: [ScadaBitAdjustImageLibraryService]\r\n})\r\nexport class ScadaBitAdjustImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { BitAdjustImageLibraryEntity } from './scada_bit-adjust-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitAdjustImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitAdjustImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<BitAdjustImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITADJUST IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitAdjustImageLibrary) {\r\n                Variable.refreshDataBitAdjustImageLibrary = false;\r\n                // console.log('===============================refresh bitAdjsut image library========================================');\r\n                try {\r\n                    Variable.resultBitAdjustImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitAdjustImageLibrary', Variable.resultBitAdjustImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitAdjustImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newBitAdjustImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newBitAdjustImageLibrary);\r\n            Variable.refreshDataBitAdjustImageLibrary = true\r\n            return { result: 'success', message: 'Add BitAdjust Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataBitAdjustImageLibrary = true\r\n            return { result: 'success', message: 'Delete BitAdjust Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitAdjustRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refreshData() {\r\n        let haveChange = false\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrBitAdjust)) {\r\n                for (let i = 0; i < Variable.haveChangeArrBitAdjust.length; i++) {\r\n                    if (Variable.haveChangeArrBitAdjust[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrBitAdjust[i] = false;\r\n                        if (Array.isArray(Variable.resultBitAdjust)) {\r\n                            for (let j = 0; j < Variable.resultBitAdjust.length; j++) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultBitAdjust[j].idDevice) && Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultBitAdjust[j].tag)) {\r\n                                        const regex = /^\\d+\\.\\d+$/;\r\n                                        if (!regex.test(Variable.resultBitAdjust[j].tag)) {\r\n                                            if (Variable.resultBitAdjust[j].tag <= Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)].length) {\r\n                                                Variable.resultBitAdjust[j].status = Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)][Variable.resultBitAdjust[j].tag]\r\n                                                haveChange = true\r\n                                            }\r\n                                        } else {\r\n                                            if (Variable.resultBitAdjust[j].tag.length > 0 && Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)]) {\r\n                                                for (let obj of Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)]) {\r\n                                                    if (Variable.resultBitAdjust[j].tag in obj) {\r\n                                                        Variable.resultBitAdjust[j].status = obj[Variable.resultBitAdjust[j].tag]\r\n                                                        haveChange = true\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (Variable.resultBitAdjust[j].tag.length > 0 && Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)]) {\r\n                                            for (let obj of Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)]) {\r\n                                                if (Variable.resultBitAdjust[j].tag in obj) {\r\n                                                    Variable.resultBitAdjust[j].status = obj[Variable.resultBitAdjust[j].tag]\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateBitAdjust', Variable.resultBitAdjust)\r\n                            }\r\n                        }\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_BitAdjust)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_BitAdjust.length; j++) {\r\n                                if (parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice) && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice)]) {\r\n                                    if (Variable.resultProjectScreen_BitAdjust[j].tag <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice)].length) { Variable.resultProjectScreen_BitAdjust[j].status = Variable.BitAdjust[parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice)][Variable.resultProjectScreen_BitAdjust[j].tag] }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_BitAdjust', Variable.resultProjectScreen_BitAdjust)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element Screen In BitAdjust Have Tag ON OFF\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2 //STOP \r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOff && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultProjectScreen_Element[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].notOff)) {\r\n                                            if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        } else {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                        // }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOn && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultProjectScreen_Element[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].notOn)) {\r\n                                            if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                        } else {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                        // }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagFault && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultProjectScreen_Element[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                        if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagFault]) {\r\n                                            Variable.resultProjectScreen_Element[j].status = 3\r\n                                            haveChange = true\r\n                                        }\r\n                                        // }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element In BitAdjust Have tag ON OFF\r\n                        // if (Array.isArray(Variable.resultElement)) {\r\n                        //     for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                        //         if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                        //             if (\r\n                        //                 (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOn) ||\r\n                        //                 (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOff)\r\n\r\n                        //             ) {\r\n                        //                 Variable.resultElement[j].status = 2 //STOP \r\n                        //                 haveChange = true\r\n                        //             }\r\n\r\n                        //             if (!isNaN(Variable.resultElement[j].tagOff) && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 // if (parseInt(Variable.resultElement[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                 if (parseInt(Variable.resultElement[j].notOff)) {\r\n                        //                     if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                        //                         Variable.resultElement[j].status = 0\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 } else {\r\n                        //                     if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                        //                         Variable.resultElement[j].status = 0\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 }\r\n                        //                 // }\r\n                        //             }\r\n\r\n                        //             if (!isNaN(Variable.resultElement[j].tagOn) && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 // if (parseInt(Variable.resultElement[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                 if (parseInt(Variable.resultElement[j].notOn)) {\r\n                        //                     if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                        //                         Variable.resultElement[j].status = 1\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 } else {\r\n                        //                     if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                        //                         Variable.resultElement[j].status = 1\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 }\r\n                        //                 // }\r\n                        //             }\r\n\r\n                        //             if (!isNaN(Variable.resultElement[j].tagFault) && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 // if (parseInt(Variable.resultElement[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                 if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagFault]) {\r\n                        //                     Variable.resultElement[j].status = 3\r\n                        //                     haveChange = true\r\n                        //                 }\r\n                        //                 // }\r\n                        //             }\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n\r\n                        // if (haveChange) {\r\n                        //     if (this.socketGateway && this.socketGateway.server) {\r\n                        //         this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                        //     }\r\n                        // }\r\n\r\n                        haveChange = false\r\n                        //Check Screen Element in BitAdjust No Tag ON OFF\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOff && !Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                        if (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                            Variable.resultProjectScreen_Element[j].status = 0\r\n                                            haveChange = true\r\n                                        }\r\n                                        // }\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOn && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                        if (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                            Variable.resultProjectScreen_Element[j].status = 1\r\n                                            haveChange = true\r\n                                        }\r\n                                        // }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element in BitAdjust No Tag ON OFF\r\n                        // if (Array.isArray(Variable.resultElement)) {\r\n                        //     for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                        //         if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                        //             if (\r\n                        //                 (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && isNaN(Variable.resultElement[j].tagOn)) ||\r\n                        //                 (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && isNaN(Variable.resultElement[j].tagOff))\r\n                        //             ) {\r\n                        //                 Variable.resultElement[j].status = 2\r\n                        //                 haveChange = true\r\n                        //             }\r\n\r\n                        //             if (isNaN(Variable.resultElement[j].tagOff) && !Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 // if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                 if (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                        //                     Variable.resultElement[j].status = 0\r\n                        //                     haveChange = true\r\n                        //                 }\r\n                        //                 // }\r\n                        //             }\r\n\r\n                        //             if (isNaN(Variable.resultElement[j].tagOn) && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 // if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                 if (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                        //                     Variable.resultElement[j].status = 1\r\n                        //                     haveChange = true\r\n                        //                 }\r\n                        //                 // }\r\n                        //             }\r\n\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n\r\n                        // if (haveChange) {\r\n                        //     if (this.socketGateway && this.socketGateway.server) {\r\n                        //         this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                        //     }\r\n                        // }\r\n\r\n\r\n                        haveChange = false\r\n                        //Check in Line\r\n                        if (Array.isArray(Variable.resultLine)) {\r\n                            for (let j = 0; j < Variable.resultLine.length; j++) {\r\n                                if (Variable.resultLine[j].typeTag == 'BitAdjust') {\r\n                                    if (!isNaN(Variable.resultLine[j].idDevice) && Variable.BitAdjust[parseInt(Variable.resultLine[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultLine[j].tag) <= Variable.BitAdjust[parseInt(Variable.resultLine[j].idDevice)].length) {\r\n                                        if (Variable.BitAdjust[parseInt(Variable.resultLine[j].idDevice)][Variable.resultLine[j].tag]) {\r\n                                            Variable.resultLine[j].status = 1\r\n                                            haveChange = true\r\n                                        } else {\r\n                                            Variable.resultLine[j].status = 0\r\n                                            haveChange = true\r\n                                        }\r\n                                        // }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateLine', Variable.resultLine)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line Screen\r\n                        if (Array.isArray(Variable.resultProjectScreen_Line)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Line.length; j++) {\r\n                                if (Variable.resultProjectScreen_Line[j].typeTag == 'BitAdjust') {\r\n                                    if (!isNaN(Variable.resultProjectScreen_Line[j].idDevice) && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Line[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultProjectScreen_Line[j].tag) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Line[j].idDevice)].length) {\r\n                                        if (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Line[j].idDevice)][Variable.resultProjectScreen_Line[j].tag]) {\r\n                                            Variable.resultProjectScreen_Line[j].status = 1\r\n                                            haveChange = true\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_Line[j].status = 0\r\n                                            haveChange = true\r\n                                        }\r\n                                        // }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Line', Variable.resultProjectScreen_Line)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitAdjustService } from './scada_bit-adjust.service';\r\n\r\n@Controller('bitAdjust')\r\nexport class ScadaBitAdjustController {\r\n    constructor(\r\n        private readonly scadaBitAdjustService: ScadaBitAdjustService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitAdjustService.getData();\r\n    }\r\n\r\n    @Post('/insert_bitAdjust')\r\n    insertBitAdjust(@Body() requestBody) {\r\n        return this.scadaBitAdjustService.insertBitAdjust(requestBody);\r\n    }\r\n\r\n    @Put('/update_bitAdjust')\r\n    updateBitAdjust(@Body() requestBody) {\r\n        return this.scadaBitAdjustService.updateBitAdjust(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_bitAdjust')\r\n    deleteBitAdjust(@Body() requestBody) {\r\n        return this.scadaBitAdjustService.deleteBitAdjust(requestBody);\r\n    }\r\n\r\n}\r\n","// src/bit-adjust/bit-adjust.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitAdjust')\r\nexport class BitAdjustEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    myKeyPress: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage0: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage1: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    blink0: number;\r\n\r\n    @Column({ nullable: true })\r\n    blink1: number;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaBitAdjustController } from './scada_bit-adjust.controller';\r\nimport { ScadaBitAdjustService } from './scada_bit-adjust.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitAdjustEntity } from './scada_bit-adjust.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([BitAdjustEntity]), SocketIoModule\r\n  ],\r\n  controllers: [ScadaBitAdjustController],\r\n  providers: [ScadaBitAdjustService]\r\n})\r\nexport class ScadaBitAdjustModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { BitAdjustEntity } from './scada_bit-adjust.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitAdjustService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitAdjustEntity)\r\n        private readonly bitAdjustRepository: Repository<BitAdjustEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BIT ADJUST');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitAdjust) {\r\n                Variable.refreshDataBitAdjust = false;\r\n                // console.log('===============================refresh bitAdjust========================================');\r\n                try {\r\n                    Variable.resultBitAdjust = await this.bitAdjustRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitAdjust', Variable.resultBitAdjust);\r\n                    }\r\n                    Variable.OldBitAdjust = []\r\n                    if (Array.isArray(Variable.resultBitAdjust)) {\r\n                        for (let j = 0; j < Variable.resultBitAdjust.length; j++) {\r\n                            //Add Coil of BitAdjust\r\n                            try {\r\n                                if (Variable.resultBitAdjust[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultBitAdjust[j].idDevice)) {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultBitAdjust[j].tag)) {\r\n                                            Variable.Modbus_Client_Coil[parseInt(Variable.resultBitAdjust[j].idDevice)] = Variable.Modbus_Client_Coil[parseInt(Variable.resultBitAdjust[j].idDevice)] || []\r\n                                            Variable.Modbus_Client_Coil[parseInt(Variable.resultBitAdjust[j].idDevice)][parseInt(Variable.resultBitAdjust[j].tag)] = parseInt(Variable.resultBitAdjust[j].tag)\r\n                                        } else {\r\n                                            if (Variable.resultBitAdjust[j].tag.length > 0) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultBitAdjust[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultBitAdjust[j].idDevice)] || []\r\n                                                if (!Variable.Communication_OPC_Items[parseInt(Variable.resultBitAdjust[j].idDevice)].includes(Variable.resultBitAdjust[j].tag)) {\r\n                                                    Variable.Communication_OPC_Items[parseInt(Variable.resultBitAdjust[j].idDevice)].push(Variable.resultBitAdjust[j].tag)\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        if (Variable.resultBitAdjust[j].tag.length > 0) {\r\n                                            const regex = /^\\d+\\.\\d+$/;\r\n                                            if (regex.test(Variable.resultBitAdjust[j].tag)) {\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultBitAdjust[j].idDevice)] = Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultBitAdjust[j].idDevice)] || []\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultBitAdjust[j].idDevice)].push(Variable.resultBitAdjust[j].tag)\r\n\r\n                                                Variable.Communication_PLC_Word_Address[parseInt(Variable.resultBitAdjust[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(Variable.resultBitAdjust[j].idDevice)] || []\r\n                                                Variable.Communication_PLC_Word_Address[parseInt(Variable.resultBitAdjust[j].idDevice)][Variable.resultBitAdjust[j].tag.split('.')[0]] = parseInt(Variable.resultBitAdjust[j].tag.split('.')[0])\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitAdjust;\r\n    }\r\n\r\n    async insertBitAdjust(bitAdjustData: any): Promise<any> {\r\n        try {\r\n            bitAdjustData._id = 'a' + Math.random().toString(36)\r\n            bitAdjustData.status = 0\r\n            const newBitAdjust = this.bitAdjustRepository.create(bitAdjustData);\r\n            await this.bitAdjustRepository.save(newBitAdjust);\r\n            Variable.refreshDataBitAdjust = true\r\n            return { result: 'success', message: 'Add BitAdjust Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateBitAdjust(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitAdjustRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataBitAdjust = true\r\n            return { result: 'success', message: 'Update BitAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteBitAdjust(bitAdjustId: string): Promise<any> {\r\n        try {\r\n            await this.bitAdjustRepository.delete(bitAdjustId);\r\n            Variable.refreshDataBitAdjust = true\r\n            return { result: 'success', message: 'Delete BitAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitDisplayImageLibraryService } from './scada_bit-display-image-library.service';\r\n\r\n@Controller('uploadImage')\r\nexport class ScadaBitDisplayImageLibraryController {\r\n    constructor(\r\n        private readonly scadaBitDisplayImageLibraryService: ScadaBitDisplayImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitDisplayImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaBitDisplayImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaBitDisplayImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaBitDisplayImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitDisplayImageLibrary')\r\nexport class BitDisplayImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitDisplayImageLibraryEntity } from './scada_bit-display-image-library.entity';\r\nimport { ScadaBitDisplayImageLibraryController } from './scada_bit-display-image-library.controller';\r\nimport { ScadaBitDisplayImageLibraryService } from './scada_bit-display-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([BitDisplayImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaBitDisplayImageLibraryController],\r\n    providers: [ScadaBitDisplayImageLibraryService,]\r\n})\r\nexport class ScadaBitDisplayImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { BitDisplayImageLibraryEntity } from './scada_bit-display-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitDisplayImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitDisplayImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<BitDisplayImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitDisplayImageLibrary) {\r\n                Variable.refreshDataBitDisplayImageLibrary = false;\r\n                // console.log('===============================refresh bitDisplay image library========================================');\r\n                try {\r\n                    Variable.resultBitDisplayImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitDisplayImageLibrary', Variable.resultBitDisplayImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitDisplayImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newBitDisplayImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newBitDisplayImageLibrary);\r\n            Variable.refreshDataBitDisplayImageLibrary = true\r\n            return { result: 'success', message: 'Add BitDisplay Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataBitDisplayImageLibrary = true\r\n            return { result: 'success', message: 'Update Element Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataBitDisplayImageLibrary = true\r\n            return { result: 'success', message: 'Delete BitDisplay Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitDisplayRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refreshData() {\r\n        let haveChange = false\r\n\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrBitDisplay)) {\r\n                for (let i = 0; i < Variable.haveChangeArrBitDisplay.length; i++) {\r\n                    if (Variable.haveChangeArrBitDisplay[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrBitDisplay[i] = false;\r\n                        if (Array.isArray(Variable.resultBitDisplay)) {\r\n                            for (let j = 0; j < Variable.resultBitDisplay.length; j++) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultBitDisplay[j].idDevice) && Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultBitDisplay[j].tag)) {\r\n                                        const regex = /^\\d+\\.\\d+$/;\r\n                                        if (!regex.test(Variable.resultBitDisplay[j].tag)) {\r\n                                            if (Variable.resultBitDisplay[j].tag <= Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)].length) {\r\n                                                Variable.resultBitDisplay[j].status = Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)][Variable.resultBitDisplay[j].tag]\r\n                                                haveChange = true\r\n                                            }\r\n                                        } else {\r\n                                            for (let obj of Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)]) {\r\n                                                if (Variable.resultBitDisplay[j].tag in obj) {\r\n                                                    Variable.resultBitDisplay[j].status = obj[Variable.resultBitDisplay[j].tag]\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (Variable.resultBitDisplay[j].tag.length > 0 && Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)]) {\r\n                                            for (let obj of Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)]) {\r\n                                                if (Variable.resultBitDisplay[j].tag in obj) {\r\n                                                    Variable.resultBitDisplay[j].status = obj[Variable.resultBitDisplay[j].tag]\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateBitDisplay', Variable.resultBitDisplay)\r\n                            }\r\n                        }\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_BitDisplay)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_BitDisplay.length; j++) {\r\n                                if (Variable.resultProjectScreen_BitDisplay[j].idDevice && Array.isArray(Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)]) && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultProjectScreen_BitDisplay[j].tag <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)].length) { Variable.resultProjectScreen_BitDisplay[j].status = Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)][Variable.resultProjectScreen_BitDisplay[j].tag] }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_BitDisplay', Variable.resultProjectScreen_BitDisplay)\r\n                            }\r\n                        }\r\n\r\n                        //Element Screen in BitDisplay Have Tag ON OFF\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOff && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultProjectScreen_Element[j].notOff)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOn && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultProjectScreen_Element[j].notOn)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagFault && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagFault]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 3\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n\r\n                        haveChange = false\r\n                        //Check Screen Element in BitDisplay No Tag ON OFF\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOff && !Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOn && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element in BitDisplay No Tag ON OFF\r\n                        // if (Array.isArray(Variable.resultElement)) {\r\n                        //     for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                        //         if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                        //             if (\r\n                        //                 (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && !Variable.resultElement[j].tagOn) ||\r\n                        //                 (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && !Variable.resultElement[j].tagOff)\r\n                        //             ) {\r\n                        //                 Variable.resultElement[j].status = 2\r\n                        //                 haveChange = true\r\n                        //             }\r\n\r\n                        //             if (!Variable.resultElement[j].tagOff && !Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                     if (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                        //                         Variable.resultElement[j].status = 0\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 }\r\n                        //             }\r\n\r\n                        //             if (!Variable.resultElement[j].tagOn && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                     if (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                        //                         Variable.resultElement[j].status = 1\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 }\r\n                        //             }\r\n\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n\r\n                        // if (haveChange) {\r\n                        //     if (this.socketGateway && this.socketGateway.server) {\r\n                        //         this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                        //     }\r\n                        // }\r\n\r\n                        //Element In BitDisplay Have Tag ON OFF\r\n                        // haveChange = false\r\n                        // if (Array.isArray(Variable.resultElement)) {\r\n                        //     for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                        //         if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                        //             if (\r\n                        //                 (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOn) ||\r\n                        //                 (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOff)\r\n                        //             ) {\r\n                        //                 Variable.resultElement[j].status = 2\r\n                        //                 haveChange = true\r\n                        //             }\r\n\r\n                        //             if (Variable.resultElement[j].tagOff && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 if (parseInt(Variable.resultElement[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                     if (parseInt(Variable.resultElement[j].notOff)) {\r\n                        //                         if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                        //                             Variable.resultElement[j].status = 0\r\n                        //                             haveChange = true\r\n                        //                         }\r\n                        //                     } else {\r\n                        //                         if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                        //                             Variable.resultElement[j].status = 0\r\n                        //                             haveChange = true\r\n                        //                         }\r\n                        //                     }\r\n                        //                 }\r\n                        //             }\r\n\r\n                        //             if (Variable.resultElement[j].tagOn && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 if (parseInt(Variable.resultElement[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                     if (parseInt(Variable.resultElement[j].notOn)) {\r\n                        //                         if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                        //                             Variable.resultElement[j].status = 1\r\n                        //                             haveChange = true\r\n                        //                         }\r\n                        //                     } else {\r\n                        //                         if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                        //                             Variable.resultElement[j].status = 1\r\n                        //                             haveChange = true\r\n                        //                         }\r\n                        //                     }\r\n                        //                 }\r\n                        //             }\r\n\r\n                        //             if (Variable.resultElement[j].tagFault && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                 if (parseInt(Variable.resultElement[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                        //                     if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagFault]) {\r\n                        //                         Variable.resultElement[j].status = 3\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 }\r\n                        //             }\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n\r\n                        // if (haveChange) {\r\n                        //     if (this.socketGateway && this.socketGateway.server) {\r\n                        //         this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                        //     }\r\n                        // }\r\n\r\n                        haveChange = false\r\n                        //Check in Line\r\n                        if (Array.isArray(Variable.resultLine)) {\r\n                            for (let j = 0; j < Variable.resultLine.length; j++) {\r\n                                if (Variable.resultLine[j].typeTag == 'BitDisplay') {\r\n                                    if (!isNaN(Variable.resultLine[j].idDevice) && Variable.BitDisplay[parseInt(Variable.resultLine[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultLine[j].tag) <= Variable.BitDisplay[parseInt(Variable.resultLine[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultLine[j].idDevice)][Variable.resultLine[j].tag]) {\r\n                                                Variable.resultLine[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultLine[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateLine', Variable.resultLine)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line Screen\r\n                        if (Array.isArray(Variable.resultProjectScreen_Line)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Line.length; j++) {\r\n                                if (Variable.resultProjectScreen_Line[j].typeTag == 'BitDisplay') {\r\n                                    if (!isNaN(Variable.resultProjectScreen_Line[j].idDevice) && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Line[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Line[j].tag) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Line[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Line[j].idDevice)][Variable.resultProjectScreen_Line[j].tag]) {\r\n                                                Variable.resultProjectScreen_Line[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultProjectScreen_Line[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Line', Variable.resultProjectScreen_Line)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitDisplayService } from './scada_bit-display.service';\r\n\r\n@Controller('bitDisplay')\r\nexport class ScadaBitDisplayController {\r\n    constructor(\r\n        private readonly scadaBitDisplayService: ScadaBitDisplayService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitDisplayService.getData();\r\n    }\r\n\r\n    @Post('/insert_bitDisplay')\r\n    insertBitDisplay(@Body() requestBody) {\r\n        return this.scadaBitDisplayService.insertBitDisplay(requestBody);\r\n    }\r\n\r\n    @Put('/update_bitDisplay')\r\n    updateBitDisplay(@Body() requestBody) {\r\n        return this.scadaBitDisplayService.updateBitDisplay(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_bitDisplay')\r\n    deleteBitDisplay(@Body() requestBody) {\r\n        return this.scadaBitDisplayService.deleteBitDisplay(requestBody);\r\n    }\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitDisplay')\r\nexport class BitDisplayEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text0: string;\r\n\r\n    @Column({ nullable: true })\r\n    text1: string;\r\n\r\n    @Column({ nullable: true })\r\n    color0: string;\r\n\r\n    @Column({ nullable: true })\r\n    color1: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage0: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage1: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    blink0: number;\r\n\r\n    @Column({ nullable: true })\r\n    blink1: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagRotate: string;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaBitDisplayController } from './scada_bit-display.controller';\nimport { ScadaBitDisplayService } from './scada_bit-display.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { BitDisplayEntity } from './scada_bit-display.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([BitDisplayEntity]), SocketIoModule],\n  controllers: [ScadaBitDisplayController],\n  providers: [ScadaBitDisplayService,]\n})\nexport class ScadaBitDisplayModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { BitDisplayEntity } from './scada_bit-display.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitDisplayService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitDisplayEntity)\r\n        private readonly bitDisplayRepository: Repository<BitDisplayEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitDisplay) {\r\n                Variable.refreshDataBitDisplay = false;\r\n                // console.log('===============================refresh bitDisplay========================================');\r\n                try {\r\n                    Variable.resultBitDisplay = await this.bitDisplayRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitDisplay', Variable.resultBitDisplay);\r\n                    }\r\n                    Variable.OldBitDisplay = []\r\n                    if (Array.isArray(Variable.resultBitDisplay)) {\r\n                        for (let j = 0; j < Variable.resultBitDisplay.length; j++) {\r\n                            //Add Coil of BitDisplay\r\n                            try {\r\n                                if (Variable.resultBitDisplay[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultBitDisplay[j].idDevice)) {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultBitDisplay[j].tag)) {\r\n                                            Variable.Modbus_Client_Coil[parseInt(Variable.resultBitDisplay[j].idDevice)] = Variable.Modbus_Client_Coil[parseInt(Variable.resultBitDisplay[j].idDevice)] || []\r\n                                            Variable.Modbus_Client_Coil[parseInt(Variable.resultBitDisplay[j].idDevice)][parseInt(Variable.resultBitDisplay[j].tag)] = parseInt(Variable.resultBitDisplay[j].tag)\r\n                                        } else {\r\n                                            if (Variable.resultBitDisplay[j].tag.length > 0) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)] || []\r\n                                                if (!Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)].includes(Variable.resultBitDisplay[j].tag)) {\r\n                                                    Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)].push(Variable.resultBitDisplay[j].tag)\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (this.checkVariableTypeNumber(Variable.resultBitDisplay[j].tagRotate)) {\r\n                                            Variable.Communication_PLC_Word_Address[parseInt(Variable.resultBitDisplay[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(Variable.resultBitDisplay[j].idDevice)] || []\r\n                                            Variable.Communication_PLC_Word_Address[parseInt(Variable.resultBitDisplay[j].idDevice)][parseInt(Variable.resultBitDisplay[j].tagRotate)] = parseInt(Variable.resultBitDisplay[j].tagRotate)\r\n                                        } else {\r\n                                            if (Variable.resultBitDisplay[j].tagRotate.length > 0) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)] || []\r\n                                                if (!Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)].includes(Variable.resultBitDisplay[j].tagRotate)) {\r\n                                                    Variable.Communication_OPC_Items[parseInt(Variable.resultBitDisplay[j].idDevice)].push(Variable.resultBitDisplay[j].tagRotate)\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (Variable.resultBitDisplay[j].tag.length > 0) {\r\n                                            const regex = /^\\d+\\.\\d+$/;\r\n                                            if (regex.test(Variable.resultBitDisplay[j].tag)) {\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultBitDisplay[j].idDevice)] = Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultBitDisplay[j].idDevice)] || []\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultBitDisplay[j].idDevice)].push(Variable.resultBitDisplay[j].tag)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitDisplay\r\n    }\r\n\r\n    async insertBitDisplay(bitDisplayData: any): Promise<any> {\r\n        try {\r\n            bitDisplayData._id = 'a' + Math.random().toString(36)\r\n            bitDisplayData.status = 0\r\n            const newBitDisplay = this.bitDisplayRepository.create(bitDisplayData);\r\n            await this.bitDisplayRepository.save(newBitDisplay);\r\n            Variable.refreshDataBitDisplay = true\r\n            return { result: 'success', message: 'Add BitDisplay Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateBitDisplay(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitDisplayRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataBitDisplay = true\r\n            return { result: 'success', message: 'Update BitDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteBitDisplay(bitDisplayId: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayRepository.delete(bitDisplayId);\r\n            Variable.refreshDataBitDisplay = true\r\n            return { result: 'success', message: 'Delete BitDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitImageLibraryService } from './scada_bit-image-library.service';\r\n\r\n@Controller('uploadImageBit')\r\nexport class ScadaBitImageLibraryController {\r\n    constructor(\r\n        private readonly scadaBitImageLibraryService: ScadaBitImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaBitImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaBitImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaBitImageLibraryService.update(requestBody);\r\n    }\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitImageLibrary')\r\nexport class BitImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitImageLibraryEntity } from './scada_bit-image-library.entity';\r\nimport { ScadaBitImageLibraryController } from './scada_bit-image-library.controller';\r\nimport { ScadaBitImageLibraryService } from './scada_bit-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([BitImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaBitImageLibraryController],\r\n    providers: [ScadaBitImageLibraryService]\r\n})\r\nexport class ScadaBitImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { BitImageLibraryEntity } from './scada_bit-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<BitImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITADJUST IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitImageLibrary) {\r\n                Variable.refreshDataBitImageLibrary = false;\r\n                // console.log('===============================refresh bitAdjsut image library========================================');\r\n                try {\r\n                    Variable.resultBitImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitImageLibrary', Variable.resultBitImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newBitImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newBitImageLibrary);\r\n            Variable.refreshDataBitImageLibrary = true\r\n            return { result: 'success', message: 'Add Bit Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataBitImageLibrary = true\r\n            return { result: 'success', message: 'Delete Bit Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataBitImageLibrary = true\r\n            return { result: 'success', message: 'Update Design Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Catch, Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nimport { SharedService } from '../shared_module/shared.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private isObject(variable) {\r\n        return typeof variable === 'object' && variable !== null;\r\n    }\r\n    refreshData() {\r\n        let haveChange = false\r\n        var sendRaw = false\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrBit)) {\r\n                for (let i = 0; i < Variable.haveChangeArrBit.length; i++) {\r\n                    if (Variable.haveChangeArrBit[i]) {\r\n                        haveChange = false\r\n                        sendRaw = true\r\n                        Variable.haveChangeArrBit[i] = false;\r\n                        if (Array.isArray(Variable.resultBit)) {\r\n                            for (let j = 0; j < Variable.resultBit.length; j++) {\r\n                                try {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultBit[j].idDevice) && Variable.Bit[parseInt(Variable.resultBit[j].idDevice)]) {\r\n                                        if (Variable.resultBit[j].tag) {\r\n                                            Variable.resultBit[j].status = this.sharedService.Scada_Bit_Return(\r\n                                                parseInt(Variable.resultBit[j].idDevice),\r\n                                                Variable.resultBit[j].typeDevice,\r\n                                                Variable.resultBit[j].dataType,\r\n                                                Variable.resultBit[j].tag,\r\n                                                Variable.resultBit[j]._id\r\n                                            )\r\n                                        }\r\n                                        if (Variable.resultBit[j].tagEnableView) {\r\n                                            Variable.resultBit[j].view = this.sharedService.Scada_Bit_Return(\r\n                                                parseInt(Variable.resultBit[j].idDevice),\r\n                                                Variable.resultBit[j].typeDevice,\r\n                                                Variable.resultBit[j].dataType,\r\n                                                Variable.resultBit[j].tagEnableView,\r\n                                                Variable.resultBit[j]._id\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                    haveChange = true\r\n\r\n                                    try {\r\n                                        if (\r\n                                            Variable.resultBit[j] &&\r\n                                            Variable.resultBit[j].nameTag &&\r\n                                            Variable.resultBit[j].nameTag.length > 0\r\n                                        ) {\r\n                                            Variable.ListTagBit[parseInt(Variable.resultBit[j].idDevice)] = Variable.ListTagBit[parseInt(Variable.resultBit[j].idDevice)] || {};\r\n                                            Variable.ListTagBit[parseInt(Variable.resultBit[j].idDevice)][Variable.resultBit[j].nameTag] =\r\n                                                Variable.resultBit[j].status;\r\n                                        }\r\n                                    } catch (error) {\r\n                                        console.log(error)\r\n                                    }\r\n                                } catch (error) {\r\n                                    console.log(error)\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateBit', Variable.resultBit)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Number\r\n                        if (Array.isArray(Variable.resultNumber)) {\r\n                            for (let j = 0; j < Variable.resultNumber.length; j++) {\r\n                                try {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultNumber[j].idDevice) && Variable.Bit[parseInt(Variable.resultNumber[j].idDevice)]) {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultNumber[j].tagEnableView)) {\r\n                                            Variable.resultNumber[j].view = this.sharedService.Scada_Number_Return(parseInt(Variable.resultNumber[j].idDevice), Variable.resultNumber[j].typeDevice, Variable.resultNumber[j].dataType, parseInt(Variable.resultNumber[j].negative), Variable.resultNumber[j].tagEnableView, Variable.resultNumber[j]._id, Variable.resultNumber[j].round, Variable.resultNumber[j].swapHighLow)\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                } catch (error) {\r\n                                    console.log(error)\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateNumber', Variable.resultNumber)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element\r\n                        if (Array.isArray(Variable.resultElement)) {\r\n                            for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultElement[j].idDevice) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                    let RawElement = { tagBit: null, tagOn: null, tagOff: null, tagFault: null }\r\n                                    try {\r\n                                        if (Variable.resultElement[j].typeDevice == 'Modbus-Client') {\r\n                                            //Convert data of Bit to raw array\r\n                                            if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] &&\r\n                                                    Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)].hasOwnProperty('Coil')) {\r\n                                                    RawElement.tagBit = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)].Coil\r\n                                                }\r\n                                            }\r\n\r\n                                            if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)] &&\r\n                                                    Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)].hasOwnProperty('Coil')) {\r\n                                                    RawElement.tagOn = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)].Coil\r\n                                                }\r\n                                            }\r\n\r\n                                            if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)] &&\r\n                                                    Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)].hasOwnProperty('Coil')) {\r\n                                                    RawElement.tagOff = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)].Coil\r\n                                                }\r\n                                            }\r\n\r\n                                            if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)] &&\r\n                                                    Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)].hasOwnProperty('Coil')) {\r\n                                                    RawElement.tagFault = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)].Coil\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (Variable.resultElement[j].typeDevice == 'System') {\r\n                                            //Convert data of Bit to raw array\r\n                                            if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit)) {\r\n                                                    if (Variable.resultElement[j].tagBit.length > 0) {\r\n                                                        RawElement.tagBit = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn)) {\r\n                                                    if (Variable.resultElement[j].tagOn.length > 0) {\r\n                                                        RawElement.tagOn = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff)) {\r\n                                                    if (Variable.resultElement[j].tagOff.length > 0) {\r\n                                                        RawElement.tagOff = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault)) {\r\n                                                    if (Variable.resultElement[j].tagFault.length > 0) {\r\n                                                        RawElement.tagFault = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagFault]\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (Variable.resultElement[j].typeDevice == 'Fins-Omron') {\r\n                                            //Convert data of Bit to raw array\r\n                                            if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit)) {\r\n                                                    const regex = /^\\d+\\.\\d+$/;\r\n                                                    if (regex.test(Variable.resultElement[j].tagBit)) {\r\n                                                        if (Variable.resultElement[j].tagBit.length > 0) {\r\n                                                            for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                                if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagBit)) {//obj && Variable.resultElement[j].tagBit in obj) {\r\n                                                                    RawElement.tagBit = obj[Variable.resultElement[j].tagBit]\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn)) {\r\n                                                    const regex = /^\\d+\\.\\d+$/;\r\n                                                    if (regex.test(Variable.resultElement[j].tagOn)) {\r\n                                                        if (Variable.resultElement[j].tagOn.length > 0) {\r\n                                                            for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                                if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagOn)) {//obj && Variable.resultElement[j].tagOn in obj) {\r\n                                                                    RawElement.tagOn = obj[Variable.resultElement[j].tagOn]\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff)) {\r\n                                                    const regex = /^\\d+\\.\\d+$/;\r\n                                                    if (regex.test(Variable.resultElement[j].tagOff)) {\r\n                                                        if (Variable.resultElement[j].tagOff.length > 0) {\r\n                                                            for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                                if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagOff)) {//obj && Variable.resultElement[j].tagOff in obj) {\r\n                                                                    RawElement.tagOff = obj[Variable.resultElement[j].tagOff]\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault)) {\r\n                                                    const regex = /^\\d+\\.\\d+$/;\r\n                                                    if (regex.test(Variable.resultElement[j].tagFault)) {\r\n                                                        if (Variable.resultElement[j].tagFault.length > 0) {\r\n                                                            for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                                if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagFault)) {//obj && Variable.resultElement[j].tagFault in obj) {\r\n                                                                    RawElement.tagFault = obj[Variable.resultElement[j].tagFault]\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (Variable.resultElement[j].typeDevice == 'OPC-UA') {\r\n                                            //Convert data of Bit to raw array\r\n                                            if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit)) {\r\n                                                    if (Variable.resultElement[j].tagBit.length > 0) {\r\n                                                        for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                            if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagBit)) {//obj && Variable.resultElement[j].tagBit in obj) {\r\n                                                                RawElement.tagBit = obj[Variable.resultElement[j].tagBit]\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn)) {\r\n                                                    if (Variable.resultElement[j].tagOn.length > 0) {\r\n                                                        for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                            if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagOn)) {//obj && Variable.resultElement[j].tagOn in obj) {\r\n                                                                RawElement.tagOn = obj[Variable.resultElement[j].tagOn]\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff)) {\r\n                                                    if (Variable.resultElement[j].tagOff.length > 0) {\r\n                                                        for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                            if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagOff)) {//obj && Variable.resultElement[j].tagOff in obj) {\r\n                                                                RawElement.tagOff = obj[Variable.resultElement[j].tagOff]\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault)) {\r\n                                                    if (Variable.resultElement[j].tagFault.length > 0) {\r\n                                                        for (let obj of Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                                            if (obj && obj.hasOwnProperty(Variable.resultElement[j].tagFault)) {//obj && Variable.resultElement[j].tagFault in obj) {\r\n                                                                RawElement.tagFault = obj[Variable.resultElement[j].tagFault]\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        //Initial\r\n                                        if (RawElement.tagBit !== null) {\r\n                                            if (\r\n                                                (Variable.resultElement[j].status != 1 && RawElement.tagBit)\r\n                                            ) {\r\n                                                Variable.resultElement[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                            if (\r\n                                                (Variable.resultElement[j].status != 0 && !RawElement.tagBit)\r\n                                            ) {\r\n                                                Variable.resultElement[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                        let tempState = -1\r\n                                        if (RawElement.tagOn !== null || RawElement.tagOff !== null) {\r\n                                            tempState = 2\r\n                                        }\r\n\r\n                                        if (RawElement.tagOff != null) {\r\n                                            if (parseInt(Variable.resultElement[j].notOff)) {\r\n                                                if (!RawElement.tagOff) {\r\n                                                    tempState = 0\r\n                                                }\r\n                                            } else {\r\n                                                if (RawElement.tagOff) {\r\n                                                    tempState = 0\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (RawElement.tagOn != null) {\r\n                                            if (parseInt(Variable.resultElement[j].notOn)) {\r\n                                                if (!RawElement.tagOn) {\r\n                                                    tempState = 1\r\n                                                }\r\n                                            } else {\r\n                                                if (RawElement.tagOn) {\r\n                                                    tempState = 1\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        //Conclusions tempState\r\n                                        if (tempState != -1) {\r\n                                            Variable.resultElement[j].status = tempState\r\n                                            haveChange = true\r\n                                        }\r\n\r\n                                        if (RawElement.tagFault) {\r\n                                            Variable.resultElement[j].status = 3\r\n                                            haveChange = true\r\n                                        }\r\n\r\n                                        //Process NO Have Bit Tag ON/OFF\r\n                                        if (RawElement.tagOff == null && RawElement.tagOn == null) {\r\n                                            if (RawElement.tagBit) {\r\n                                                Variable.resultElement[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultElement[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    } catch (e) {\r\n                                        console.log(e)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Screen Element in Bit No Tag ON OFF\r\n                        // if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                        //     for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                        //         if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                        //             if (\r\n                        //                 (Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                        //                 (!Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOff)\r\n                        //             ) {\r\n                        //                 Variable.resultProjectScreen_Element[j].status = 2\r\n                        //                 haveChange = true\r\n                        //             }\r\n\r\n                        //             if (!Variable.resultProjectScreen_Element[j].tagOff && !Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                        //                 // if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                        //                 if (!Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                        //                     Variable.resultProjectScreen_Element[j].status = 0\r\n                        //                     haveChange = true\r\n                        //                 }\r\n                        //                 // }\r\n                        //             }\r\n\r\n                        //             if (!Variable.resultProjectScreen_Element[j].tagOn && Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                        //                 // if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                        //                 if (Variable.Bit[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                        //                     Variable.resultProjectScreen_Element[j].status = 1\r\n                        //                     haveChange = true\r\n                        //                 }\r\n                        //                 // }\r\n                        //             }\r\n\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n\r\n                        // if (haveChange) {\r\n                        //     if (this.socketGateway && this.socketGateway.server) {\r\n                        //         this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                        //     }\r\n                        // }\r\n\r\n                        haveChange = false\r\n                        //Check Element in Bit No Tag ON OFF\r\n                        // if (Array.isArray(Variable.resultElement)) {\r\n                        //     for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                        //         if (this.checkVariableTypeNumber(Variable.resultElement[j].idDevice) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //             if (Variable.resultElement[j].typeDevice == 'Modbus-Client') {\r\n                        //                 //Convert data of Bit to raw array\r\n                        //                 let RawElement = { tagBit: null, tagOn: null, tagOff: null, tagFault: null }\r\n                        //                 if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                     if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] &&\r\n                        //                         Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)].hasOwnProperty('Coil')) {\r\n                        //                         RawElement.tagBit = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)].Coil\r\n                        //                     }\r\n                        //                 }\r\n\r\n                        //                 if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                     if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)] &&\r\n                        //                         Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)].hasOwnProperty('Coil')) {\r\n                        //                         RawElement.tagOn = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)].Coil\r\n                        //                     }\r\n                        //                 }\r\n\r\n                        //                 if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                     if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)] &&\r\n                        //                         Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)].hasOwnProperty('Coil')) {\r\n                        //                         RawElement.tagOff = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)].Coil\r\n                        //                     }\r\n                        //                 }\r\n\r\n                        //                 if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault) && Variable.Bit[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                        //                     if (Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)] &&\r\n                        //                         Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)].hasOwnProperty('Coil')) {\r\n                        //                         RawElement.tagFault = Variable.Bit[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)].Coil\r\n                        //                     }\r\n                        //                 }\r\n                        //                 //Process \r\n                        //                 if (\r\n                        //                     (RawElement.tagBit && RawElement.tagOn == null) ||\r\n                        //                     (!RawElement.tagBit && RawElement.tagOff == null)\r\n                        //                 ) {\r\n                        //                     Variable.resultElement[j].status = 2\r\n                        //                     haveChange = true\r\n                        //                 }\r\n\r\n                        //                 if (RawElement.tagOff == null && !RawElement.tagBit) {\r\n                        //                     if (RawElement.tagBit == false) {\r\n                        //                         Variable.resultElement[j].status = 0\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 }\r\n\r\n                        //                 if (RawElement.tagOn == null && RawElement.tagBit) {\r\n                        //                     if (RawElement.tagBit) {\r\n                        //                         Variable.resultElement[j].status = 1\r\n                        //                         haveChange = true\r\n                        //                     }\r\n                        //                 }\r\n\r\n                        //             }\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n\r\n                        // if (haveChange) {\r\n                        //     if (this.socketGateway && this.socketGateway.server) {\r\n                        //         this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                        //     }\r\n                        // }\r\n\r\n\r\n                        haveChange = false\r\n                        //Check in Line\r\n                        if (Array.isArray(Variable.resultLine)) {\r\n                            for (let j = 0; j < Variable.resultLine.length; j++) {\r\n                                if (Variable.resultLine[j].typeTag == 'Bit') {\r\n                                    if (!isNaN(Variable.resultLine[j].idDevice) && Variable.Bit[parseInt(Variable.resultLine[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultLine[j].tag) <= Variable.Bit[parseInt(Variable.resultLine[j].idDevice)].length) {\r\n                                        if (Variable.Bit[parseInt(Variable.resultLine[j].idDevice)][Variable.resultLine[j].tag]) {\r\n                                            Variable.resultLine[j].status = 1\r\n                                            haveChange = true\r\n                                        } else {\r\n                                            Variable.resultLine[j].status = 0\r\n                                            haveChange = true\r\n                                        }\r\n                                        // }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateLine', Variable.resultLine)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line Screen\r\n                        if (Array.isArray(Variable.resultProjectScreen_Line)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Line.length; j++) {\r\n                                if (Variable.resultProjectScreen_Line[j].typeTag == 'Bit') {\r\n                                    if (!isNaN(Variable.resultProjectScreen_Line[j].idDevice) && Variable.Bit[parseInt(Variable.resultProjectScreen_Line[j].idDevice)]) {\r\n                                        // if (parseInt(Variable.resultProjectScreen_Line[j].tag) <= Variable.Bit[parseInt(Variable.resultProjectScreen_Line[j].idDevice)].length) {\r\n                                        if (Variable.Bit[parseInt(Variable.resultProjectScreen_Line[j].idDevice)][Variable.resultProjectScreen_Line[j].tag]) {\r\n                                            Variable.resultProjectScreen_Line[j].status = 1\r\n                                            haveChange = true\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_Line[j].status = 0\r\n                                            haveChange = true\r\n                                        }\r\n                                        // }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Line', Variable.resultProjectScreen_Line)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (sendRaw) {\r\n                    this.mqttService.publish('MQTT_Raw_Bit', JSON.stringify(Variable.Bit))\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitService } from './scada_bit.service';\r\n\r\n@Controller('bit')\r\nexport class ScadaBitController {\r\n    constructor(\r\n        private readonly scadaBitService: ScadaBitService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitService.getData();\r\n    }\r\n\r\n    @Post('/insert_bit')\r\n    insertBit(@Body() requestBody) {\r\n        return this.scadaBitService.insertBit(requestBody);\r\n    }\r\n\r\n    @Put('/update_bit')\r\n    updateBit(@Body() requestBody) {\r\n        return this.scadaBitService.updateBit(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_bit')\r\n    deleteBit(@Body() requestBody) {\r\n        return this.scadaBitService.deleteBit(requestBody);\r\n    }\r\n\r\n}\r\n","// src/bit-/bit-.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Bit')\r\nexport class BitEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataType: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    editable: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttEditable: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number; \r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableTextOnOff: boolean;   \r\n\r\n    @Column({ nullable: true })\r\n    textOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    textOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameTag: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataTypeTagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    myKeyPress: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage0: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage1: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    blink0: number;\r\n\r\n    @Column({ nullable: true })\r\n    blink1: number;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableMqtt: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttTopic: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableFlexScale: boolean;\r\n\r\n    @Column({ nullable: true, default: 'Bit' })\r\n    objectType: string;\r\n\r\n    @Column({ nullable: true, default: true })\r\n    view: boolean;\r\n\r\n    @Column({ nullable: true, default: 'Toggle' })\r\n    typeAction: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaBitController } from './scada_bit.controller';\r\nimport { ScadaBitService } from './scada_bit.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitEntity } from './scada_bit.entity';\r\nimport { MqttService } from '../mqtt/mqtt.service';\r\nimport { ConfigService } from '../config/config.service';\r\nimport { SharedModule } from '../shared_module/shared.module';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([BitEntity]), SocketIoModule, SharedModule\r\n  ],\r\n  controllers: [ScadaBitController],\r\n  providers: [ScadaBitService,MqttService,ConfigService],\r\n})\r\nexport class ScadaBitModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { BitEntity } from './scada_bit.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\nimport { SharedService } from '../shared_module/shared.service';\r\n\r\n@Injectable()\r\nexport class ScadaBitService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitEntity)\r\n        private readonly bitRepository: Repository<BitEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BIT ADJUST');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBit) {\r\n                Variable.refreshDataBit = false;\r\n                // console.log('===============================refresh bit========================================');\r\n                try {\r\n                    Variable.resultBit = await this.bitRepository.find();\r\n                    this.mqttService.publish('MQTT_Raw_ResultBit', JSON.stringify(Variable.resultBit))\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBit', Variable.resultBit);\r\n                    }\r\n                    Variable.OldBit = []\r\n                    if (Array.isArray(Variable.resultBit)) {\r\n                        Variable.Temp_ProfiNet_Items_Bit = []\r\n                        for (let j = 0; j < Variable.resultBit.length; j++) {\r\n                            //Add Coil of Bit\r\n                            try {\r\n                                if (Variable.resultBit[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultBit[j].idDevice)) {\r\n                                        this.sharedService.Scada_Bit_Add(\r\n                                            parseInt(Variable.resultBit[j].idDevice),\r\n                                            Variable.resultBit[j].typeDevice,\r\n                                            Variable.resultBit[j].dataType,\r\n                                            Variable.resultBit[j].tag,\r\n                                            Variable.resultBit[j]._id\r\n                                        )\r\n                                        if (Variable.resultBit[j].tagEnableView) {\r\n                                            this.sharedService.Scada_Bit_Add(\r\n                                                parseInt(Variable.resultBit[j].idDevice),\r\n                                                Variable.resultBit[j].typeDevice,\r\n                                                Variable.resultBit[j].dataType,\r\n                                                Variable.resultBit[j].tagEnableView,\r\n                                                Variable.resultBit[j]._id\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                        Variable.Communication_Profinet_Items_Bit = Variable.Communication_Profinet_Items_Bit.slice()\r\n\r\n                        function mergeArrays(...arrays) {\r\n                            let merged = [];\r\n                            arrays.forEach(arr => {\r\n                                arr.forEach((item, index) => {\r\n                                    if (item) {\r\n                                        if (!merged[index]) {\r\n                                            merged[index] = {};\r\n                                        }\r\n                                        Object.assign(merged[index], item);\r\n                                    }\r\n                                });\r\n                            });\r\n                            return merged;\r\n                        }\r\n\r\n                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                            Variable.Communication_Profinet_Items_Bit,\r\n                            Variable.Communication_Profinet_Items_Number,\r\n                            Variable.Communication_Profinet_Items_String,\r\n                            // Variable.Communication_Profinet_Items_Gauge,\r\n                            // Variable.Communication_Profinet_Items_ProgressBar,\r\n                            // Variable.Communication_Profinet_Items_Slider,\r\n                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                            Variable.Communication_Profinet_Items_String_Popup\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBit;\r\n    }\r\n\r\n    async insertBit(bitData: any): Promise<any> {\r\n        try {\r\n            bitData._id = 'a' + Math.random().toString(36)\r\n            bitData.status = 0\r\n            const newBit = this.bitRepository.create(bitData);\r\n            await this.bitRepository.save(newBit);\r\n            Variable.refreshDataBit = true\r\n            return { result: 'success', message: 'Add Bit Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateBit(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataBit = true\r\n            return { result: 'success', message: 'Update Bit Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteBit(bitId: string): Promise<any> {\r\n        try {\r\n            await this.bitRepository.delete(bitId);\r\n            Variable.refreshDataBit = true\r\n            return { result: 'success', message: 'Delete Bit Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaCameraStreamService } from './scada_camera_stream.service';\r\n\r\n@Controller('cameraStream')\r\nexport class ScadaCameraStreamController {\r\n    constructor(\r\n        private readonly scadaCameraStreamService: ScadaCameraStreamService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaCameraStreamService.getData();\r\n    }\r\n\r\n    @Post('/insert_cameraStream')\r\n    insertCameraStream(@Body() requestBody) {\r\n        return this.scadaCameraStreamService.insertCameraStream(requestBody);\r\n    }\r\n\r\n    @Put('/update_cameraStream')\r\n    updateCameraStream(@Body() requestBody) {\r\n        return this.scadaCameraStreamService.updateCameraStream(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_cameraStream')\r\n    deleteCameraStream(@Body() requestBody) {\r\n        return this.scadaCameraStreamService.deleteCameraStream(requestBody);\r\n    }\r\n\r\n}\r\n","// src/cameraStream/cameraStream.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('CameraStream')\r\nexport class CameraStreamEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    urlStream: string;\r\n\r\n    @Column({ nullable: true, default: 'CameraStream' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaCameraStreamService } from './scada_camera_stream.service';\nimport { ScadaCameraStreamController } from './scada_camera_stream.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CameraStreamEntity } from './scada_camera_stream.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([CameraStreamEntity]), SocketIoModule],\n  providers: [ScadaCameraStreamService,],\n  controllers: [ScadaCameraStreamController]\n})\nexport class ScadaCameraStreamModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { CameraStreamEntity } from './scada_camera_stream.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaCameraStreamService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(CameraStreamEntity)\r\n        private readonly cameraStreamRepository: Repository<CameraStreamEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataCameraStream) {\r\n                Variable.refreshDataCameraStream = false;\r\n                // console.log('===============================refresh cameraStream========================================');\r\n                try {\r\n                    Variable.resultCameraStream = await this.cameraStreamRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateCameraStream', Variable.resultCameraStream);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultCameraStream\r\n    }\r\n\r\n    async insertCameraStream(cameraStreamData: any): Promise<any> {\r\n        try {\r\n            cameraStreamData._id = 'a' + Math.random().toString(36)\r\n            const newCameraStream = this.cameraStreamRepository.create(cameraStreamData);\r\n            await this.cameraStreamRepository.save(newCameraStream);\r\n            Variable.refreshDataCameraStream = true\r\n            return { result: 'success', message: 'Add CameraStream Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateCameraStream(updateData: any): Promise<any> {\r\n        try {\r\n            await this.cameraStreamRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataCameraStream = true\r\n            return { result: 'success', message: 'Update CameraStream Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteCameraStream(cameraStreamId: string): Promise<any> {\r\n        try {\r\n            await this.cameraStreamRepository.delete(cameraStreamId);\r\n            Variable.refreshDataCameraStream = true\r\n            return { result: 'success', message: 'Delete CameraStream Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaChartService } from './scada_chart.service';\r\n\r\n@Controller('chart')\r\nexport class ScadaChartController {\r\n    constructor(\r\n        private readonly scadaChartService: ScadaChartService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaChartService.getData();\r\n    }\r\n\r\n    @Post('/insert_chart')\r\n    insertChart(@Body() requestBody) {\r\n        return this.scadaChartService.insertChart(requestBody);\r\n    }\r\n\r\n    @Put('/update_chart')\r\n    updateChart(@Body() requestBody) {\r\n        return this.scadaChartService.updateChart(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_chart')\r\n    deleteChart(@Body() requestBody) {\r\n        return this.scadaChartService.deleteChart(requestBody);\r\n    }\r\n\r\n}\r\n","// src/label/label.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Chart')\r\nexport class ChartEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    title: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttTopic: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataKeyX: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataKeyY: string;\r\n\r\n    @Column({ nullable: true })\r\n    numberLines: number;\r\n\r\n    @Column({ nullable: true })\r\n    maxY: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorLine: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorLabelX: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorLabelY: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorTitle: string;\r\n\r\n    @Column({ nullable: true })\r\n    fontSizeTitle: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSizeLabelX: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSizeLabelY: number;\r\n\r\n    @Column({ nullable: true })\r\n    marginLeft: number;\r\n\r\n    @Column({ nullable: true })\r\n    marginTop: number;\r\n\r\n    @Column({ nullable: true })\r\n    marginRight: number;\r\n\r\n    @Column({ nullable: true })\r\n    marginBottom: number;\r\n\r\n    @Column({ nullable: true })\r\n    marginBottomLegend: number;\r\n\r\n    @Column({ type: 'float', nullable: true })\r\n    scale: number;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n    \r\n    @Column({ nullable: true })\r\n    type1Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type2Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type3Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type4Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type5Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type6Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type7Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type8Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type9Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type10Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttCurrentValue: string;\r\n\r\n    @Column({ nullable: true, default: 'Chart' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaChartController } from './scada_chart.controller';\nimport { ScadaChartService } from './scada_chart.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChartEntity } from './scada_chart.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([ChartEntity]), SocketIoModule],\n  controllers: [ScadaChartController],\n  providers: [ScadaChartService,]\n})\nexport class ScadaChartModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ChartEntity } from './scada_chart.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaChartService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ChartEntity)\r\n        private readonly chartRepository: Repository<ChartEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized LABEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataChart) {\r\n                Variable.refreshDataChart = false;\r\n                // console.log('===============================refresh chart========================================');\r\n                try {\r\n                    Variable.resultchart = await this.chartRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateChart', Variable.resultchart);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultchart\r\n    }\r\n\r\n    async insertChart(chartData: any): Promise<any> {\r\n        try {\r\n            chartData._id = 'a' + Math.random().toString(36)\r\n            const newChart = this.chartRepository.create(chartData);\r\n            await this.chartRepository.save(newChart);\r\n            Variable.refreshDataChart = true\r\n            return { result: 'success', message: 'Add Chart Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateChart(updateData: any): Promise<any> {\r\n        try {\r\n            await this.chartRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataChart = true\r\n            return { result: 'success', message: 'Update Chart Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteChart(chartId: string): Promise<any> {\r\n        try {\r\n            await this.chartRepository.delete(chartId);\r\n            Variable.refreshDataChart = true\r\n            return { result: 'success', message: 'Delete Chart Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaConnectionService } from './scada_connection.service';\r\n\r\n@Controller('connection')\r\nexport class ScadaConnectionController {\r\n    constructor(\r\n        private readonly scadaConnectionService: ScadaConnectionService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaConnectionService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaConnectionService.insert(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaConnectionService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaConnectionService.delete(requestBody);\r\n    }\r\n\r\n}\r\n","// src/connection-/connection-.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Connection')\r\nexport class ConnectionEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttTopic: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImgOnline: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImgOffline: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: boolean;\r\n    \r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    tooltip: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true, default: 'Connection' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaConnectionController } from './scada_connection.controller';\r\nimport { ScadaConnectionService } from './scada_connection.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConnectionEntity } from './scada_connection.entity';\r\nimport { MqttService } from '../mqtt/mqtt.service';\r\nimport { ConfigService } from '../config/config.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([ConnectionEntity]), SocketIoModule\r\n  ],\r\n  controllers: [ScadaConnectionController],\r\n  providers: [ScadaConnectionService,MqttService,ConfigService],\r\n})\r\nexport class ScadaConnectionModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ConnectionEntity } from './scada_connection.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaConnectionService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ConnectionEntity)\r\n        private readonly connectionRepository: Repository<ConnectionEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        Variable.refreshDataConnection=true\r\n        this.setupDataRefreshInterval();\r\n    }\r\n\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataConnection) {\r\n                Variable.refreshDataConnection = false;\r\n                // console.log('===============================refresh connection========================================');\r\n                try {\r\n                    Variable.resultConnection = await this.connectionRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateConnection', Variable.resultConnection);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultConnection;\r\n    }\r\n\r\n    async insert(connectionData: any): Promise<any> {\r\n        try {\r\n            connectionData._id = 'a' + Math.random().toString(36)\r\n            const newConnection = this.connectionRepository.create(connectionData);\r\n            await this.connectionRepository.save(newConnection);\r\n            Variable.refreshDataConnection = true\r\n            return { result: 'success', message: 'Add Connection Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.connectionRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataConnection = true\r\n            return { result: 'success', message: 'Update Connection Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(connectionId: string): Promise<any> {\r\n        try {\r\n            await this.connectionRepository.delete(connectionId);\r\n            Variable.refreshDataConnection = true\r\n            return { result: 'success', message: 'Delete Connection Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDateTimePickerService } from './scada_dateTimePicker.service';\r\n\r\n@Controller('dateTimePicker')\r\nexport class ScadaDateTimePickerController {\r\n    constructor(\r\n        private readonly scadaDateTimePickerService: ScadaDateTimePickerService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDateTimePickerService.getData();\r\n    }\r\n\r\n    @Post('/insert_dateTimePicker')\r\n    insertDateTimePicker(@Body() requestBody) {\r\n        return this.scadaDateTimePickerService.insertDateTimePicker(requestBody);\r\n    }\r\n\r\n    @Put('/update_dateTimePicker')\r\n    updateDateTimePicker(@Body() requestBody) {\r\n        return this.scadaDateTimePickerService.updateDateTimePicker(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_dateTimePicker')\r\n    deleteDateTimePicker(@Body() requestBody) {\r\n        return this.scadaDateTimePickerService.deleteDateTimePicker(requestBody);\r\n    }\r\n\r\n}\r\n","// src/dateTimePicker/dateTimePicker.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('DateTimePicker')\r\nexport class DateTimePickerEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqtt: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttCurrentValue: string;\r\n\r\n    @Column({ nullable: true })\r\n    size: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    zoom: number;\r\n\r\n    @Column({ nullable: true })\r\n    config: string;\r\n\r\n    @Column({ nullable: true, default: 'DateTimePicker' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaDateTimePickerService } from './scada_dateTimePicker.service';\nimport { ScadaDateTimePickerController } from './scada_dateTimePicker.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DateTimePickerEntity } from './scada_dateTimePicker.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DateTimePickerEntity]), SocketIoModule],\n  providers: [ScadaDateTimePickerService,],\n  controllers: [ScadaDateTimePickerController]\n})\nexport class ScadaDateTimePickerModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DateTimePickerEntity } from './scada_dateTimePicker.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDateTimePickerService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DateTimePickerEntity)\r\n        private readonly dateTimePickerRepository: Repository<DateTimePickerEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDateTimePicker) {\r\n                Variable.refreshDataDateTimePicker = false;\r\n                // console.log('===============================refresh dateTimePicker========================================');\r\n                try {\r\n                    Variable.resultDateTimePicker = await this.dateTimePickerRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDateTimePicker', Variable.resultDateTimePicker);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDateTimePicker\r\n    }\r\n\r\n    async insertDateTimePicker(dateTimePickerData: any): Promise<any> {\r\n        try {\r\n            dateTimePickerData._id = 'a' + Math.random().toString(36)\r\n            const newDateTimePicker = this.dateTimePickerRepository.create(dateTimePickerData);\r\n            await this.dateTimePickerRepository.save(newDateTimePicker);\r\n            Variable.refreshDataDateTimePicker = true\r\n            return { result: 'success', message: 'Add DateTimePicker Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateDateTimePicker(updateData: any): Promise<any> {\r\n        try {\r\n            await this.dateTimePickerRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDateTimePicker = true\r\n            return { result: 'success', message: 'Update DateTimePicker Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteDateTimePicker(dateTimePickerId: string): Promise<any> {\r\n        try {\r\n            await this.dateTimePickerRepository.delete(dateTimePickerId);\r\n            Variable.refreshDataDateTimePicker = true\r\n            return { result: 'success', message: 'Delete DateTimePicker Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDesignImageLibraryService } from './scada_design-image-library.service';\r\n\r\n@Controller('DesignUploadImage')\r\nexport class ScadaDesignImageLibraryController {\r\n    constructor(\r\n        private readonly scadaDesignImageLibraryService: ScadaDesignImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDesignImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaDesignImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaDesignImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaDesignImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('DesignImageLibrary')\r\nexport class DesignImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { DesignImageLibraryEntity } from './scada_design-image-library.entity';\r\nimport { ScadaDesignImageLibraryController } from './scada_design-image-library.controller';\r\nimport { ScadaDesignImageLibraryService } from './scada_design-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([DesignImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaDesignImageLibraryController],\r\n    providers: [ScadaDesignImageLibraryService,]\r\n})\r\nexport class ScadaDesignImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { DesignImageLibraryEntity } from './scada_design-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDesignImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DesignImageLibraryEntity)\r\n        private readonly designImageLibraryRepository: Repository<DesignImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDesignImageLibrary) {\r\n                Variable.refreshDataDesignImageLibrary = false;\r\n                // console.log('===============================refresh design image library========================================');\r\n                try {\r\n                    Variable.resultDesignImageLibrary = await this.designImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDesignImageLibrary', Variable.resultDesignImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDesignImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newDesignImageLibrary = this.designImageLibraryRepository.create(temp);\r\n            await this.designImageLibraryRepository.save(newDesignImageLibrary);\r\n            Variable.refreshDataDesignImageLibrary = true\r\n            return { result: 'success', message: 'Add Design Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.designImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDesignImageLibrary = true\r\n            return { result: 'success', message: 'Update Design Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.designImageLibraryRepository.delete(id);\r\n            Variable.refreshDataDesignImageLibrary = true\r\n            return { result: 'success', message: 'Delete Design Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDesignService } from './scada_design.service';\r\n\r\n@Controller('design')\r\nexport class ScadaDesignController {\r\n    constructor(\r\n        private readonly scadaDesignService: ScadaDesignService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDesignService.getData();\r\n    }\r\n\r\n    @Post('/insert_design')\r\n    insertDesign(@Body() requestBody) {\r\n        return this.scadaDesignService.insertDesign(requestBody);\r\n    }\r\n\r\n    @Put('/update_design')\r\n    updateDesign(@Body() requestBody) {\r\n        return this.scadaDesignService.updateDesign(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_design')\r\n    deleteDesign(@Body() requestBody) {\r\n        return this.scadaDesignService.deleteDesign(requestBody);\r\n    }\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Design')\r\nexport class DesignEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableFlexScale: boolean;\r\n\r\n    @Column({ nullable: true, default: 'Design' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaDesignController } from './scada_design.controller';\nimport { ScadaDesignService } from './scada_design.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DesignEntity } from './scada_design.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DesignEntity]), SocketIoModule],\n  controllers: [ScadaDesignController],\n  providers: [ScadaDesignService,]\n})\nexport class ScadaDesignModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DesignEntity } from './scada_design.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDesignService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DesignEntity)\r\n        private readonly designRepository: Repository<DesignEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDesign) {\r\n                Variable.refreshDataDesign = false;\r\n                // console.log('===============================refresh design========================================');\r\n                try {\r\n                    Variable.resultDesign = await this.designRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDesign', Variable.resultDesign);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDesign\r\n    }\r\n\r\n    async insertDesign(designData: any): Promise<any> {\r\n        try {\r\n            designData._id = 'a' + Math.random().toString(36)\r\n            const newDesign = this.designRepository.create(designData);\r\n            await this.designRepository.save(newDesign);\r\n            Variable.refreshDataDesign = true\r\n            return { result: 'success', message: 'Add Design Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateDesign(updateData: any): Promise<any> {\r\n        try {\r\n            await this.designRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDesign = true\r\n            return { result: 'success', message: 'Update Design Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteDesign(designId: string): Promise<any> {\r\n        try {\r\n            await this.designRepository.delete(designId);\r\n            Variable.refreshDataDesign = true\r\n            return { result: 'success', message: 'Delete Design Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDesignTableService } from './scada_design_table.service';\r\n\r\n@Controller('designTable')\r\nexport class ScadaDesignTableController {\r\n    constructor(\r\n        private readonly scadaDesign_tableService: ScadaDesignTableService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDesign_tableService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insertDesign_table(@Body() requestBody) {\r\n        return this.scadaDesign_tableService.insertDesign_table(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    updateDesign_table(@Body() requestBody) {\r\n        return this.scadaDesign_tableService.updateDesign_table(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    deleteDesign_table(@Body() requestBody) {\r\n        return this.scadaDesign_tableService.deleteDesign_table(requestBody);\r\n    }\r\n\r\n}\r\n","// src/design_table/design_table.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('DesignTable')\r\nexport class DesignTableEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    rows: number; \r\n\r\n    @Column({ nullable: true })\r\n    columns: number; \r\n\r\n    @Column({ nullable: true })\r\n    borderWidth: number; \r\n\r\n    @Column({ nullable: true })\r\n    columnWidths: string;\r\n\r\n    @Column({ nullable: true })\r\n    rowHeights: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number; \r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true, default: 'DesignTable' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaDesignTableController } from './scada_design_table.controller';\nimport { ScadaDesignTableService } from './scada_design_table.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DesignTableEntity } from './scada_design_table.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([DesignTableEntity]), SocketIoModule],\n  controllers: [ScadaDesignTableController],\n  providers: [ScadaDesignTableService,]\n})\nexport class ScadaDesignTableModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DesignTableEntity } from './scada_design_table.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDesignTableService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DesignTableEntity)\r\n        private readonly design_tableRepository: Repository<DesignTableEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        Variable.refreshDataDesignTable=true\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDesignTable) {\r\n                Variable.refreshDataDesignTable = false;\r\n                // console.log('===============================refresh design_table========================================');\r\n                try {\r\n                    Variable.resultDesignTable = await this.design_tableRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDesignTable', Variable.resultDesignTable);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDesignTable\r\n    }\r\n\r\n    async insertDesign_table(design_tableData: any): Promise<any> {\r\n        try {\r\n            design_tableData._id = 'a' + Math.random().toString(36)\r\n            const newDesign_table = this.design_tableRepository.create(design_tableData);\r\n            await this.design_tableRepository.save(newDesign_table);\r\n            Variable.refreshDataDesignTable = true\r\n            return { result: 'success', message: 'Add Design_table Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateDesign_table(updateData: any): Promise<any> {\r\n        try {\r\n            await this.design_tableRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDesignTable = true\r\n            return { result: 'success', message: 'Update Design_table Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteDesign_table(design_tableId: string): Promise<any> {\r\n        try {\r\n            await this.design_tableRepository.delete(design_tableId);\r\n            Variable.refreshDataDesignTable = true\r\n            return { result: 'success', message: 'Delete Design_table Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordAdjustRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrDWordAdjust)) {\r\n            for (let i = 0; i < Variable.haveChangeArrDWordAdjust.length; i++) {\r\n                if (Variable.haveChangeArrDWordAdjust[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrDWordAdjust[i] = false;\r\n                    if (Array.isArray(Variable.resultDWordAdjust)) {\r\n                        for (let j = 0; j < Variable.resultDWordAdjust.length; j++) {\r\n                            if (this.checkVariableTypeNumber(Variable.resultDWordAdjust[j].idDevice) && Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)]) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultDWordAdjust[j].tag)) {\r\n                                    if (Variable.resultDWordAdjust[j].tag <= Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultDWordAdjust[j].negative)) {\r\n                                            if (parseInt(Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]) > 2147483647) {\r\n                                                Variable.resultDWordAdjust[j].text = parseInt(Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]) - 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            if (Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag] < 0) {\r\n                                                Variable.resultDWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag] + 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]\r\n                                            }\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                } else {\r\n                                    if (Variable.resultDWordAdjust[j].tag.length > 0 && Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)]) {\r\n                                        for (let obj of Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)]) {\r\n                                            if (Variable.resultDWordAdjust[j].tag in obj) {\r\n                                                Variable.resultDWordAdjust[j].text = obj[Variable.resultDWordAdjust[j].tag]\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateDWordAdjust', Variable.resultDWordAdjust)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_DWordAdjust)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_DWordAdjust.length; j++) {\r\n                            if (Variable.resultProjectScreen_DWordAdjust[j].idDevice && Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_DWordAdjust[j].tag <= Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)].length) {\r\n                                    if (parseInt(Variable.resultProjectScreen_DWordAdjust[j].negative)) {\r\n                                        if (parseInt(Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]) > 2147483647) {\r\n                                            Variable.resultProjectScreen_DWordAdjust[j].text = parseInt(Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]) - 4294967296\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_DWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]\r\n                                        }\r\n                                    } else {\r\n                                        Variable.resultProjectScreen_DWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]\r\n                                    }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_DWordAdjust', Variable.resultProjectScreen_DWordAdjust)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDWordAdjustService } from './scada_dword-adjust.service';\r\n\r\n@Controller('dwordAdjust')\r\nexport class ScadaDWordAdjustController {\r\n    constructor(\r\n        private readonly scadaDWordAdjustService: ScadaDWordAdjustService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDWordAdjustService.getData();\r\n    }\r\n\r\n    @Post('/insert_dwordAdjust')\r\n    insertDWordAdjust(@Body() requestBody) {\r\n        return this.scadaDWordAdjustService.insertDWordAdjust(requestBody);\r\n    }\r\n\r\n    @Put('/update_dwordAdjust')\r\n    updateDWordAdjust(@Body() requestBody) {\r\n        return this.scadaDWordAdjustService.updateDWordAdjust(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_dwordAdjust')\r\n    deleteDWordAdjust(@Body() requestBody) {\r\n        return this.scadaDWordAdjustService.deleteDWordAdjust(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('DWordAdjust')\r\nexport class DWordAdjustEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaDWordAdjustController } from './scada_dword-adjust.controller';\r\nimport { ScadaDWordAdjustService } from './scada_dword-adjust.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { DWordAdjustEntity } from './scada_dword-adjust.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([DWordAdjustEntity]), SocketIoModule],\r\n  controllers: [ScadaDWordAdjustController],\r\n  providers: [ScadaDWordAdjustService,]\r\n})\r\nexport class ScadaDWordAdjustModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DWordAdjustEntity } from './scada_dword-adjust.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordAdjustService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DWordAdjustEntity)\r\n        private readonly dwordAdjustRepository: Repository<DWordAdjustEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized DWORDADJUST');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDWordAdjust) {\r\n                Variable.refreshDataDWordAdjust = false;\r\n                // console.log('===============================refresh dwordAdjust========================================');\r\n                try {\r\n                    Variable.resultDWordAdjust = await this.dwordAdjustRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDWordAdjust', Variable.resultDWordAdjust);\r\n                    }\r\n                    Variable.OldDWordAdjust = []\r\n                    if (Array.isArray(Variable.resultDWordAdjust)) {\r\n                        for (let j = 0; j < Variable.resultDWordAdjust.length; j++) {\r\n                            //Add holding register of DWordAdjust\r\n                            try {\r\n                                if (Variable.resultDWordAdjust[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultDWordAdjust[j].idDevice)) {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultDWordAdjust[j].tag)) {\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordAdjust[j].idDevice)] = Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordAdjust[j].idDevice)] || []\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordAdjust[j].idDevice)][parseInt(Variable.resultDWordAdjust[j].tag)] = parseInt(Variable.resultDWordAdjust[j].tag)\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordAdjust[j].idDevice)][parseInt(Variable.resultDWordAdjust[j].tag) + 1] = parseInt(Variable.resultDWordAdjust[j].tag) + 1\r\n                                            Variable.DWordTag[parseInt(Variable.resultDWordAdjust[j].idDevice)] = Variable.DWordTag[parseInt(Variable.resultDWordAdjust[j].idDevice)] || []\r\n                                            Variable.DWordTag[parseInt(Variable.resultDWordAdjust[j].idDevice)][parseInt(Variable.resultDWordAdjust[j].tag)] = parseInt(Variable.resultDWordAdjust[j].tag)\r\n                                        } else {\r\n                                            if (Variable.resultDWordAdjust[j].tag.length > 0) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultDWordAdjust[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultDWordAdjust[j].idDevice)] || []\r\n                                                if (!Variable.Communication_OPC_Items[parseInt(Variable.resultDWordAdjust[j].idDevice)].includes(Variable.resultDWordAdjust[j].tag)) {\r\n                                                    Variable.Communication_OPC_Items[parseInt(Variable.resultDWordAdjust[j].idDevice)].push(Variable.resultDWordAdjust[j].tag)\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDWordAdjust\r\n    }\r\n\r\n    async insertDWordAdjust(dwordAdjustData: any): Promise<any> {\r\n        try {\r\n            dwordAdjustData._id = 'a' + Math.random().toString(36)\r\n            dwordAdjustData.text = 0\r\n            const newDWordAdjust = this.dwordAdjustRepository.create(dwordAdjustData);\r\n            await this.dwordAdjustRepository.save(newDWordAdjust);\r\n            Variable.refreshDataDWordAdjust = true\r\n            return { result: 'success', message: 'Add DWordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateDWordAdjust(updateData: any): Promise<any> {\r\n        try {\r\n            await this.dwordAdjustRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDWordAdjust = true\r\n            return { result: 'success', message: 'Update DWordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteDWordAdjust(dwordAdjustId: string): Promise<any> {\r\n        try {\r\n            await this.dwordAdjustRepository.delete(dwordAdjustId);\r\n            Variable.refreshDataDWordAdjust = true\r\n            return { result: 'success', message: 'Delete DWordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordDisplayRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrDWordDisplay)) {\r\n            for (let i = 0; i < Variable.haveChangeArrDWordDisplay.length; i++) {\r\n                if (Variable.haveChangeArrDWordDisplay[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrDWordDisplay[i] = false;\r\n                    if (Array.isArray(Variable.resultDWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultDWordDisplay.length; j++) {\r\n                            if (this.checkVariableTypeNumber(Variable.resultDWordDisplay[j].idDevice) && Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)]) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultDWordDisplay[j].tag)) {\r\n                                    if (Variable.resultDWordDisplay[j].tag <= Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultDWordDisplay[j].negative)) {\r\n                                            if (parseInt(Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]) > 2147483647) {\r\n                                                Variable.resultDWordDisplay[j].text = parseInt(Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]) - 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            if (Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag] < 0) {\r\n                                                Variable.resultDWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag] + 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]\r\n                                            }\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                } else {\r\n                                    if (Variable.resultDWordDisplay[j].tag.length > 0 && Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)]) {\r\n                                        for (let obj of Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)]) {\r\n                                            if (Variable.resultDWordDisplay[j].tag in obj) {\r\n                                                Variable.resultDWordDisplay[j].text = obj[Variable.resultDWordDisplay[j].tag]\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateDWordDisplay', Variable.resultDWordDisplay)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_DWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_DWordDisplay.length; j++) {\r\n                            if (Variable.resultProjectScreen_DWordDisplay[j].idDevice && Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_DWordDisplay[j].tag <= Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)].length) {\r\n                                    if (parseInt(Variable.resultProjectScreen_DWordDisplay[j].negative)) {\r\n                                        if (parseInt(Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]) > 2147483647) {\r\n                                            Variable.resultProjectScreen_DWordDisplay[j].text = parseInt(Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]) - 4294967296\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_DWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]\r\n                                        }\r\n                                    } else {\r\n                                        Variable.resultProjectScreen_DWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]\r\n                                    }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_DWordDisplay', Variable.resultProjectScreen_DWordDisplay)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDWordDisplayService } from './scada_dword-display.service';\r\n\r\n@Controller('dwordDisplay')\r\nexport class ScadaDWordDisplayController {\r\n    constructor(\r\n        private readonly scadaDWordDisplayService: ScadaDWordDisplayService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDWordDisplayService.getData();\r\n    }\r\n\r\n    @Post('/insert_dwordDisplay')\r\n    insertDWordDisplay(@Body() requestBody) {\r\n        return this.scadaDWordDisplayService.insertDWordDisplay(requestBody);\r\n    }\r\n\r\n    @Put('/update_dwordDisplay')\r\n    updateDWordDisplay(@Body() requestBody) {\r\n        return this.scadaDWordDisplayService.updateDWordDisplay(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_dwordDisplay')\r\n    deleteDWordDisplay(@Body() requestBody) {\r\n        return this.scadaDWordDisplayService.deleteDWordDisplay(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('DWordDisplay')\r\nexport class DWordDisplayEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaDWordDisplayController } from './scada_dword-display.controller';\nimport { ScadaDWordDisplayService } from './scada_dword-display.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DWordDisplayEntity } from './scada_dword-display.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DWordDisplayEntity]), SocketIoModule],\n  controllers: [ScadaDWordDisplayController],\n  providers: [ScadaDWordDisplayService,]\n})\nexport class ScadaDWordDisplayModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DWordDisplayEntity } from './scada_dword-display.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordDisplayService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DWordDisplayEntity)\r\n        private readonly dwordDisplayRepository: Repository<DWordDisplayEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized DWORDDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDWordDisplay) {\r\n                Variable.refreshDataDWordDisplay = false;\r\n                // console.log('===============================refresh dwordDisplay========================================');\r\n                try {\r\n                    Variable.resultDWordDisplay = await this.dwordDisplayRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDWordDisplay', Variable.resultDWordDisplay);\r\n                    }\r\n                    Variable.OldDWordDisplay = []\r\n                    if (Array.isArray(Variable.resultDWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultDWordDisplay.length; j++) {\r\n                            //Add holding register of DWordDisplay\r\n                            try {\r\n                                if (Variable.resultDWordDisplay[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultDWordDisplay[j].idDevice)) {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultDWordDisplay[j].tag)) {\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordDisplay[j].idDevice)] = Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordDisplay[j].idDevice)] || []\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordDisplay[j].idDevice)][parseInt(Variable.resultDWordDisplay[j].tag)] = parseInt(Variable.resultDWordDisplay[j].tag)\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultDWordDisplay[j].idDevice)][parseInt(Variable.resultDWordDisplay[j].tag) + 1] = parseInt(Variable.resultDWordDisplay[j].tag) + 1\r\n                                            Variable.DWordTag[parseInt(Variable.resultDWordDisplay[j].idDevice)] = Variable.DWordTag[parseInt(Variable.resultDWordDisplay[j].idDevice)] || []\r\n                                            Variable.DWordTag[parseInt(Variable.resultDWordDisplay[j].idDevice)][parseInt(Variable.resultDWordDisplay[j].tag)] = parseInt(Variable.resultDWordDisplay[j].tag)\r\n                                        }\r\n                                    } else {\r\n                                        if (Variable.resultDWordDisplay[j].tag.length > 0) {\r\n                                            Variable.Communication_OPC_Items[parseInt(Variable.resultDWordDisplay[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultDWordDisplay[j].idDevice)] || []\r\n                                            if (!Variable.Communication_OPC_Items[parseInt(Variable.resultDWordDisplay[j].idDevice)].includes(Variable.resultDWordDisplay[j].tag)) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultDWordDisplay[j].idDevice)].push(Variable.resultDWordDisplay[j].tag)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDWordDisplay\r\n    }\r\n\r\n    async insertDWordDisplay(dwordDisplayData: any): Promise<any> {\r\n        try {\r\n            dwordDisplayData._id = 'a' + Math.random().toString(36)\r\n            dwordDisplayData.text = 0\r\n            const newDWordDisplay = this.dwordDisplayRepository.create(dwordDisplayData);\r\n            await this.dwordDisplayRepository.save(newDWordDisplay);\r\n            Variable.refreshDataDWordDisplay = true\r\n            return { result: 'success', message: 'Add DWordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateDWordDisplay(updateData: any): Promise<any> {\r\n        try {\r\n            await this.dwordDisplayRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDWordDisplay = true\r\n            return { result: 'success', message: 'Update DWordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteDWordDisplay(dwordDisplayId: string): Promise<any> {\r\n        try {\r\n            await this.dwordDisplayRepository.delete(dwordDisplayId);\r\n            Variable.refreshDataDWordDisplay = true\r\n            return { result: 'success', message: 'Delete DWordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaElementImageLibraryService } from './scada_element-image-library.service';\r\n\r\n@Controller('uploadImageElement')\r\nexport class ScadaElementImageLibraryController {\r\n    constructor(\r\n        private readonly scadaElementImageLibraryService: ScadaElementImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaElementImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaElementImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaElementImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaElementImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('ElementImageLibrary')\r\nexport class ElementImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ElementImageLibraryEntity } from './scada_element-image-library.entity';\r\nimport { ScadaElementImageLibraryController } from './scada_element-image-library.controller';\r\nimport { ScadaElementImageLibraryService } from './scada_element-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([ElementImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaElementImageLibraryController],\r\n    providers: [ScadaElementImageLibraryService,]\r\n})\r\nexport class ScadaElementImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { ElementImageLibraryEntity } from './scada_element-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaElementImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ElementImageLibraryEntity)\r\n        private readonly elementImageLibraryRepository: Repository<ElementImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized ELEMENT IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataElementImageLibrary) {\r\n                Variable.refreshDataElementImageLibrary = false;\r\n                // console.log('===============================refresh element image library========================================');\r\n                try {\r\n                    Variable.resultElementImageLibrary = await this.elementImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateElementImageLibrary', Variable.resultElementImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultElementImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newElementImageLibrary = this.elementImageLibraryRepository.create(temp);\r\n            await this.elementImageLibraryRepository.save(newElementImageLibrary);\r\n            Variable.refreshDataElementImageLibrary = true\r\n            return { result: 'success', message: 'Add Element Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.elementImageLibraryRepository.delete(id);\r\n            Variable.refreshDataElementImageLibrary = true\r\n            return { result: 'success', message: 'Delete Element Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.elementImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataElementImageLibrary = true\r\n            return { result: 'success', message: 'Update Element Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaElementRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrElement)) {\r\n                for (let i = 0; i < Variable.haveChangeArrElement.length; i++) {\r\n                    if (Variable.haveChangeArrElement[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrElement[i] = false;\r\n\r\n                        for (let j = 0; j < Variable.resultElementWord.length; j++) {\r\n                            try {\r\n                                if (Variable.resultElementWord[j].idDevice && Variable.Element[parseInt(Variable.resultElementWord[j].idDevice)]) {\r\n                                    if (Variable.resultElementWord[j].indexElement <= Variable.Element[parseInt(Variable.resultElementWord[j].idDevice)].length) {\r\n                                        Variable.resultElementWord[j].status = Variable.Element[parseInt(Variable.resultElementWord[j].idDevice)][Variable.resultElementWord[j].indexElement]\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                            \r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateElementWord', Variable.resultElementWord);\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line\r\n                        if (Array.isArray(Variable.resultLine)) {\r\n                            for (let j = 0; j < Variable.resultLine.length; j++) {\r\n                                try {\r\n                                    if (Variable.resultLine[j].typeTag == 'Element') {\r\n                                        if (!isNaN(Variable.resultLine[j].idDevice) && Variable.Element[parseInt(Variable.resultLine[j].idDevice)]) {\r\n                                            if (parseInt(Variable.resultLine[j].tag) <= Variable.Element[parseInt(Variable.resultLine[j].idDevice)].length) {\r\n                                                //(num>>bit) % 2 != 0\r\n                                                if (parseInt(Variable.Element[parseInt(Variable.resultLine[j].idDevice)][Variable.resultLine[j].tag]) >> 0 % 2 != 0) {\r\n                                                    Variable.resultLine[j].status = 1\r\n                                                    haveChange = true\r\n                                                } else {\r\n                                                    Variable.resultLine[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } catch (error) {\r\n                                    console.log(error)\r\n                                }\r\n                                \r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateLine', Variable.resultLine);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaElementService } from './scada_element.service';\r\n\r\n@Controller('Element')\r\nexport class ScadaElementController {\r\n    constructor(\r\n        private readonly scadaElementService: ScadaElementService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaElementService.getData();\r\n    }\r\n\r\n    @Post('/insert_Element')\r\n    insertElement(@Body() requestBody) {\r\n        return this.scadaElementService.insertElement(requestBody);\r\n    }\r\n\r\n    @Put('/update_Element')\r\n    updateElement(@Body() requestBody) {\r\n        return this.scadaElementService.updateElement(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_Element')\r\n    deleteElement(@Body() requestBody) {\r\n        return this.scadaElementService.deleteElement(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Element')\r\nexport class ElementEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataTypeTagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagBit: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagFault: string;\r\n\r\n    @Column({ nullable: true })\r\n    notOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    notOff: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameElement: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    src_R: string;\r\n\r\n    @Column({ nullable: true })\r\n    src_S: string;\r\n\r\n    @Column({ nullable: true })\r\n    src_N: string;\r\n\r\n    @Column({ nullable: true })\r\n    src_F: string;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    enablePopup: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    childObject: string;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectTitle: string;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectLeft: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectTop: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectWidth: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectHeight: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectCssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectBackgroundColor: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableFlexScale: boolean;\r\n\r\n    @Column({ nullable: true, default: 'Element' })\r\n    objectType: string;\r\n\r\n    @Column({ nullable: true, default: true })\r\n    view: boolean;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaElementController } from './scada_element.controller';\nimport { ScadaElementService } from './scada_element.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ElementEntity } from './scada_element.entity';\nimport { MqttService } from '../mqtt/mqtt.service';\nimport { ConfigService } from '../config/config.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ElementEntity]), SocketIoModule],\n  controllers: [ScadaElementController],\n  providers: [ScadaElementService,MqttService,ConfigService]\n})\nexport class ScadaElementModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ElementEntity } from './scada_element.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaElementService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ElementEntity)\r\n        private readonly ElementRepository: Repository<ElementEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized Element');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataElement) {\r\n                Variable.refreshDataElement = false;\r\n                // console.log('===============================refresh Element========================================');\r\n                try {\r\n                    Variable.resultElement = await this.ElementRepository.find();\r\n                    this.mqttService.publish('MQTT_Raw_ResultElement', JSON.stringify(Variable.resultElement))\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateElement', Variable.resultElement);\r\n                    }\r\n                    for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                        //Add coil of BitDisplay/BitAdjust\r\n                        try {\r\n                            if (Variable.resultElement[j]) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultElement[j].idDevice)) {\r\n                                    if (Variable.resultElement[j].typeDevice == 'Modbus-Client') {\r\n                                        Variable.Modbus_Client_Coil[parseInt(Variable.resultElement[j].idDevice)] = Variable.Modbus_Client_Coil[parseInt(Variable.resultElement[j].idDevice)] || []\r\n                                        Variable.Modbus_Client_DiscreteInput[parseInt(Variable.resultElement[j].idDevice)] = Variable.Modbus_Client_DiscreteInput[parseInt(Variable.resultElement[j].idDevice)] || []\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit)) {\r\n                                            if (Variable.resultElement[j].dataType == 'Coil') {\r\n                                                Variable.Modbus_Client_Coil[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] = parseInt(Variable.resultElement[j].tagBit)\r\n                                            }\r\n                                            if (Variable.resultElement[j].dataType == 'DiscreteInput') {\r\n                                                Variable.Modbus_Client_DiscreteInput[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] = parseInt(Variable.resultElement[j].tagBit)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn)) {\r\n                                            if (Variable.resultElement[j].dataType == 'Coil') {\r\n                                                Variable.Modbus_Client_Coil[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)] = parseInt(Variable.resultElement[j].tagOn)\r\n                                            }\r\n                                            if (Variable.resultElement[j].dataType == 'DiscreteInput') {\r\n                                                Variable.Modbus_Client_DiscreteInput[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOn)] = parseInt(Variable.resultElement[j].tagOn)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff)) {\r\n                                            if (Variable.resultElement[j].dataType == 'Coil') {\r\n                                                Variable.Modbus_Client_Coil[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)] = parseInt(Variable.resultElement[j].tagOff)\r\n                                            }\r\n                                            if (Variable.resultElement[j].dataType == 'DiscreteInput') {\r\n                                                Variable.Modbus_Client_DiscreteInput[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagOff)] = parseInt(Variable.resultElement[j].tagOff)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault)) {\r\n                                            if (Variable.resultElement[j].dataType == 'Coil') {\r\n                                                Variable.Modbus_Client_Coil[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)] = parseInt(Variable.resultElement[j].tagFault)\r\n                                            }\r\n                                            if (Variable.resultElement[j].dataType == 'DiscreteInput') {\r\n                                                Variable.Modbus_Client_DiscreteInput[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagFault)] = parseInt(Variable.resultElement[j].tagFault)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagEnableView)) {\r\n                                            if (Variable.resultElement[j].dataType == 'Coil') {\r\n                                                Variable.Modbus_Client_Coil[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagEnableView)] = parseInt(Variable.resultElement[j].tagEnableView)\r\n                                            }\r\n                                            if (Variable.resultElement[j].dataType == 'DiscreteInput') {\r\n                                                Variable.Modbus_Client_DiscreteInput[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagEnableView)] = parseInt(Variable.resultElement[j].tagEnableView)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultElement[j].typeDevice == 'Fins-Omron') {\r\n                                        Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultElement[j].idDevice)] = Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultElement[j].idDevice)] || []\r\n                                        Variable.Communication_PLC_Word_Address[parseInt(Variable.resultElement[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(Variable.resultElement[j].idDevice)] || []\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit)) {\r\n                                            const regex = /^\\d+\\.\\d+$/;\r\n                                            if (regex.test(Variable.resultElement[j].tagBit)) {\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagBit)\r\n                                                Variable.Communication_PLC_Word_Address[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit.split('.')[0]] = parseInt(Variable.resultElement[j].tagBit.split('.')[0])\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn)) {\r\n                                            const regex = /^\\d+\\.\\d+$/;\r\n                                            if (regex.test(Variable.resultElement[j].tagOn)) {\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagOn)\r\n                                                Variable.Communication_PLC_Word_Address[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn.split('.')[0]] = parseInt(Variable.resultElement[j].tagOn.split('.')[0])\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff)) {\r\n                                            const regex = /^\\d+\\.\\d+$/;\r\n                                            if (regex.test(Variable.resultElement[j].tagOff)) {\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagOff)\r\n                                                Variable.Communication_PLC_Word_Address[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff.split('.')[0]] = parseInt(Variable.resultElement[j].tagOff.split('.')[0])\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault)) {\r\n                                            const regex = /^\\d+\\.\\d+$/;\r\n                                            if (regex.test(Variable.resultElement[j].tagFault)) {\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagFault)\r\n                                                Variable.Communication_PLC_Word_Address[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagFault.split('.')[0]] = parseInt(Variable.resultElement[j].tagFault.split('.')[0])\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagEnableView)) {\r\n                                            const regex = /^\\d+\\.\\d+$/;\r\n                                            if (regex.test(Variable.resultElement[j].tagEnableView)) {\r\n                                                Variable.Communication_PLC_Bit_Address_String[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagEnableView)\r\n                                                Variable.Communication_PLC_Word_Address[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagEnableView.split('.')[0]] = parseInt(Variable.resultElement[j].tagEnableView.split('.')[0])\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultElement[j].typeDevice == 'OPC-UA') {\r\n                                        Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)] || []\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagBit)) {\r\n                                            if (!Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].includes(Variable.resultElement[j].tagBit)) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagBit)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOn)) {\r\n                                            if (!Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].includes(Variable.resultElement[j].tagOn)) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagOn)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagOff)) {\r\n                                            if (!Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].includes(Variable.resultElement[j].tagOff)) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagOff)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagFault)) {\r\n                                            if (!Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].includes(Variable.resultElement[j].tagFault)) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagFault)\r\n                                            }\r\n                                        }\r\n                                        if (this.checkVariableTypeNumber(Variable.resultElement[j].tagEnableView)) {\r\n                                            if (!Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].includes(Variable.resultElement[j].tagEnableView)) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultElement[j].idDevice)].push(Variable.resultElement[j].tagEnableView)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        } catch (error) {\r\n                            console.log(error)\r\n                        }\r\n                    }\r\n\r\n                    Variable.OldBitAdjust = []\r\n                    Variable.OldBitDisplay = []\r\n\r\n                    //Add Address for Popup\r\n                    if (Array.isArray(Variable.resultElement)) {\r\n                        for (let i = 0; i < Variable.resultElement.length; i++) {\r\n                            //Add holding register of Number\r\n                            try {\r\n                                if (Variable.resultElement[i] && Variable.resultElement[i].childObject) {\r\n                                    if (Variable.resultElement[i].childObject.length > 0) {\r\n                                        let rawDataChildObject = JSON.parse(Variable.resultElement[i].childObject.toString())\r\n                                        //Number\r\n                                        let tempNumber: NumberType[] = rawDataChildObject.filter((item: any) => JSON.parse(item).scadaType === 'Number').map((item: any) =>\r\n                                            JSON.parse(item)\r\n                                        )\r\n                                        for (let j = 0; j < tempNumber.length; j++) {\r\n                                            //Add holding register of Number\r\n                                            try {\r\n                                                if (tempNumber[j]) {\r\n                                                    if (this.checkVariableTypeNumber(tempNumber[j].idDevice)) {\r\n                                                        if (tempNumber[j].typeDevice == 'Modbus-Client') {\r\n                                                            if (this.checkVariableTypeNumber(tempNumber[j].tag)) {\r\n                                                                if (tempNumber[j].dataType == 'HoldingRegister-Int16') {\r\n                                                                    Variable.Modbus_Client_HoldingRegister[parseInt(tempNumber[j].idDevice)] = Variable.Modbus_Client_HoldingRegister[parseInt(tempNumber[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_HoldingRegister[parseInt(tempNumber[j].idDevice)][parseInt(tempNumber[j].tag)] = parseInt(tempNumber[j].tag)\r\n                                                                }\r\n                                                                if (tempNumber[j].dataType == 'HoldingRegister-Int32') {\r\n                                                                    Variable.Modbus_Client_HoldingRegister[parseInt(tempNumber[j].idDevice)] = Variable.Modbus_Client_HoldingRegister[parseInt(tempNumber[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_HoldingRegister[parseInt(tempNumber[j].idDevice)][parseInt(tempNumber[j].tag)] = parseInt(tempNumber[j].tag)\r\n                                                                    Variable.Modbus_Client_HoldingRegister[parseInt(tempNumber[j].idDevice)][parseInt(tempNumber[j].tag) + 1] = parseInt(tempNumber[j].tag) + 1\r\n                                                                }\r\n\r\n                                                                if (tempNumber[j].dataType == 'InputRegister-Int16') {\r\n                                                                    Variable.Modbus_Client_InputRegister[parseInt(tempNumber[j].idDevice)] = Variable.Modbus_Client_InputRegister[parseInt(tempNumber[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_InputRegister[parseInt(tempNumber[j].idDevice)][parseInt(tempNumber[j].tag)] = parseInt(tempNumber[j].tag)\r\n                                                                }\r\n                                                                if (tempNumber[j].dataType == 'InputRegister-Int32') {\r\n                                                                    Variable.Modbus_Client_InputRegister[parseInt(tempNumber[j].idDevice)] = Variable.Modbus_Client_InputRegister[parseInt(tempNumber[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_InputRegister[parseInt(tempNumber[j].idDevice)][parseInt(tempNumber[j].tag)] = parseInt(tempNumber[j].tag)\r\n                                                                    Variable.Modbus_Client_InputRegister[parseInt(tempNumber[j].idDevice)][parseInt(tempNumber[j].tag) + 1] = parseInt(tempNumber[j].tag) + 1\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        if (tempNumber[j].typeDevice == 'Fins-Omron') {\r\n                                                            if (this.checkVariableTypeNumber(tempNumber[j].tag)) {\r\n                                                                Variable.Communication_PLC_Word_Address[parseInt(tempNumber[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(tempNumber[j].idDevice)] || []\r\n                                                                Variable.Communication_PLC_Word_Address[parseInt(tempNumber[j].idDevice)][parseInt(tempNumber[j].tag)] = parseInt(tempNumber[j].tag)\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        if (tempNumber[j].typeDevice == 'OPC-UA' || tempNumber[j].typeDevice == 'OPC-DA') {\r\n                                                            if (tempNumber[j].tag.length > 0) {\r\n                                                                Variable.Communication_OPC_Items[parseInt(tempNumber[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(tempNumber[j].idDevice)] || []\r\n                                                                if (!Variable.Communication_OPC_Items[parseInt(tempNumber[j].idDevice)].includes(tempNumber[j].tag)) {\r\n                                                                    Variable.Communication_OPC_Items[parseInt(tempNumber[j].idDevice)].push(tempNumber[j].tag)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        if (tempNumber[j].typeDevice == 'ACE') {\r\n                                                            if (tempNumber[j].tag.length > 0) {\r\n                                                                Variable.Communication_ACE_Items[parseInt(tempNumber[j].idDevice)] = Variable.Communication_ACE_Items[parseInt(tempNumber[j].idDevice)] || []\r\n                                                                if (!Variable.Communication_ACE_Items[parseInt(tempNumber[j].idDevice)].includes(tempNumber[j].tag)) {\r\n                                                                    Variable.Communication_ACE_Items[parseInt(tempNumber[j].idDevice)].push(tempNumber[j].tag)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            } catch (error) {\r\n                                                console.log(error)\r\n                                            }\r\n                                        }\r\n\r\n                                        //Bit\r\n                                        let tempBit: BitType[] = rawDataChildObject.filter((item: any) => JSON.parse(item).scadaType === 'Bit').map((item: any) =>\r\n                                            JSON.parse(item)\r\n                                        )\r\n                                        for (let j = 0; j < tempBit.length; j++) {\r\n                                            try {\r\n                                                if (tempBit[j]) {\r\n                                                    if (this.checkVariableTypeNumber(tempBit[j].idDevice)) {\r\n                                                        //Add Coil of Bit\r\n                                                        if (tempBit[j].typeDevice == 'Modbus-Client') {\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tag)) {\r\n                                                                if (tempBit[j].dataType == 'Coil') {\r\n                                                                    Variable.Modbus_Client_Coil[parseInt(tempBit[j].idDevice)] = Variable.Modbus_Client_Coil[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_Coil[parseInt(tempBit[j].idDevice)][parseInt(tempBit[j].tag)] = parseInt(tempBit[j].tag)\r\n                                                                }\r\n                                                                if (tempBit[j].dataType == 'DiscreteInput') {\r\n                                                                    Variable.Modbus_Client_DiscreteInput[parseInt(tempBit[j].idDevice)] = Variable.Modbus_Client_DiscreteInput[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_DiscreteInput[parseInt(tempBit[j].idDevice)][parseInt(tempBit[j].tag)] = parseInt(tempBit[j].tag)\r\n                                                                }\r\n                                                            }\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tagEnableView)) {\r\n                                                                if (tempBit[j].dataType == 'Coil') {\r\n                                                                    Variable.Modbus_Client_Coil[parseInt(tempBit[j].idDevice)] = Variable.Modbus_Client_Coil[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_Coil[parseInt(tempBit[j].idDevice)][parseInt(tempBit[j].tagEnableView)] = parseInt(tempBit[j].tagEnableView)\r\n                                                                }\r\n                                                                if (tempBit[j].dataType == 'DiscreteInput') {\r\n                                                                    Variable.Modbus_Client_DiscreteInput[parseInt(tempBit[j].idDevice)] = Variable.Modbus_Client_DiscreteInput[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Modbus_Client_DiscreteInput[parseInt(tempBit[j].idDevice)][parseInt(tempBit[j].tagEnableView)] = parseInt(tempBit[j].tagEnableView)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        if (tempBit[j].typeDevice == 'Fins-Omron') {\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tag)) {\r\n                                                                const regex = /^\\d+\\.\\d+$/;\r\n                                                                if (regex.test(tempBit[j].tag)) {\r\n                                                                    Variable.Communication_PLC_Bit_Address_String[parseInt(tempBit[j].idDevice)] = Variable.Communication_PLC_Bit_Address_String[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Communication_PLC_Bit_Address_String[parseInt(tempBit[j].idDevice)].push(tempBit[j].tag)\r\n\r\n                                                                    Variable.Communication_PLC_Word_Address[parseInt(tempBit[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Communication_PLC_Word_Address[parseInt(tempBit[j].idDevice)][tempBit[j].tag.split('.')[0]] = parseInt(tempBit[j].tag.split('.')[0])\r\n                                                                }\r\n                                                            }\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tagEnableView)) {\r\n                                                                const regex = /^\\d+\\.\\d+$/;\r\n                                                                if (regex.test(tempBit[j].tagEnableView)) {\r\n                                                                    Variable.Communication_PLC_Bit_Address_String[parseInt(tempBit[j].idDevice)] = Variable.Communication_PLC_Bit_Address_String[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Communication_PLC_Bit_Address_String[parseInt(tempBit[j].idDevice)].push(tempBit[j].tagEnableView)\r\n\r\n                                                                    Variable.Communication_PLC_Word_Address[parseInt(tempBit[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(tempBit[j].idDevice)] || []\r\n                                                                    Variable.Communication_PLC_Word_Address[parseInt(tempBit[j].idDevice)][tempBit[j].tagEnableView.split('.')[0]] = parseInt(tempBit[j].tagEnableView.split('.')[0])\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        if (tempBit[j].typeDevice == 'OPC-UA') {\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tag)) {\r\n                                                                Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)] || []\r\n                                                                if (!Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)].includes(tempBit[j].tag)) {\r\n                                                                    Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)].push(tempBit[j].tag)\r\n                                                                }\r\n                                                            }\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tagEnableView)) {\r\n                                                                Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)] || []\r\n                                                                if (!Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)].includes(tempBit[j].tagEnableView)) {\r\n                                                                    Variable.Communication_OPC_Items[parseInt(tempBit[j].idDevice)].push(tempBit[j].tagEnableView)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        if (tempBit[j].typeDevice == 'ACE') {\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tag)) {\r\n                                                                Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)] = Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)] || []\r\n                                                                if (!Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)].includes(tempBit[j].tag)) {\r\n                                                                    Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)].push(tempBit[j].tag)\r\n                                                                }\r\n                                                            }\r\n                                                            if (this.checkVariableTypeNumber(tempBit[j].tagEnableView)) {\r\n                                                                Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)] = Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)] || []\r\n                                                                if (!Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)].includes(tempBit[j].tagEnableView)) {\r\n                                                                    Variable.Communication_ACE_Items[parseInt(tempBit[j].idDevice)].push(tempBit[j].tagEnableView)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            } catch (error) {\r\n                                                console.log(error)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultElement\r\n    }\r\n\r\n    async insertElement(ElementData: any): Promise<any> {\r\n        try {\r\n            ElementData._id = 'a' + Math.random().toString(36)\r\n            ElementData.status = 0\r\n            const newElement = this.ElementRepository.create(ElementData);\r\n            await this.ElementRepository.save(newElement);\r\n            Variable.refreshDataElement = true\r\n            return { result: 'success', message: 'Add Element Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateElement(updateData: any): Promise<any> {\r\n        try {\r\n            await this.ElementRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataElement = true\r\n            return { result: 'success', message: 'Update Element Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteElement(ElementId: string): Promise<any> {\r\n        try {\r\n            await this.ElementRepository.delete(ElementId);\r\n            Variable.refreshDataElement = true\r\n            return { result: 'success', message: 'Delete Element Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\n// import { MqttService } from '../mqtt/mqtt.service'\r\nimport { SharedService } from '../shared_module/shared.service';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaGaugeRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly sharedService: SharedService\r\n        // private readonly mqttService: MqttService\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrGauge)) {\r\n            for (let i = 0; i < Variable.haveChangeArrGauge.length; i++) {\r\n                if (Variable.haveChangeArrGauge[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrGauge[i] = false;\r\n\r\n                    if (Array.isArray(Variable.resultGauge)) {\r\n                        for (let j = 0; j < Variable.resultGauge.length; j++) {\r\n                            try {\r\n                                if (this.checkVariableTypeNumber(Variable.resultGauge[j].idDevice) && Variable.resultGauge[j].mode == 'Device') {\r\n                                    Variable.resultGauge[j].value = this.sharedService.Scada_Number_Return(\r\n                                        parseInt(Variable.resultGauge[j].idDevice),\r\n                                        Variable.resultGauge[j].typeDevice,\r\n                                        Variable.resultGauge[j].dataType,\r\n                                        parseInt(Variable.resultGauge[j].negative),\r\n                                        Variable.resultGauge[j].tag,\r\n                                        Variable.resultGauge[j]._id,\r\n                                        Variable.resultGauge[j].round,\r\n                                        Variable.resultGauge[j].swapHighLow\r\n                                    )\r\n                                    haveChange = true\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateGauge', Variable.resultGauge)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaGaugeService } from './scada_gauge.service';\r\n\r\n@Controller('gauge')\r\nexport class ScadaGaugeController {\r\n    constructor(\r\n        private readonly scadaGaugeService: ScadaGaugeService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaGaugeService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaGaugeService.insert(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaGaugeService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaGaugeService.delete(requestBody);\r\n    }\r\n\r\n}\r\n","// src/gauge/gauge.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Gauge')\r\nexport class GaugeEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    value: number;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    mode: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameTag: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataType: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    type1Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type2Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type3Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type4Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type5Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type6Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type7Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type8Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type9Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type10Object: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttCurrentValue: string;\r\n\r\n    @Column({ nullable: true, default: 'Gauge' })\r\n    objectType: string;\r\n\r\n    @Column({ nullable: true, default: 1 })\r\n    round: number;\r\n\r\n    @Column({ nullable: true, default: false })\r\n    swapHighLow: boolean;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaGaugeService } from './scada_gauge.service';\nimport { ScadaGaugeController } from './scada_gauge.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GaugeEntity } from './scada_gauge.entity';\nimport { ConfigService } from '../config/config.service';\nimport { MqttService } from '../mqtt/mqtt.service';\nimport { SharedModule } from '../shared_module/shared.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([GaugeEntity]), SocketIoModule, SharedModule],\n  controllers: [ScadaGaugeController],\n  providers: [ScadaGaugeService,MqttService,ConfigService]\n})\nexport class ScadaGaugeModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { GaugeEntity } from './scada_gauge.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nimport { SharedService } from '../shared_module/shared.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaGaugeService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(GaugeEntity)\r\n        private readonly gaugeRepository: Repository<GaugeEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n        Variable.refreshDataGauge = true\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataGauge) {\r\n                Variable.refreshDataGauge = false;\r\n                // console.log('===============================refresh gauge========================================');\r\n                try {\r\n                    Variable.resultGauge = await this.gaugeRepository.find();\r\n                    this.mqttService.publish('MQTT_Raw_ResultGauge', JSON.stringify(Variable.resultGauge))\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateGauge', Variable.resultGauge);\r\n                    }\r\n                    Variable.OldGauge = []\r\n                    if (Array.isArray(Variable.resultGauge)) {\r\n                        for (let j = 0; j < Variable.resultGauge.length; j++) {\r\n                            try {\r\n                                if (Variable.resultGauge[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultGauge[j].idDevice) && Variable.resultGauge[j].mode=='Device') {\r\n                                        this.sharedService.Scada_Number_Add(\r\n                                            parseInt(Variable.resultGauge[j].idDevice),\r\n                                            Variable.resultGauge[j].typeDevice,\r\n                                            Variable.resultGauge[j].dataType,\r\n                                            Variable.resultGauge[j].negative,\r\n                                            Variable.resultGauge[j].tag,\r\n                                            Variable.resultGauge[j]._id\r\n                                        )\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n\r\n                        function mergeArrays(...arrays) {\r\n                            let merged = [];\r\n                            arrays.forEach(arr => {\r\n                                arr.forEach((item, index) => {\r\n                                    if (item) {\r\n                                        if (!merged[index]) {\r\n                                            merged[index] = {};\r\n                                        }\r\n                                        Object.assign(merged[index], item);\r\n                                    }\r\n                                });\r\n                            });\r\n                            return merged;\r\n                        }\r\n                        \r\n                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                            Variable.Communication_Profinet_Items_Bit,\r\n                            Variable.Communication_Profinet_Items_Number,\r\n                            Variable.Communication_Profinet_Items_String,\r\n                            // Variable.Communication_Profinet_Items_Gauge,\r\n                            // Variable.Communication_Profinet_Items_ProgressBar,\r\n                            // Variable.Communication_Profinet_Items_Slider,\r\n                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                            Variable.Communication_Profinet_Items_String_Popup\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultGauge\r\n    }\r\n\r\n    async insert(gaugeData: any): Promise<any> {\r\n        try {\r\n            gaugeData._id = 'a' + Math.random().toString(36)\r\n            const newGauge = this.gaugeRepository.create(gaugeData);\r\n            await this.gaugeRepository.save(newGauge);\r\n            Variable.refreshDataGauge = true\r\n            return { result: 'success', message: 'Add Gauge Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.gaugeRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataGauge = true\r\n            return { result: 'success', message: 'Update Gauge Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(gaugeId: string): Promise<any> {\r\n        try {\r\n            await this.gaugeRepository.delete(gaugeId);\r\n            Variable.refreshDataGauge = true\r\n            return { result: 'success', message: 'Delete Gauge Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaGridViewService } from './scada_gridView.service';\r\n\r\n@Controller('gridView')\r\nexport class ScadaGridViewController {\r\n    constructor(\r\n        private readonly scadaGridViewService: ScadaGridViewService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaGridViewService.getData();\r\n    }\r\n\r\n    @Post('/insert_gridView')\r\n    insertGridView(@Body() requestBody) {\r\n        return this.scadaGridViewService.insertGridView(requestBody);\r\n    }\r\n\r\n    @Put('/update_gridView')\r\n    updateGridView(@Body() requestBody) {\r\n        return this.scadaGridViewService.updateGridView(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_gridView')\r\n    deleteGridView(@Body() requestBody) {\r\n        return this.scadaGridViewService.deleteGridView(requestBody);\r\n    }\r\n\r\n}\r\n","// src/gridView/gridView.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('GridView')\r\nexport class GridViewEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqtt: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttResponse: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableDragDrop: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttDragDropResponse: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttSearch: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttResponseChangeData: string;\r\n\r\n    @Column({ nullable: true })\r\n    arrColumnSearch: string;\r\n\r\n    @Column({ nullable: true })\r\n    size: string;\r\n\r\n    @Column({ nullable: true })\r\n    config: string;\r\n\r\n    @Column({ nullable: true })\r\n    configExcel: string;\r\n\r\n    @Column({ nullable: true })\r\n    code: string;\r\n\r\n    @Column({ nullable: true })\r\n    codeSummaryExcel: string;\r\n\r\n    @Column({ nullable: true })\r\n    createClassName: string;\r\n\r\n    @Column({ nullable: true })\r\n    createRuleChangeStyle: string;\r\n\r\n    @Column({ nullable: true, default: 'GridView' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaGridViewService } from './scada_gridView.service';\nimport { ScadaGridViewController } from './scada_gridView.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GridViewEntity } from './scada_gridView.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([GridViewEntity]), SocketIoModule],\n  providers: [ScadaGridViewService,],\n  controllers: [ScadaGridViewController]\n})\nexport class ScadaGridViewModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { GridViewEntity } from './scada_gridView.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaGridViewService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(GridViewEntity)\r\n        private readonly gridViewRepository: Repository<GridViewEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataGridView) {\r\n                Variable.refreshDataGridView = false;\r\n                // console.log('===============================refresh gridView========================================');\r\n                try {\r\n                    Variable.resultGridView = await this.gridViewRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateGridView', Variable.resultGridView);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultGridView\r\n    }\r\n\r\n    async insertGridView(gridViewData: any): Promise<any> {\r\n        try {\r\n            gridViewData._id = 'a' + Math.random().toString(36)\r\n            const newGridView = this.gridViewRepository.create(gridViewData);\r\n            await this.gridViewRepository.save(newGridView);\r\n            Variable.refreshDataGridView = true\r\n            return { result: 'success', message: 'Add GridView Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateGridView(updateData: any): Promise<any> {\r\n        try {\r\n            await this.gridViewRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataGridView = true\r\n            return { result: 'success', message: 'Update GridView Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteGridView(gridViewId: string): Promise<any> {\r\n        try {\r\n            await this.gridViewRepository.delete(gridViewId);\r\n            Variable.refreshDataGridView = true\r\n            return { result: 'success', message: 'Delete GridView Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaIconImageLibraryService } from './scada_icon-image-library.service';\r\n\r\n@Controller('uploadImageIcon')\r\nexport class ScadaIconImageLibraryController {\r\n    constructor(\r\n        private readonly scadaIconImageLibraryService: ScadaIconImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaIconImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaIconImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaIconImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaIconImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('IconImageLibrary')\r\nexport class IconImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    enable: boolean;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    height: number;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { IconImageLibraryEntity } from './scada_icon-image-library.entity';\r\nimport { ScadaIconImageLibraryController } from './scada_icon-image-library.controller';\r\nimport { ScadaIconImageLibraryService } from './scada_icon-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([IconImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaIconImageLibraryController],\r\n    providers: [ScadaIconImageLibraryService,]\r\n})\r\nexport class ScadaIconImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { IconImageLibraryEntity } from './scada_icon-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaIconImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(IconImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<IconImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized ICONICON IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataIconImageLibrary) {\r\n                Variable.refreshDataIconImageLibrary = false;\r\n                // console.log('===============================refresh icon image library========================================');\r\n                try {\r\n                    Variable.resultIconImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateIconImageLibrary', Variable.resultIconImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultIconImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data,\r\n                enable: data.enable,\r\n                width: data.width,\r\n                height: data.height\r\n            }\r\n\r\n            const newIconImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newIconImageLibrary);\r\n            Variable.refreshDataIconImageLibrary = true\r\n            return { result: 'success', message: 'Add Icon Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataIconImageLibrary = true\r\n            return { result: 'success', message: 'Delete Icon Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataIconImageLibrary = true\r\n            return { result: 'success', message: 'Update Icon Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaLabelService } from './scada_label.service';\r\n\r\n@Controller('label')\r\nexport class ScadaLabelController {\r\n    constructor(\r\n        private readonly scadaLabelService: ScadaLabelService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaLabelService.getData();\r\n    }\r\n\r\n    @Post('/insert_label')\r\n    insertLabel(@Body() requestBody) {\r\n        return this.scadaLabelService.insertLabel(requestBody);\r\n    }\r\n\r\n    @Put('/update_label')\r\n    updateLabel(@Body() requestBody) {\r\n        return this.scadaLabelService.updateLabel(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_label')\r\n    deleteLabel(@Body() requestBody) {\r\n        return this.scadaLabelService.deleteLabel(requestBody);\r\n    }\r\n\r\n}\r\n","// src/label/label.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Label')\r\nexport class LabelEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float', default: 40 })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    color: string;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    idScreen: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true, default: '1' })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    type1Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type2Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type3Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type4Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type5Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type6Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type7Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type8Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type9Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type10Object: string;\r\n\r\n    @Column({ nullable: true, default: 'Label' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaLabelController } from './scada_label.controller';\nimport { ScadaLabelService } from './scada_label.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LabelEntity } from './scada_label.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([LabelEntity]), SocketIoModule],\n  controllers: [ScadaLabelController],\n  providers: [ScadaLabelService,]\n})\nexport class ScadaLabelModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { LabelEntity } from './scada_label.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaLabelService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(LabelEntity)\r\n        private readonly labelRepository: Repository<LabelEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized LABEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataLabel) {\r\n                Variable.refreshDataLabel = false;\r\n                // console.log('===============================refresh label========================================');\r\n                try {\r\n                    Variable.resultlabel = await this.labelRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateLabel', Variable.resultlabel);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultlabel\r\n    }\r\n\r\n    async insertLabel(labelData: any): Promise<any> {\r\n        try {\r\n            labelData._id = 'a' + Math.random().toString(36)\r\n            const newLabel = this.labelRepository.create(labelData);\r\n            await this.labelRepository.save(newLabel);\r\n            Variable.refreshDataLabel = true\r\n            return { result: 'success', message: 'Add Label Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateLabel(updateData: any): Promise<any> {\r\n        try {\r\n            await this.labelRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataLabel = true\r\n            return { result: 'success', message: 'Update Label Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteLabel(labelId: string): Promise<any> {\r\n        try {\r\n            await this.labelRepository.delete(labelId);\r\n            Variable.refreshDataLabel = true\r\n            return { result: 'success', message: 'Delete Label Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaLineService } from './scada_line.service';\r\n\r\n@Controller('line')\r\nexport class ScadaLineController {\r\n    constructor(\r\n        private readonly scadaLineService: ScadaLineService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaLineService.getData();\r\n    }\r\n\r\n    @Post('/insert_line')\r\n    insertLine(@Body() requestBody) {\r\n        return this.scadaLineService.insertLine(requestBody);\r\n    }\r\n\r\n    @Put('/update_line')\r\n    updateLine(@Body() requestBody) {\r\n        return this.scadaLineService.updateLine(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_line')\r\n    deleteLine(@Body() requestBody) {\r\n        return this.scadaLineService.deleteLine(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Line')\r\nexport class LineEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    length: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    orientation: string;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: number;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeTag: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode_On: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode_Off: string;\r\n\r\n    @Column({ nullable: true, default: 'Line' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaLineController } from './scada_line.controller';\nimport { ScadaLineService } from './scada_line.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LineEntity } from './scada_line.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LineEntity]), SocketIoModule],\n  controllers: [ScadaLineController],\n  providers: [ScadaLineService,]\n})\nexport class ScadaLineModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { LineEntity } from './scada_line.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaLineService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(LineEntity)\r\n        private readonly lineRepository: Repository<LineEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized LINE');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataLine) {\r\n                Variable.refreshDataLine = false;\r\n                // console.log('===============================refresh line========================================');\r\n                try {\r\n                    Variable.resultLine = await this.lineRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateLine', Variable.resultLine);\r\n                    }\r\n                    Variable.OldBitAdjust = []\r\n                    Variable.OldBitDisplay = []\r\n                    Variable.OldElement = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultLine\r\n    }\r\n\r\n    async insertLine(lineData: any): Promise<any> {\r\n        try {\r\n            lineData._id = 'a' + Math.random().toString(36)\r\n            lineData.status = 0\r\n            const newLine = this.lineRepository.create(lineData);\r\n            await this.lineRepository.save(newLine);\r\n            Variable.refreshDataLine = true\r\n            return { result: 'success', message: 'Add Line Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateLine(updateData: any): Promise<any> {\r\n        try {\r\n            await this.lineRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataLine = true\r\n            return { result: 'success', message: 'Update Line Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteLine(lineId: string): Promise<any> {\r\n        try {\r\n            await this.lineRepository.delete(lineId);\r\n            Variable.refreshDataLine = true\r\n            return { result: 'success', message: 'Delete Line Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaMapImageLibraryService } from './scada_map-image-library.service';\r\n\r\n@Controller('uploadMap')\r\nexport class ScadaMapImageLibraryController {\r\n    constructor(\r\n        private readonly scadaMapImageLibraryService: ScadaMapImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaMapImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaMapImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaMapImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('MapImageLibrary')\r\nexport class MapImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { MapImageLibraryEntity } from './scada_map-image-library.entity';\r\nimport { ScadaMapImageLibraryController } from './scada_map-image-library.controller';\r\nimport { ScadaMapImageLibraryService } from './scada_map-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([MapImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaMapImageLibraryController],\r\n    providers: [ScadaMapImageLibraryService,]\r\n})\r\nexport class ScadaMapImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MapImageLibraryEntity } from './scada_map-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaMapImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(MapImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<MapImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized MAP IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataMapImageLibrary) {\r\n                Variable.refreshDataMapImageLibrary = false;\r\n                // console.log('===============================refresh map image library========================================');\r\n                try {\r\n                    Variable.resultMapImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateMapImageLibrary', Variable.resultMapImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultMapImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newMapImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newMapImageLibrary);\r\n            Variable.refreshDataMapImageLibrary = true\r\n            return { result: 'success', message: 'Add Map Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataMapImageLibrary = true\r\n            return { result: 'success', message: 'Delete Map Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaMapService } from './scada_map.service';\r\nconst VariableSystem = require('../../VariableSystem.js');\r\n\r\n@Controller('map')\r\nexport class ScadaMapController {\r\n    constructor(\r\n        private readonly scadaMapService: ScadaMapService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaMapService.getData();\r\n    }\r\n\r\n    @Get('/getposition')\r\n    getPosition() {\r\n        return VariableSystem.PositionMobileRobot;\r\n    }\r\n\r\n    @Post('/insert_map')\r\n    insertMap(@Body() requestBody) {\r\n        return this.scadaMapService.insertMap(requestBody);\r\n    }\r\n\r\n    @Put('/update_map')\r\n    updateMap(@Body() requestBody) {\r\n        return this.scadaMapService.updateMap(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_map')\r\n    deleteMap(@Body() requestBody) {\r\n        return this.scadaMapService.deleteMap(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Map')\r\nexport class MapEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    selectPoint: number;\r\n\r\n    @Column({ nullable: true })\r\n    image1X: number;\r\n\r\n    @Column({ nullable: true })\r\n    image1Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    image2X: number;\r\n\r\n    @Column({ nullable: true })\r\n    image2Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    map1X: number;\r\n\r\n    @Column({ nullable: true })\r\n    map1Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    map2X: number;\r\n\r\n    @Column({ nullable: true })\r\n    map2Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage: string;\r\n\r\n    @Column({ nullable: true })\r\n    indexMobileRobot: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true, default: 'Map' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaMapController } from './scada_map.controller';\nimport { ScadaMapService } from './scada_map.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MapEntity } from './scada_map.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([MapEntity]), SocketIoModule],\n  controllers: [ScadaMapController],\n  providers: [ScadaMapService,]\n})\nexport class ScadaMapModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { MapEntity } from './scada_map.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaMapService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(MapEntity)\r\n        private readonly mapRepository: Repository<MapEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized MAP');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataMap) {\r\n                Variable.refreshDataMap = false;\r\n                // console.log('===============================refresh map========================================');\r\n                try {\r\n                    Variable.resultMap = await this.mapRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateMap', Variable.resultMap);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultMap\r\n    }\r\n\r\n    async insertMap(mapData: any): Promise<any> {\r\n        try {\r\n            mapData._id = 'a' + Math.random().toString(36)\r\n            const newMap = this.mapRepository.create(mapData);\r\n            await this.mapRepository.save(newMap);\r\n            Variable.refreshDataMap = true\r\n            return { result: 'success', message: 'Add Map Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateMap(updateData: any): Promise<any> {\r\n        try {\r\n            await this.mapRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataMap = true\r\n            return { result: 'success', message: 'Update Map Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteMap(mapId: string): Promise<any> {\r\n        try {\r\n            await this.mapRepository.delete(mapId);\r\n            Variable.refreshDataMap = true\r\n            return { result: 'success', message: 'Delete Map Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaMemonicService } from './scada_memonic.service';\r\n\r\n@Controller('memonic')\r\nexport class ScadaMemonicController {\r\n    constructor(\r\n        private readonly scadaMemonicService: ScadaMemonicService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaMemonicService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insertMemonic(@Body() requestBody) {\r\n        return this.scadaMemonicService.insertMemonic(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    updateMemonic(@Body() requestBody) {\r\n        return this.scadaMemonicService.updateMemonic(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    deleteMemonic(@Body() requestBody) {\r\n        return this.scadaMemonicService.deleteMemonic(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Memonic')\r\nexport class MemonicEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    indexPLC: number;\r\n\r\n    @Column({ nullable: true })\r\n    typeMemonic: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameVariable: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaMemonicController } from './scada_memonic.controller';\nimport { ScadaMemonicService } from './scada_memonic.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MemonicEntity } from './scada_memonic.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([MemonicEntity]), SocketIoModule],\n  controllers: [ScadaMemonicController],\n  providers: [ScadaMemonicService,]\n})\nexport class ScadaMemonicModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { MemonicEntity } from './scada_memonic.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaMemonicService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(MemonicEntity)\r\n        private readonly memonicRepository: Repository<MemonicEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized MEMONIC');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataMemonic) {\r\n                Variable.refreshDataMemonic = false;\r\n                // console.log('===============================refresh memonic========================================');\r\n                try {\r\n                    Variable.resultmemonic = await this.memonicRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateMemonic', Variable.resultmemonic);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultmemonic\r\n    }\r\n\r\n    async insertMemonic(memonicData: any): Promise<any> {\r\n        try {\r\n            memonicData._id = 'a' + Math.random().toString(36)\r\n            const newMemonic = this.memonicRepository.create(memonicData);\r\n            await this.memonicRepository.save(newMemonic);\r\n            Variable.refreshDataMemonic = true\r\n            return { result: 'success', message: 'Add Memonic Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateMemonic(updateData: any): Promise<any> {\r\n        try {\r\n            await this.memonicRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataMemonic = true\r\n            return { result: 'success', message: 'Update Memonic Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteMemonic(memonicId: string): Promise<any> {\r\n        try {\r\n            await this.memonicRepository.delete(memonicId);\r\n            Variable.refreshDataMemonic = true\r\n            return { result: 'success', message: 'Delete Memonic Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaNavigateImageLibraryService } from './scada_navigate-image-library.service';\r\n\r\n@Controller('uploadImageNavigate')\r\nexport class ScadaNavigateImageLibraryController {\r\n    constructor(\r\n        private readonly scadaNavigateImageLibraryService: ScadaNavigateImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaNavigateImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaNavigateImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaNavigateImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaNavigateImageLibraryService.update(requestBody);\r\n    }\r\n}\r\n","// src/navigate-adjust/navigate-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('NavigateImageLibrary')\r\nexport class NavigateImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { NavigateImageLibraryEntity } from './scada_navigate-image-library.entity';\r\nimport { ScadaNavigateImageLibraryController } from './scada_navigate-image-library.controller';\r\nimport { ScadaNavigateImageLibraryService } from './scada_navigate-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([NavigateImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaNavigateImageLibraryController],\r\n    providers: [ScadaNavigateImageLibraryService]\r\n})\r\nexport class ScadaNavigateImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { NavigateImageLibraryEntity } from './scada_navigate-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaNavigateImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(NavigateImageLibraryEntity)\r\n        private readonly navigateDisplayImageLibraryRepository: Repository<NavigateImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        Variable.refreshDataNavigateImageLibrary = true\r\n        // console.log('Module initialized BITADJUST IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataNavigateImageLibrary) {\r\n                Variable.refreshDataNavigateImageLibrary = false;\r\n                // console.log('===============================refresh navigateAdjsut image library========================================');\r\n                try {\r\n                    Variable.resultNavigateImageLibrary = await this.navigateDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateNavigateImageLibrary', Variable.resultNavigateImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultNavigateImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newNavigateImageLibrary = this.navigateDisplayImageLibraryRepository.create(temp);\r\n            await this.navigateDisplayImageLibraryRepository.save(newNavigateImageLibrary);\r\n            Variable.refreshDataNavigateImageLibrary = true\r\n            return { result: 'success', message: 'Add Navigate Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.navigateDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataNavigateImageLibrary = true\r\n            return { result: 'success', message: 'Delete Navigate Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.navigateDisplayImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataNavigateImageLibrary = true\r\n            return { result: 'success', message: 'Update Design Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaNavigateService } from './scada_navigate.service';\r\n\r\n@Controller('navigate')\r\nexport class ScadaNavigateController {\r\n    constructor(\r\n        private readonly scadaNavigateService: ScadaNavigateService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaNavigateService.getData();\r\n    }\r\n\r\n    @Post('/insert_navigate')\r\n    insertNavigate(@Body() requestBody) {\r\n        return this.scadaNavigateService.insertNavigate(requestBody);\r\n    }\r\n\r\n    @Put('/update_navigate')\r\n    updateNavigate(@Body() requestBody) {\r\n        return this.scadaNavigateService.updateNavigate(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_navigate')\r\n    deleteNavigate(@Body() requestBody) {\r\n        return this.scadaNavigateService.deleteNavigate(requestBody);\r\n    }\r\n\r\n}\r\n","// src/navigate-/navigate-.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Navigate')\r\nexport class NavigateEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    url: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage0: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage1: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    blink0: number;\r\n\r\n    @Column({ nullable: true })\r\n    blink1: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableFlexScale: boolean;\r\n\r\n    @Column({ nullable: true, default: 'Navigate' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaNavigateController } from './scada_navigate.controller';\r\nimport { ScadaNavigateService } from './scada_navigate.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { NavigateEntity } from './scada_navigate.entity';\r\nimport { MqttService } from '../mqtt/mqtt.service';\r\nimport { ConfigService } from '../config/config.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([NavigateEntity]), SocketIoModule\r\n  ],\r\n  controllers: [ScadaNavigateController],\r\n  providers: [ScadaNavigateService,MqttService,ConfigService],\r\n})\r\nexport class ScadaNavigateModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { NavigateEntity } from './scada_navigate.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaNavigateService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(NavigateEntity)\r\n        private readonly navigateRepository: Repository<NavigateEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        Variable.refreshDataNavigate=true\r\n        this.setupDataRefreshInterval();\r\n    }\r\n\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataNavigate) {\r\n                Variable.refreshDataNavigate = false;\r\n                // console.log('===============================refresh navigate========================================');\r\n                try {\r\n                    Variable.resultNavigate = await this.navigateRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateNavigate', Variable.resultNavigate);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultNavigate;\r\n    }\r\n\r\n    async insertNavigate(navigateData: any): Promise<any> {\r\n        try {\r\n            navigateData._id = 'a' + Math.random().toString(36)\r\n            navigateData.status = 0\r\n            const newNavigate = this.navigateRepository.create(navigateData);\r\n            await this.navigateRepository.save(newNavigate);\r\n            Variable.refreshDataNavigate = true\r\n            return { result: 'success', message: 'Add Navigate Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateNavigate(updateData: any): Promise<any> {\r\n        try {\r\n            await this.navigateRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataNavigate = true\r\n            return { result: 'success', message: 'Update Navigate Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteNavigate(navigateId: string): Promise<any> {\r\n        try {\r\n            await this.navigateRepository.delete(navigateId);\r\n            Variable.refreshDataNavigate = true\r\n            return { result: 'success', message: 'Delete Navigate Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaNumberImageLibraryService } from './scada_number-image-library.service';\r\n\r\n@Controller('uploadImageNumber')\r\nexport class ScadaNumberImageLibraryController {\r\n    constructor(\r\n        private readonly scadaNumberImageLibraryService: ScadaNumberImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaNumberImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaNumberImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaNumberImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaNumberImageLibraryService.update(requestBody);\r\n    }\r\n}\r\n","// src/number-adjust/number-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('NumberImageLibrary')\r\nexport class NumberImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { NumberImageLibraryEntity } from './scada_number-image-library.entity';\r\nimport { ScadaNumberImageLibraryController } from './scada_number-image-library.controller';\r\nimport { ScadaNumberImageLibraryService } from './scada_number-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([NumberImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaNumberImageLibraryController],\r\n    providers: [ScadaNumberImageLibraryService]\r\n})\r\nexport class ScadaNumberImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { NumberImageLibraryEntity } from './scada_number-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaNumberImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(NumberImageLibraryEntity)\r\n        private readonly numberDisplayImageLibraryRepository: Repository<NumberImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITADJUST IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n        Variable.refreshDataNumberImageLibrary=true\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataNumberImageLibrary) {\r\n                Variable.refreshDataNumberImageLibrary = false;\r\n                // console.log('===============================refresh numberAdjsut image library========================================');\r\n                try {\r\n                    Variable.resultNumberImageLibrary = await this.numberDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateNumberImageLibrary', Variable.resultNumberImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultNumberImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newNumberImageLibrary = this.numberDisplayImageLibraryRepository.create(temp);\r\n            await this.numberDisplayImageLibraryRepository.save(newNumberImageLibrary);\r\n            Variable.refreshDataNumberImageLibrary = true\r\n            return { result: 'success', message: 'Add Number Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.numberDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataNumberImageLibrary = true\r\n            return { result: 'success', message: 'Delete Number Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.numberDisplayImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataNumberImageLibrary = true\r\n            return { result: 'success', message: 'Update Design Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nimport { SharedService } from '../shared_module/shared.service';\r\nconst Variable = require('../../Variable');\r\n@Injectable()\r\nexport class ScadaNumberRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        var sendRaw = false\r\n        if (Array.isArray(Variable.haveChangeArrNumber)) {\r\n            for (let i = 0; i < Variable.haveChangeArrNumber.length; i++) {\r\n                if (Variable.haveChangeArrNumber[i]) {\r\n                    sendRaw = true\r\n                    haveChange = false\r\n                    Variable.haveChangeArrNumber[i] = false;\r\n\r\n                    if (Array.isArray(Variable.resultNumber)) {\r\n                        for (let j = 0; j < Variable.resultNumber.length; j++) {\r\n                            try {\r\n                                // console.log(Variable.resultNumber[j].tag)\r\n                                Variable.resultNumber[j].text = this.sharedService.Scada_Number_Return(\r\n                                    parseInt(Variable.resultNumber[j].idDevice),\r\n                                    Variable.resultNumber[j].typeDevice,\r\n                                    Variable.resultNumber[j].dataType,\r\n                                    parseInt(Variable.resultNumber[j].negative),\r\n                                    Variable.resultNumber[j].tag,\r\n                                    Variable.resultNumber[j]._id,\r\n                                    Variable.resultNumber[j].round,\r\n                                    Variable.resultNumber[j].swapHighLow\r\n                                )\r\n                                haveChange = true\r\n                                try {\r\n                                    if (\r\n                                        Variable.resultNumber[j] &&\r\n                                        Variable.resultNumber[j].nameTag &&\r\n                                        Variable.resultNumber[j].nameTag.length > 0\r\n                                    ) {\r\n                                        Variable.ListTagNumber[parseInt(Variable.resultNumber[j].idDevice)] = Variable.ListTagNumber[parseInt(Variable.resultNumber[j].idDevice)] || {};\r\n                                        Variable.ListTagNumber[parseInt(Variable.resultNumber[j].idDevice)][Variable.resultNumber[j].nameTag] =\r\n                                            Variable.resultNumber[j].text;\r\n                                    }\r\n                                } catch (error) {\r\n                                    console.log(error)\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateNumber', Variable.resultNumber)\r\n                            this.socketGateway.server.emit('UpdateRawNumber', Variable.Number)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (sendRaw) {\r\n                this.mqttService.publish('MQTT_Raw_Number', JSON.stringify(Variable.Number))\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaNumberService } from './scada_number.service';\r\n\r\n@Controller('number')\r\nexport class ScadaNumberController {\r\n    constructor(\r\n        private readonly scadaNumberService: ScadaNumberService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaNumberService.getData();\r\n    }\r\n    @Get('/getdataraw')\r\n    getDataRaw() {\r\n        return this.scadaNumberService.getDataRaw();\r\n    }\r\n\r\n    @Post('/insert_number')\r\n    insertNumber(@Body() requestBody) {\r\n        return this.scadaNumberService.insertNumber(requestBody);\r\n    }\r\n\r\n    @Put('/update_number')\r\n    updateNumber(@Body() requestBody) {\r\n        return this.scadaNumberService.updateNumber(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_number')\r\n    deleteNumber(@Body() requestBody) {\r\n        return this.scadaNumberService.deleteNumber(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Number')\r\nexport class NumberEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataTypeTagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameTag: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataType: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    editable: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttEditable: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableMqtt: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttInputEvent: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    noBorder: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    idScreen: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    split3: string;\r\n\r\n    @Column({ nullable: true })\r\n    decimalPoint: string;\r\n\r\n    @Column({ nullable: true, default: 'Number' })\r\n    objectType: string;\r\n\r\n    @Column({ nullable: true, default: true })\r\n    view: boolean;\r\n\r\n    @Column({ nullable: true, default: 1 })\r\n    round: number;\r\n\r\n    @Column({ nullable: true, default: false })\r\n    swapHighLow: boolean;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaNumberController } from './scada_number.controller';\nimport { ScadaNumberService } from './scada_number.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { NumberEntity } from './scada_number.entity';\nimport { MqttService } from '../mqtt/mqtt.service';\nimport { ConfigService } from '../config/config.service';\n\nimport { SharedModule } from '../shared_module/shared.module';\n@Module({\n    imports: [TypeOrmModule.forFeature([NumberEntity]), SocketIoModule, SharedModule],\n    controllers: [ScadaNumberController],\n    providers: [ScadaNumberService, MqttService, ConfigService]\n})\nexport class ScadaNumberModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { NumberEntity } from './scada_number.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nimport { SharedService } from '../shared_module/shared.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaNumberService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(NumberEntity)\r\n        private readonly numberRepository: Repository<NumberEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized WORDDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataNumber) {\r\n                Variable.refreshDataNumber = false;\r\n                // console.log('===============================refresh number========================================');\r\n                try {\r\n                    Variable.resultNumber = await this.numberRepository.find();\r\n                    this.mqttService.publish('MQTT_Raw_ResultNumber', JSON.stringify(Variable.resultNumber))\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateNumber', Variable.resultNumber);\r\n                    }\r\n                    Variable.OldNumber = []\r\n                    if (Array.isArray(Variable.resultNumber)) {\r\n                        Variable.Temp_ProfiNet_Items_Number = []\r\n                        for (let j = 0; j < Variable.resultNumber.length; j++) {\r\n                            try {\r\n                                if (Variable.resultNumber[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultNumber[j].idDevice)) {\r\n                                        this.sharedService.Scada_Number_Add(\r\n                                            parseInt(Variable.resultNumber[j].idDevice),\r\n                                            Variable.resultNumber[j].typeDevice,\r\n                                            Variable.resultNumber[j].dataType,\r\n                                            Variable.resultNumber[j].negative,\r\n                                            Variable.resultNumber[j].tag,\r\n                                            Variable.resultNumber[j]._id\r\n                                        )\r\n                                        this.sharedService.Scada_Bit_Add(\r\n                                            parseInt(Variable.resultNumber[j].idDevice),\r\n                                            Variable.resultNumber[j].typeDevice,\r\n                                            Variable.resultNumber[j].dataType,\r\n                                            Variable.resultNumber[j].tagEnableView,\r\n                                            Variable.resultNumber[j]._id\r\n                                        )\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                        Variable.Communication_Profinet_Items_Number = Variable.Temp_ProfiNet_Items_Number.slice()\r\n\r\n                        function mergeArrays(...arrays) {\r\n                            let merged = [];\r\n                            arrays.forEach(arr => {\r\n                                arr.forEach((item, index) => {\r\n                                    if (item) {\r\n                                        if (!merged[index]) {\r\n                                            merged[index] = {};\r\n                                        }\r\n                                        Object.assign(merged[index], item);\r\n                                    }\r\n                                });\r\n                            });\r\n                            return merged;\r\n                        }\r\n\r\n                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                            Variable.Communication_Profinet_Items_Bit,\r\n                            Variable.Communication_Profinet_Items_Number,\r\n                            Variable.Communication_Profinet_Items_String,\r\n                            Variable.Communication_Profinet_Items_Gauge,\r\n                            Variable.Communication_Profinet_Items_ProgressBar,\r\n                            Variable.Communication_Profinet_Items_Slider,\r\n                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                            Variable.Communication_Profinet_Items_String_Popup\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultNumber\r\n    }\r\n    getDataRaw() {\r\n        return Variable.Number\r\n    }\r\n\r\n    async insertNumber(numberData: any): Promise<any> {\r\n        try {\r\n            numberData._id = 'a' + Math.random().toString(36)\r\n            numberData.text = 0\r\n            const newNumber = this.numberRepository.create(numberData);\r\n            await this.numberRepository.save(newNumber);\r\n            Variable.refreshDataNumber = true\r\n            return { result: 'success', message: 'Add Number Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateNumber(updateData: any): Promise<any> {\r\n        try {\r\n            await this.numberRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataNumber = true\r\n            return { result: 'success', message: 'Update Number Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteNumber(numberId: string): Promise<any> {\r\n        try {\r\n            await this.numberRepository.delete(numberId);\r\n            Variable.refreshDataNumber = true\r\n            return { result: 'success', message: 'Delete Number Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaPanelService } from './scada_panel.service';\r\n\r\n@Controller('panel')\r\nexport class ScadaPanelController {\r\n    constructor(\r\n        private readonly scadaPanelService: ScadaPanelService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaPanelService.getData();\r\n    }\r\n\r\n    @Post('/insert_panel')\r\n    insertPanel(@Body() requestBody) {\r\n        return this.scadaPanelService.insertPanel(requestBody);\r\n    }\r\n\r\n    @Put('/update_panel')\r\n    updatePanel(@Body() requestBody) {\r\n        return this.scadaPanelService.updatePanel(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_panel')\r\n    deletePanel(@Body() requestBody) {\r\n        return this.scadaPanelService.deletePanel(requestBody);\r\n    }\r\n\r\n}\r\n","// src/panel/panel.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Panel')\r\nexport class PanelEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ name: 'backgroundColor', nullable: true })\r\n    backgroundColor: string;\r\n\r\n    @Column({ name: 'borderRadius', nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ name: 'boxShadow1', nullable: true })\r\n    boxShadow1: string;\r\n\r\n    @Column({ name: 'boxShadow2', nullable: true })\r\n    boxShadow2: string;\r\n\r\n    @Column({ name: 'boxShadow3', nullable: true })\r\n    boxShadow3: string;\r\n\r\n    @Column({ name: 'boxShadowColor', nullable: true })\r\n    boxShadowColor: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    margin: string;\r\n\r\n    @Column({ nullable: true })\r\n    padding: number;\r\n\r\n    @Column({ name: 'idGroupControl', nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true, default: 'Panel' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaPanelService } from './scada_panel.service';\nimport { ScadaPanelController } from './scada_panel.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PanelEntity } from './scada_panel.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PanelEntity]), SocketIoModule],\n  providers: [ScadaPanelService,],\n  controllers: [ScadaPanelController]\n})\nexport class ScadaPanelModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { PanelEntity } from './scada_panel.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaPanelService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(PanelEntity)\r\n        private readonly panelRepository: Repository<PanelEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataPanel) {\r\n                Variable.refreshDataPanel = false;\r\n                // console.log('===============================refresh panel========================================');\r\n                try {\r\n                    Variable.resultPanel = await this.panelRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdatePanel', Variable.resultPanel);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultPanel\r\n    }\r\n\r\n    async insertPanel(panelData: any): Promise<any> {\r\n        try {\r\n            panelData._id = 'a' + Math.random().toString(36)\r\n            const newPanel = this.panelRepository.create(panelData);\r\n            await this.panelRepository.save(newPanel);\r\n            Variable.refreshDataPanel = true\r\n            return { result: 'success', message: 'Add Panel Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updatePanel(updateData: any): Promise<any> {\r\n        try {\r\n            await this.panelRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataPanel = true\r\n            return { result: 'success', message: 'Update Panel Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deletePanel(panelId: string): Promise<any> {\r\n        try {\r\n            await this.panelRepository.delete(panelId);\r\n            Variable.refreshDataPanel = true\r\n            return { result: 'success', message: 'Delete Panel Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaPopupImageLibraryService } from './scada_popup-image-library.service';\r\n\r\n@Controller('PopupUploadImage')\r\nexport class ScadaPopupImageLibraryController {\r\n    constructor(\r\n        private readonly scadaPopupImageLibraryService: ScadaPopupImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaPopupImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaPopupImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaPopupImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaPopupImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('PopupImageLibrary')\r\nexport class PopupImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { PopupImageLibraryEntity } from './scada_popup-image-library.entity';\r\nimport { ScadaPopupImageLibraryController } from './scada_popup-image-library.controller';\r\nimport { ScadaPopupImageLibraryService } from './scada_popup-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([PopupImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaPopupImageLibraryController],\r\n    providers: [ScadaPopupImageLibraryService,]\r\n})\r\nexport class ScadaPopupImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { PopupImageLibraryEntity } from './scada_popup-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaPopupImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(PopupImageLibraryEntity)\r\n        private readonly popupImageLibraryRepository: Repository<PopupImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataPopupImageLibrary) {\r\n                Variable.refreshDataPopupImageLibrary = false;\r\n                // console.log('===============================refresh popup image library========================================');\r\n                try {\r\n                    Variable.resultPopupImageLibrary = await this.popupImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdatePopupImageLibrary', Variable.resultPopupImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultPopupImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newPopupImageLibrary = this.popupImageLibraryRepository.create(temp);\r\n            await this.popupImageLibraryRepository.save(newPopupImageLibrary);\r\n            Variable.refreshDataPopupImageLibrary = true\r\n            return { result: 'success', message: 'Add Popup Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.popupImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataPopupImageLibrary = true\r\n            return { result: 'success', message: 'Update Popup Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.popupImageLibraryRepository.delete(id);\r\n            Variable.refreshDataPopupImageLibrary = true\r\n            return { result: 'success', message: 'Delete Popup Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaPopupService } from './scada_popup.service';\r\n\r\n@Controller('popup')\r\nexport class ScadaPopupController {\r\n    constructor(\r\n        private readonly scadaPopupService: ScadaPopupService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaPopupService.getData();\r\n    }\r\n\r\n    @Post('/insert_popup')\r\n    insertPopup(@Body() requestBody) {\r\n        return this.scadaPopupService.insertPopup(requestBody);\r\n    }\r\n\r\n    @Put('/update_popup')\r\n    updatePopup(@Body() requestBody) {\r\n        return this.scadaPopupService.updatePopup(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_popup')\r\n    deletePopup(@Body() requestBody) {\r\n        return this.scadaPopupService.deletePopup(requestBody);\r\n    }\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Popup')\r\nexport class PopupEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    childObject: string;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectTitle: string;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectLeft: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectTop: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectWidth: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectHeight: number;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectCssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    childObjectBackgroundColor: string;\r\n\r\n    @Column({ nullable: true, default: 'Popup' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaPopupController } from './scada_popup.controller';\nimport { ScadaPopupService } from './scada_popup.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PopupEntity } from './scada_popup.entity';\nimport { SharedModule } from '../shared_module/shared.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PopupEntity]), SocketIoModule, SharedModule],\n  controllers: [ScadaPopupController],\n  providers: [ScadaPopupService,]\n})\nexport class ScadaPopupModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { PopupEntity } from './scada_popup.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\nimport { SharedService } from '../shared_module/shared.service';\r\ntype NumberType = {\r\n    _id?: string;\r\n    parent: string;\r\n    width: number;\r\n    height: number;\r\n    left: number;\r\n    top: number;\r\n    fontSize: number;\r\n    tag: string;\r\n    typeNumber: string;\r\n    dataType: string;\r\n    text: string;\r\n    colorText: string;\r\n    colorBackground: string;\r\n    divide: number\r\n    unit: string\r\n    noBorder: number\r\n    negative: number\r\n    borderRadius: number,\r\n    idDevice: string;\r\n    typeDevice: string;\r\n    zIndex: number;\r\n    levelUser: number;\r\n    editable: boolean;\r\n    enableLogData: number;\r\n    scadaType?: string;\r\n    round: number;\r\n    tagEnableView: string;\r\n    view: string;\r\n    nameTag: string;\r\n};\r\ntype BitType = {\r\n    _id?: string;\r\n    parent: string;\r\n    width: number;\r\n    height: number;\r\n    left: number;\r\n    top: number;\r\n    fontSize: number;\r\n    tag: string;\r\n    text: string;\r\n    colorText: string;\r\n    type: string;\r\n    borderRadius: string,\r\n    colorOff: string,\r\n    colorOn: string,\r\n    myKeyPress: string,\r\n    levelUser: number,\r\n    nameImage0: string;\r\n    nameImage1: string;\r\n    borderWidthOn: number,\r\n    borderWidthOff: number,\r\n    status: string;\r\n    idDevice: string;\r\n    typeDevice: string;\r\n    dataType: string;\r\n    editable: boolean;\r\n    zIndex: number;\r\n    enableLogData: number,\r\n    view: string;\r\n    nameTag: string;\r\n    tagEnableView: string;\r\n};\r\ntype StringType = {\r\n    _id?: string;\r\n    parent: string;\r\n    width: number;\r\n    height: number;\r\n    left: number;\r\n    top: number;\r\n    fontSize: number;\r\n    lengthScroll: number;\r\n    speedScroll: number;\r\n    tag: string;\r\n    nameTag: string;\r\n    text: string;\r\n    colorText: string;\r\n    colorBackground: string;\r\n    borderRadius: number,\r\n    idDevice: string;\r\n    zIndex: number;\r\n    cssCode: string;\r\n    typeDevice: string;\r\n    numberCharacter: number;\r\n    editable: boolean;\r\n    mqttEditable: string;\r\n    levelUser: number;\r\n    popupId?: string;\r\n    elementId?: string;\r\n    mqttResponse: string;\r\n    scadaType?: string;\r\n    view: string;\r\n};\r\n\r\n@Injectable()\r\nexport class ScadaPopupService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(PopupEntity)\r\n        private readonly popupRepository: Repository<PopupEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataPopup) {\r\n                Variable.refreshDataPopup = false;\r\n                // console.log('===============================refresh popup========================================');\r\n                try {\r\n                    Variable.resultPopup = await this.popupRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdatePopup', Variable.resultPopup);\r\n                    }\r\n                    if (Array.isArray(Variable.resultPopup)) {\r\n                        for (let i = 0; i < Variable.resultPopup.length; i++) {\r\n                            //Add holding register of Number\r\n                            try {\r\n                                if (Variable.resultPopup[i] && Variable.resultPopup[i].childObject) {\r\n                                    if (Variable.resultPopup[i].childObject.length > 0) {\r\n                                        let rawDataChildObject = JSON.parse(Variable.resultPopup[i].childObject.toString())\r\n                                        //Number\r\n                                        let tempNumber: NumberType[] = rawDataChildObject.filter((item: any) => JSON.parse(item).scadaType === 'Number').map((item: any) =>\r\n                                            JSON.parse(item)\r\n                                        )\r\n                                        let temp_ProfiNet_Items_Number = []\r\n\r\n                                        for (let j = 0; j < tempNumber.length; j++) {\r\n                                            //Add holding register of Number\r\n                                            try {\r\n                                                if (tempNumber[j]) {\r\n                                                    if (this.checkVariableTypeNumber(tempNumber[j].idDevice)) {\r\n                                                        if (this.checkVariableTypeNumber(tempNumber[j].tag)) {\r\n                                                            this.sharedService.Scada_Number_Add(\r\n                                                                parseInt(tempNumber[j].idDevice),\r\n                                                                tempNumber[j].typeDevice,\r\n                                                                tempNumber[j].dataType,\r\n                                                                tempNumber[j].negative,\r\n                                                                tempNumber[j].tag,\r\n                                                                tempNumber[j]._id)\r\n                                                        }\r\n                                                        if (this.checkVariableTypeNumber(tempNumber[j].tagEnableView)) {\r\n                                                            this.sharedService.Scada_Bit_Add(\r\n                                                                parseInt(tempNumber[j].idDevice),\r\n                                                                tempNumber[j].typeDevice,\r\n                                                                tempNumber[j].dataType,\r\n                                                                tempNumber[j].tagEnableView,\r\n                                                                tempNumber[j]._id)\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            } catch (error) {\r\n                                                console.log(error)\r\n                                            }\r\n                                        }\r\n                                        Variable.Communication_Profinet_Items_Number_Popup = temp_ProfiNet_Items_Number.slice()\r\n                                        function mergeArrays(...arrays) {\r\n                                            let merged = [];\r\n                                            arrays.forEach(arr => {\r\n                                                arr.forEach((item, index) => {\r\n                                                    if (item) {\r\n                                                        if (!merged[index]) {\r\n                                                            merged[index] = {};\r\n                                                        }\r\n                                                        Object.assign(merged[index], item);\r\n                                                    }\r\n                                                });\r\n                                            });\r\n                                            return merged;\r\n                                        }\r\n\r\n                                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                                            Variable.Communication_Profinet_Items_Bit,\r\n                                            Variable.Communication_Profinet_Items_Number,\r\n                                            Variable.Communication_Profinet_Items_String,\r\n                                            Variable.Communication_Profinet_Items_Gauge,\r\n                                            Variable.Communication_Profinet_Items_ProgressBar,\r\n                                            Variable.Communication_Profinet_Items_Slider,\r\n                                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                                            Variable.Communication_Profinet_Items_String_Popup\r\n                                        );\r\n\r\n                                        //Bit\r\n                                        let tempBit: BitType[] = rawDataChildObject.filter((item: any) => JSON.parse(item).scadaType === 'Bit').map((item: any) =>\r\n                                            JSON.parse(item)\r\n                                        )\r\n                                        for (let j = 0; j < tempBit.length; j++) {\r\n                                            try {\r\n                                                if (tempBit[j]) {\r\n                                                    if (this.checkVariableTypeNumber(tempBit[j].idDevice)) {\r\n                                                        if (this.checkVariableTypeNumber(tempBit[j].tag)) {\r\n                                                            this.sharedService.Scada_Bit_Add(parseInt(\r\n                                                                tempBit[j].idDevice),\r\n                                                                tempBit[j].typeDevice,\r\n                                                                tempBit[j].dataType,\r\n                                                                tempBit[j].tag,\r\n                                                                tempBit[j]._id)\r\n                                                        }\r\n                                                        if (this.checkVariableTypeNumber(tempBit[j].tagEnableView)) {\r\n                                                            this.sharedService.Scada_Bit_Add(\r\n                                                                parseInt(tempBit[j].idDevice),\r\n                                                                tempBit[j].typeDevice,\r\n                                                                tempBit[j].dataType,\r\n                                                                tempBit[j].tagEnableView,\r\n                                                                tempBit[j]._id\r\n                                                            )\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            } catch (error) {\r\n                                                console.log(error)\r\n                                            }\r\n                                        }\r\n\r\n                                        //String\r\n                                        let tempString: StringType[] = rawDataChildObject.filter((item: any) => JSON.parse(item).scadaType === 'String').map((item: any) =>\r\n                                            JSON.parse(item)\r\n                                        )\r\n                                        let temp_ProfiNet_Items_String = []\r\n\r\n                                        for (let j = 0; j < tempString.length; j++) {\r\n                                            try {\r\n                                                if (tempString[j]) {\r\n                                                    if (this.checkVariableTypeNumber(tempString[j].idDevice)) {\r\n                                                        if (tempString[j].typeDevice == 'ProfiNet') {\r\n                                                            function sanitizeVariableName(input) {\r\n                                                                // Remove invalid characters (e.g., '.', '=', etc.)\r\n                                                                let sanitized = input.replace(/[^a-zA-Z0-9_$]/g, '');\r\n                                                                // Ensure the variable name doesn't start with a digit\r\n                                                                if (/^[0-9]/.test(sanitized)) {\r\n                                                                    sanitized = '_' + sanitized;\r\n                                                                }\r\n                                                                return sanitized;\r\n                                                            }\r\n                                                            if (tempString[j].tag.length > 0) {\r\n                                                                temp_ProfiNet_Items_String[parseInt(tempString[j].idDevice)] = temp_ProfiNet_Items_String[parseInt(tempString[j].idDevice)] || {}\r\n                                                                temp_ProfiNet_Items_String[parseInt(tempString[j].idDevice)][sanitizeVariableName(tempString[j]._id)] = tempString[j].tag\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            } catch (error) {\r\n                                                console.log(error)\r\n                                            }\r\n                                        }\r\n                                        Variable.Communication_Profinet_Items_String_Popup = temp_ProfiNet_Items_String.slice()\r\n                                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                                            Variable.Communication_Profinet_Items_Bit,\r\n                                            Variable.Communication_Profinet_Items_Number,\r\n                                            Variable.Communication_Profinet_Items_String,\r\n                                            Variable.Communication_Profinet_Items_Gauge,\r\n                                            Variable.Communication_Profinet_Items_ProgressBar,\r\n                                            Variable.Communication_Profinet_Items_Slider,\r\n                                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                                            Variable.Communication_Profinet_Items_String_Popup\r\n                                        );\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultPopup\r\n    }\r\n\r\n    async insertPopup(popupData: any): Promise<any> {\r\n        try {\r\n            popupData._id = 'a' + Math.random().toString(36)\r\n            const newPopup = this.popupRepository.create(popupData);\r\n            await this.popupRepository.save(newPopup);\r\n            Variable.refreshDataPopup = true\r\n            return { result: 'success', message: 'Add Popup Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updatePopup(updateData: any): Promise<any> {\r\n        try {\r\n            await this.popupRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataPopup = true\r\n            return { result: 'success', message: 'Update Popup Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deletePopup(popupId: string): Promise<any> {\r\n        try {\r\n            await this.popupRepository.delete(popupId);\r\n            Variable.refreshDataPopup = true\r\n            return { result: 'success', message: 'Delete Popup Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaPrintService } from './scada_print.service';\r\n\r\n@Controller('print')\r\nexport class ScadaPrintController {\r\n    constructor(\r\n        private readonly scadaPrintService: ScadaPrintService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaPrintService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaPrintService.insert(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaPrintService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaPrintService.delete(requestBody);\r\n    }\r\n\r\n}\r\n","// src/print-/print-.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Print')\r\nexport class PrintEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    myKeyPress: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssPrint: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableMqtt: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttTopic: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableFlexScale: boolean;\r\n\r\n    @Column({ nullable: true, default: 'Print' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaPrintController } from './scada_print.controller';\r\nimport { ScadaPrintService } from './scada_print.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { PrintEntity } from './scada_print.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([PrintEntity]), SocketIoModule\r\n  ],\r\n  controllers: [ScadaPrintController],\r\n  providers: [ScadaPrintService]\r\n})\r\nexport class ScadaPrintModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { PrintEntity } from './scada_print.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaPrintService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(PrintEntity)\r\n        private readonly printRepository: Repository<PrintEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        this.setupDataRefreshInterval();\r\n    }\r\n\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n        Variable.refreshDataPrint = true\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataPrint) {\r\n                Variable.refreshDataPrint = false;\r\n                // console.log('===============================refresh print========================================');\r\n                try {\r\n                    Variable.resultPrint = await this.printRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdatePrint', Variable.resultPrint);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    async getData() {\r\n        return Variable.resultPrint;\r\n    }\r\n\r\n    async insert(printData: any): Promise<any> {\r\n        try {\r\n            printData._id = 'a' + Math.random().toString(36)\r\n            printData.status = 0\r\n            const newPrint = this.printRepository.create(printData);\r\n            await this.printRepository.save(newPrint);\r\n            Variable.refreshDataPrint = true\r\n            return { result: 'success', message: 'Add Print Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.printRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataPrint = true\r\n            return { result: 'success', message: 'Update Print Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(printId: string): Promise<any> {\r\n        try {\r\n            await this.printRepository.delete(printId);\r\n            Variable.refreshDataPrint = true\r\n            return { result: 'success', message: 'Delete Print Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\n// import { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\nimport { SharedService } from '../shared_module/shared.service';\r\n@Injectable()\r\nexport class ScadaProgressBarRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n        // private readonly mqttService: MqttService\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrProgressBar)) {\r\n            for (let i = 0; i < Variable.haveChangeArrProgressBar.length; i++) {\r\n                if (Variable.haveChangeArrProgressBar[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrProgressBar[i] = false;\r\n\r\n                    if (Array.isArray(Variable.resultProgressBar)) {\r\n                        for (let j = 0; j < Variable.resultProgressBar.length; j++) {\r\n                            try {\r\n                                if (this.checkVariableTypeNumber(Variable.resultProgressBar[j].idDevice) && Variable.resultProgressBar[j].mode == 'Device') {\r\n                                    Variable.resultProgressBar[j].value = this.sharedService.Scada_Number_Return(parseInt(Variable.resultProgressBar[j].idDevice), Variable.resultProgressBar[j].typeDevice, Variable.resultProgressBar[j].dataType, parseInt(Variable.resultProgressBar[j].negative), Variable.resultProgressBar[j].tag, Variable.resultProgressBar[j]._id, Variable.resultProgressBar[j].round, Variable.resultProgressBar[j].swapHighLow)\r\n                                    haveChange = true\r\n\r\n                                    try {\r\n                                        if (Variable.resultProgressBar[j].nameTag && Variable.resultProgressBar[j].nameTag.length > 0) {\r\n                                            Variable.ListTagProgressBar[parseInt(Variable.resultProgressBar[j].idDevice)] = Variable.ListTagProgressBar[parseInt(Variable.resultProgressBar[j].idDevice)] || {};\r\n                                            Variable.ListTagProgressBar[parseInt(Variable.resultProgressBar[j].idDevice)][Variable.resultProgressBar[j].nameTag] = Variable.resultProgressBar[j].value;\r\n                                        }\r\n                                    } catch (error) {\r\n                                        console.log(error)\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateProgressBar', Variable.resultProgressBar)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaProgressBarService } from './scada_progress_bar.service';\r\n\r\n@Controller('progressBar')\r\nexport class ScadaProgressBarController {\r\n    constructor(\r\n        private readonly scadaProgressBarService: ScadaProgressBarService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaProgressBarService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaProgressBarService.insert(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaProgressBarService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaProgressBarService.delete(requestBody);\r\n    }\r\n\r\n}\r\n","// src/progressBar/progressBar.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('ProgressBar')\r\nexport class ProgressBarEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    value: number;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameTag: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataType: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    type1Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type2Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type3Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type4Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type5Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type6Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type7Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type8Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type9Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type10Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttCurrentValue: string;\r\n\r\n    @Column({ nullable: true, default: 'ProgressBar' })\r\n    objectType: string;\r\n\r\n    @Column({ nullable: true, default: 1 })\r\n    round: number;\r\n\r\n    @Column({ nullable: true, default: false })\r\n    swapHighLow: boolean;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaProgressBarService } from './scada_progress_bar.service';\nimport { ScadaProgressBarController } from './scada_progress_bar.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ProgressBarEntity } from './scada_progress_bar.entity';\nimport { ConfigService } from '../config/config.service';\nimport { MqttService } from '../mqtt/mqtt.service';\nimport { SharedModule } from '../shared_module/shared.module';\n@Module({\n  imports: [TypeOrmModule.forFeature([ProgressBarEntity]), SocketIoModule, SharedModule],\n  controllers: [ScadaProgressBarController],\n  providers: [ScadaProgressBarService, MqttService, ConfigService]\n})\nexport class ScadaProgressBarModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ProgressBarEntity } from './scada_progress_bar.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\nimport { SharedService } from '../shared_module/shared.service';\r\n\r\n@Injectable()\r\nexport class ScadaProgressBarService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ProgressBarEntity)\r\n        private readonly progressBarRepository: Repository<ProgressBarEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n        Variable.refreshDataProgressBar = true\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataProgressBar) {\r\n                Variable.refreshDataProgressBar = false;\r\n                // console.log('===============================refresh progressBar========================================');\r\n                try {\r\n                    Variable.resultProgressBar = await this.progressBarRepository.find();\r\n                    this.mqttService.publish('MQTT_Raw_ResultProgressBar', JSON.stringify(Variable.resultProgressBar))\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateProgressBar', Variable.resultProgressBar);\r\n                    }\r\n                    Variable.OldNumber = []\r\n                    if (Array.isArray(Variable.resultProgressBar)) {\r\n                        for (let j = 0; j < Variable.resultProgressBar.length; j++) {\r\n                            try {\r\n                                if (Variable.resultProgressBar[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultProgressBar[j].idDevice)) {\r\n                                        this.sharedService.Scada_Number_Add(\r\n                                            parseInt(Variable.resultProgressBar[j].idDevice),\r\n                                            Variable.resultProgressBar[j].typeDevice,\r\n                                            Variable.resultProgressBar[j].dataType,\r\n                                            Variable.resultProgressBar[j].negative,\r\n                                            Variable.resultProgressBar[j].tag,\r\n                                            Variable.resultProgressBar[j]._id)\r\n                                        this.sharedService.Scada_Bit_Add(\r\n                                            parseInt(Variable.resultProgressBar[j].idDevice),\r\n                                            Variable.resultProgressBar[j].typeDevice,\r\n                                            Variable.resultProgressBar[j].dataType,\r\n                                            Variable.resultProgressBar[j].tagEnableView,\r\n                                            Variable.resultProgressBar[j]._id\r\n                                        )\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                        function mergeArrays(...arrays) {\r\n                            let merged = [];\r\n                            arrays.forEach(arr => {\r\n                                arr.forEach((item, index) => {\r\n                                    if (item) {\r\n                                        if (!merged[index]) {\r\n                                            merged[index] = {};\r\n                                        }\r\n                                        Object.assign(merged[index], item);\r\n                                    }\r\n                                });\r\n                            });\r\n                            return merged;\r\n                        }\r\n\r\n                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                            Variable.Communication_Profinet_Items_Bit,\r\n                            Variable.Communication_Profinet_Items_Number,\r\n                            Variable.Communication_Profinet_Items_String,\r\n                            // Variable.Communication_Profinet_Items_Gauge,\r\n                            // Variable.Communication_Profinet_Items_ProgressBar,\r\n                            // Variable.Communication_Profinet_Items_Slider,\r\n                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                            Variable.Communication_Profinet_Items_String_Popup\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultProgressBar\r\n    }\r\n\r\n    async insert(progressBarData: any): Promise<any> {\r\n        try {\r\n            progressBarData._id = 'a' + Math.random().toString(36)\r\n            const newProgressBar = this.progressBarRepository.create(progressBarData);\r\n            await this.progressBarRepository.save(newProgressBar);\r\n            Variable.refreshDataProgressBar = true\r\n            return { result: 'success', message: 'Add ProgressBar Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.progressBarRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataProgressBar = true\r\n            return { result: 'success', message: 'Update ProgressBar Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(progressBarId: string): Promise<any> {\r\n        try {\r\n            await this.progressBarRepository.delete(progressBarId);\r\n            Variable.refreshDataProgressBar = true\r\n            return { result: 'success', message: 'Delete ProgressBar Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaReportService } from './scada_report.service';\r\n\r\n@Controller('report')\r\nexport class ScadaReportController {\r\n    constructor(\r\n        private readonly scadaReportService: ScadaReportService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaReportService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaReportService.insert(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaReportService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaReportService.delete(requestBody);\r\n    }\r\n\r\n}\r\n","// src/report/report.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Report')\r\nexport class ReportEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    myKeyPress: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    css: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableMqtt: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttTopic: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableFlexScale: boolean;\r\n\r\n    @Column({ nullable: true, default: 'Report' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaReportController } from './scada_report.controller';\r\nimport { ScadaReportService } from './scada_report.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ReportEntity } from './scada_report.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([ReportEntity]), SocketIoModule\r\n  ],\r\n  controllers: [ScadaReportController],\r\n  providers: [ScadaReportService]\r\n})\r\nexport class ScadaReportModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ReportEntity } from './scada_report.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaReportService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ReportEntity)\r\n        private readonly reportRepository: Repository<ReportEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        this.setupDataRefreshInterval();\r\n    }\r\n\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n        Variable.refreshDataReport = true\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataReport) {\r\n                Variable.refreshDataReport = false;\r\n                // console.log('===============================refresh report========================================');\r\n                try {\r\n                    Variable.resultReport = await this.reportRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateReport', Variable.resultReport);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    async getData() {\r\n        return Variable.resultReport;\r\n    }\r\n\r\n    async insert(reportData: any): Promise<any> {\r\n        try {\r\n            reportData._id = 'a' + Math.random().toString(36)\r\n            reportData.status = 0\r\n            const newReport = this.reportRepository.create(reportData);\r\n            await this.reportRepository.save(newReport);\r\n            Variable.refreshDataReport = true\r\n            return { result: 'success', message: 'Add Report Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.reportRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataReport = true\r\n            return { result: 'success', message: 'Update Report Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(reportId: string): Promise<any> {\r\n        try {\r\n            await this.reportRepository.delete(reportId);\r\n            Variable.refreshDataReport = true\r\n            return { result: 'success', message: 'Delete Report Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaSelectService } from './scada_select.service';\r\n\r\n@Controller('select')\r\nexport class ScadaSelectController {\r\n    constructor(\r\n        private readonly scadaSelectService: ScadaSelectService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaSelectService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaSelectService.insert(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaSelectService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaSelectService.delete(requestBody);\r\n    }\r\n\r\n}\r\n","// src/select/select.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Select')\r\nexport class SelectEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttTopic: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttCurrentValue: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttSearchValue: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttResponse: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttEditable: string;\r\n\r\n    @Column({ nullable: true })\r\n    size: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    type1Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type2Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type3Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type4Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type5Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    zoom: number;\r\n\r\n    @Column({ nullable: true })\r\n    config: string;\r\n\r\n    @Column({ nullable: true })\r\n    createClassName: string;\r\n\r\n    @Column({ nullable: true, default: 'Single' })\r\n    mode: string;\r\n\r\n    @Column({ nullable: true, default: 'bottomLeft' })\r\n    placement: string;\r\n\r\n    @Column({ nullable: true, default: 'Select' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaSelectService } from './scada_select.service';\nimport { ScadaSelectController } from './scada_select.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SelectEntity } from './scada_select.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([SelectEntity]), SocketIoModule],\n  providers: [ScadaSelectService,],\n  controllers: [ScadaSelectController]\n})\nexport class ScadaSelectModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SelectEntity } from './scada_select.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaSelectService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(SelectEntity)\r\n        private readonly selectRepository: Repository<SelectEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n        Variable.refreshDataSelect = true\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataSelect) {\r\n                Variable.refreshDataSelect = false;\r\n                // console.log('===============================refresh select========================================');\r\n                try {\r\n                    Variable.resultSelect = await this.selectRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateSelect', Variable.resultSelect);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultSelect\r\n    }\r\n\r\n    async insert(selectData: any): Promise<any> {\r\n        try {\r\n            selectData._id = 'a' + Math.random().toString(36)\r\n            const newSelect = this.selectRepository.create(selectData);\r\n            await this.selectRepository.save(newSelect);\r\n            Variable.refreshDataSelect = true\r\n            return { result: 'success', message: 'Add Select Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.selectRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataSelect = true\r\n            return { result: 'success', message: 'Update Select Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(selectId: string): Promise<any> {\r\n        try {\r\n            await this.selectRepository.delete(selectId);\r\n            Variable.refreshDataSelect = true\r\n            return { result: 'success', message: 'Delete Select Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaSetupAlarmRefreshService {\r\n    private intervalId: NodeJS.Timer;\r\n    private oldArrActiveAlarm = []\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                this.refreshData();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    refreshData() {\r\n        let ArrActiveAlarm = []\r\n        try {\r\n            //Alarm\r\n            if (Array.isArray(Variable.resultSetupAlarm)) {\r\n                for (let i = 0; i < Variable.resultSetupAlarm.length; i++) {\r\n                    try {\r\n                        if (Variable.resultSetupAlarm[i].logic && Variable.resultSetupAlarm[i].logic.length > 0) {\r\n                            if (eval(Variable.resultSetupAlarm[i].logic)) {\r\n                                if (Variable.resultSetupAlarm[i].enableAlarm) {\r\n                                    ArrActiveAlarm.push({\r\n                                        _id: Variable.resultSetupAlarm[i]._id,\r\n                                        logic: Variable.resultSetupAlarm[i].logic,\r\n                                        alarmText: Variable.resultSetupAlarm[i].alarmText,\r\n                                        typeAlarm: Variable.resultSetupAlarm[i].typeAlarm\r\n                                    })\r\n                                    if (Variable.resultSetupAlarm[i].oldValue == false) {\r\n                                        if (this.socketGateway && this.socketGateway.server) {\r\n                                            Variable.resultSetupAlarm[i].oldValue = true\r\n                                            this.socketGateway.server.emit('Server-Send-Snackbar', {\r\n                                                status: Variable.resultSetupAlarm[i].typeAlarm,\r\n                                                message: Variable.resultSetupAlarm[i].alarmText\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                Variable.resultSetupAlarm[i].oldValue = false\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        ArrActiveAlarm.push({\r\n                            _id: Variable.resultSetupAlarm[i]._id,\r\n                            logic: Variable.resultSetupAlarm[i].logic,\r\n                            alarmText: 'Wrong Logic - ' + Variable.resultSetupAlarm[i].alarmText,\r\n                            typeAlarm: Variable.resultSetupAlarm[i].typeAlarm\r\n                        })\r\n                    }\r\n\r\n                }\r\n                Variable.resultSetupAlarmTable=ArrActiveAlarm.slice()\r\n            }\r\n            if (JSON.stringify(this.oldArrActiveAlarm) !== JSON.stringify(ArrActiveAlarm)) {\r\n                this.oldArrActiveAlarm = ArrActiveAlarm.slice()\r\n                if (this.socketGateway && this.socketGateway.server) {\r\n                    this.socketGateway.server.emit('UpdateSetupAlarmTable', ArrActiveAlarm)\r\n                }\r\n            }\r\n\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaSetupAlarmService } from './scada_setup-alarm.service';\r\n\r\n@Controller('setupAlarm')\r\nexport class ScadaSetupAlarmController {\r\n    constructor(\r\n        private readonly scadaSetupAlarmService: ScadaSetupAlarmService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaSetupAlarmService.getData();\r\n    }\r\n\r\n    @Get('/getdata_setupAlarmTable')\r\n    getDataSetupAlarmTable() {\r\n        return this.scadaSetupAlarmService.getDataSetupAlarmTable();\r\n    }\r\n\r\n    @Post('/insert_setupAlarm')\r\n    insertSetupAlarm(@Body() requestBody) {\r\n        console.log(requestBody)\r\n        return this.scadaSetupAlarmService.insertSetupAlarm(requestBody);\r\n    }\r\n\r\n    @Put('/update_setupAlarm')\r\n    updateSetupAlarm(@Body() requestBody) {\r\n        return this.scadaSetupAlarmService.updateSetupAlarm(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_setupAlarm')\r\n    deleteSetupAlarm(@Body() requestBody) {\r\n        return this.scadaSetupAlarmService.deleteSetupAlarm(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('SetupAlarm')\r\nexport class SetupAlarmEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeAlarm: string;\r\n\r\n    @Column({ nullable: true })\r\n    logic: string;\r\n\r\n    @Column({ nullable: true })\r\n    oldValue: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    alarmText: string;\r\n\r\n    @Column({ nullable: true })\r\n    saveAlarm: number;\r\n    \r\n    @Column({ nullable: true,default: true })\r\n    enableAlarm: boolean;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaSetupAlarmController } from './scada_setup-alarm.controller';\nimport { ScadaSetupAlarmService } from './scada_setup-alarm.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SetupAlarmEntity } from './scada_setup-alarm.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([SetupAlarmEntity]), SocketIoModule],\n  controllers: [ScadaSetupAlarmController],\n  providers: [ScadaSetupAlarmService,]\n})\nexport class ScadaSetupAlarmModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SetupAlarmEntity } from './scada_setup-alarm.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaSetupAlarmService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(SetupAlarmEntity)\r\n        private readonly setupAlarmRepository: Repository<SetupAlarmEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized WORDDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataSetupAlarm) {\r\n                Variable.refreshDataSetupAlarm = false;\r\n                // console.log('===============================refresh setupAlarm========================================');\r\n                try {\r\n                    Variable.resultSetupAlarm = await this.setupAlarmRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateSetupAlarm', Variable.resultSetupAlarm);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultSetupAlarm\r\n    }\r\n\r\n    async getDataSetupAlarmTable() {\r\n        return Variable.resultSetupAlarmTable;\r\n    }\r\n\r\n    async insertSetupAlarm(setupAlarmData: any): Promise<any> {\r\n        try {\r\n            setupAlarmData._id = 'a' + Math.random().toString(36)\r\n            setupAlarmData.oldValue = false\r\n            const newSetupAlarm = this.setupAlarmRepository.create(setupAlarmData);\r\n            await this.setupAlarmRepository.save(newSetupAlarm);\r\n            Variable.refreshDataSetupAlarm = true\r\n            return { result: 'success', message: 'Add SetupAlarm Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateSetupAlarm(updateData: any): Promise<any> {\r\n        try {\r\n            await this.setupAlarmRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataSetupAlarm = true\r\n            return { result: 'success', message: 'Update SetupAlarm Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteSetupAlarm(setupAlarmId: string): Promise<any> {\r\n        try {\r\n            await this.setupAlarmRepository.delete(setupAlarmId);\r\n            Variable.refreshDataSetupAlarm = true\r\n            return { result: 'success', message: 'Delete SetupAlarm Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\n// import { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaSliderRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n        // private readonly mqttService: MqttService\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private isObject(variable) {\r\n        return typeof variable === 'object' && variable !== null;\r\n    }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrSlider)) {\r\n            for (let i = 0; i < Variable.haveChangeArrSlider.length; i++) {\r\n                if (Variable.haveChangeArrSlider[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrSlider[i] = false;\r\n\r\n                    if (Array.isArray(Variable.resultSlider)) {\r\n                        for (let j = 0; j < Variable.resultSlider.length; j++) {\r\n                            try {\r\n                                if (this.checkVariableTypeNumber(Variable.resultSlider[j].idDevice) && Variable.resultSlider[j].mode == 'Device') {\r\n                                    if (Variable.resultSlider[j].typeDevice == 'System') {\r\n                                        if (Variable.resultSlider[j].tag.length > 0 && Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]\r\n                                            haveChange = true\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultSlider[j].typeDevice == 'Modbus-Client') {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultSlider[j].tag)) {\r\n                                            if (Variable.resultSlider[j].dataType == 'HoldingRegister-Int16' && Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (parseInt(Variable.resultSlider[j].tag) <= Variable.Number[parseInt(Variable.resultSlider[j].idDevice)].length &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)] &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)].hasOwnProperty('HoldingRegister')\r\n                                                ) {\r\n                                                    if (parseInt(Variable.resultSlider[j].negative)) {\r\n                                                        if (parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister) > 32767) {\r\n                                                            Variable.resultSlider[j].value = parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister) - 65536\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister\r\n                                                        }\r\n                                                    } else {\r\n                                                        if (Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister < 0) {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister + 65536\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister\r\n                                                        }\r\n                                                    }\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                            if (Variable.resultSlider[j].dataType == 'InputRegister-Int16' && Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (parseInt(Variable.resultSlider[j].tag) <= Variable.Number[parseInt(Variable.resultSlider[j].idDevice)].length &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)] &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)].hasOwnProperty('InputRegister')\r\n                                                ) {\r\n                                                    if (parseInt(Variable.resultSlider[j].negative)) {\r\n                                                        if (parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister) > 32767) {\r\n                                                            Variable.resultSlider[j].value = parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister) - 65536\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister\r\n                                                        }\r\n                                                    } else {\r\n                                                        if (Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister < 0) {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister + 65536\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister\r\n                                                        }\r\n                                                    }\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                            if (Variable.resultSlider[j].dataType == 'HoldingRegister-Int32' && Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (parseInt(Variable.resultSlider[j].tag) + 1 <= Variable.Number[parseInt(Variable.resultSlider[j].idDevice)].length &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)] &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag) + 1] &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)].hasOwnProperty('HoldingRegister') &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag) + 1].hasOwnProperty('HoldingRegister')\r\n                                                ) {\r\n                                                    if (parseInt(Variable.resultSlider[j].negative)) {\r\n                                                        if (parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister) > 2147483647) {\r\n                                                            Variable.resultSlider[j].value = parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister) - 4294967296\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister\r\n                                                        }\r\n                                                    } else {\r\n                                                        if (Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister < 0) {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister + 4294967296\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].HoldingRegister\r\n                                                        }\r\n                                                    }\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                            if (Variable.resultSlider[j].dataType == 'InputRegister-Int32' && Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (parseInt(Variable.resultSlider[j].tag) + 1 <= Variable.Number[parseInt(Variable.resultSlider[j].idDevice)].length &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)] &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag) + 1] &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag)].hasOwnProperty('InputRegister') &&\r\n                                                    Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][parseInt(Variable.resultSlider[j].tag) + 1].hasOwnProperty('InputRegister')\r\n                                                ) {\r\n                                                    if (parseInt(Variable.resultSlider[j].negative)) {\r\n                                                        if (parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister) > 2147483647) {\r\n                                                            Variable.resultSlider[j].value = parseInt(Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister) - 4294967296\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister\r\n                                                        }\r\n                                                    } else {\r\n                                                        if (Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister < 0) {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister + 4294967296\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.Number[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag].InputRegister\r\n                                                        }\r\n                                                    }\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultSlider[j].typeDevice == 'Fins-Omron') {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultSlider[j].tag)) {\r\n                                            if (Variable.resultSlider[j].dataType == 'Word' && Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (parseInt(Variable.resultSlider[j].tag) <= Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)].length) {\r\n                                                    if (parseInt(Variable.resultSlider[j].negative)) {\r\n                                                        if (parseInt(Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]) > 32767) {\r\n                                                            Variable.resultSlider[j].value = parseInt(Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]) - 65536\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]\r\n                                                        }\r\n                                                    } else {\r\n                                                        if (Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag] < 0) {\r\n                                                            Variable.resultSlider[j].value = Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag] + 65536\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.WordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]\r\n                                                        }\r\n                                                    }\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                            if (Variable.resultSlider[j].dataType == 'DWord' && Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (parseInt(Variable.resultSlider[j].tag) <= Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)].length) {\r\n                                                    if (parseInt(Variable.resultSlider[j].negative)) {\r\n                                                        if (parseInt(Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]) > 2147483647) {\r\n                                                            Variable.resultSlider[j].value = parseInt(Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]) - 4294967296\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]\r\n                                                        }\r\n                                                    } else {\r\n                                                        if (Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag] < 0) {\r\n                                                            Variable.resultSlider[j].value = Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag] + 4294967296\r\n                                                        } else {\r\n                                                            Variable.resultSlider[j].value = Variable.DWordDisplay[parseInt(Variable.resultSlider[j].idDevice)][Variable.resultSlider[j].tag]\r\n                                                        }\r\n                                                    }\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultSlider[j].typeDevice == 'OPC-UA') {\r\n                                        if (Variable.resultSlider[j].tag.length > 0 && Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                            for (let obj of Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (obj && obj.hasOwnProperty(Variable.resultSlider[j].tag)) {\r\n                                                    Variable.resultSlider[j].value = obj[Variable.resultSlider[j].tag]\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultSlider[j].typeDevice == 'ACE') {\r\n                                        if (Variable.resultSlider[j].tag.length > 0 && Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                            for (let obj of Variable.Number[parseInt(Variable.resultSlider[j].idDevice)]) {\r\n                                                if (obj && obj.hasOwnProperty(Variable.resultSlider[j].tag)) {\r\n                                                    Variable.resultSlider[j].value = obj[Variable.resultSlider[j].tag]\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultSlider[j].typeDevice == 'ProfiNet' && this.isObject(Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultSlider[j].idDevice)])) {\r\n                                        function sanitizeVariableName(input) {\r\n                                            let sanitized = input.replace(/[^a-zA-Z0-9_$]/g, '');\r\n                                            if (/^[0-9]/.test(sanitized)) {\r\n                                                sanitized = '_' + sanitized;\r\n                                            }\r\n                                            return sanitized;\r\n                                        }\r\n                                        if (Variable.resultSlider[j].tag.length > 0 && Object.keys(Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultSlider[j].idDevice)]).length > 0) {\r\n                                            if (Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultSlider[j].idDevice)].hasOwnProperty(sanitizeVariableName(Variable.resultSlider[j]._id))) {\r\n                                                Variable.resultSlider[j].value = Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultSlider[j].idDevice)][(sanitizeVariableName(Variable.resultSlider[j]._id))]\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateSlider', Variable.resultSlider)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaSliderService } from './scada_slider.service';\r\n\r\n@Controller('slider')\r\nexport class ScadaSliderController {\r\n    constructor(\r\n        private readonly scadaSliderService: ScadaSliderService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaSliderService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaSliderService.insert(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaSliderService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaSliderService.delete(requestBody);\r\n    }\r\n\r\n}\r\n","// src/slider/slider.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Slider')\r\nexport class SliderEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    value: number;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameTag: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataType: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    type1Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type2Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type3Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type4Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type5Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type6Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type7Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type8Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type9Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    type10Object: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqttCurrentValue: string;\r\n\r\n    @Column({ nullable: true, default: 'Slider' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaSliderService } from './scada_slider.service';\nimport { ScadaSliderController } from './scada_slider.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SliderEntity } from './scada_slider.entity';\nimport { ConfigService } from '../config/config.service';\nimport { MqttService } from '../mqtt/mqtt.service';\nimport { SharedModule } from '../shared_module/shared.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([SliderEntity]), SocketIoModule, SharedModule],\n  controllers: [ScadaSliderController],\n  providers: [ScadaSliderService,MqttService,ConfigService]\n})\nexport class ScadaSliderModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SliderEntity } from './scada_slider.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nimport { SharedService } from '../shared_module/shared.service';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaSliderService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(SliderEntity)\r\n        private readonly sliderRepository: Repository<SliderEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n        Variable.refreshDataSlider = true\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataSlider) {\r\n                Variable.refreshDataSlider = false;\r\n                // console.log('===============================refresh slider========================================');\r\n                try {\r\n                    Variable.resultSlider = await this.sliderRepository.find();\r\n                    this.mqttService.publish('MQTT_Raw_ResultSlider', JSON.stringify(Variable.resultSlider))\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateSlider', Variable.resultSlider);\r\n                    }\r\n                    Variable.OldNumber = []\r\n                    if (Array.isArray(Variable.resultSlider)) {\r\n                        for (let j = 0; j < Variable.resultSlider.length; j++) {\r\n                            try {\r\n                                if (Variable.resultSlider[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultSlider[j].idDevice) && Variable.resultSlider[j].mode=='Device') {\r\n                                        this.sharedService.Scada_Number_Add(\r\n                                            parseInt(Variable.resultSlider[j].idDevice),\r\n                                            Variable.resultSlider[j].typeDevice,\r\n                                            Variable.resultSlider[j].dataType,\r\n                                            Variable.resultSlider[j].negative,\r\n                                            Variable.resultSlider[j].tag,\r\n                                            Variable.resultSlider[j]._id)\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n\r\n                        function mergeArrays(...arrays) {\r\n                            let merged = [];\r\n                            arrays.forEach(arr => {\r\n                                arr.forEach((item, index) => {\r\n                                    if (item) {\r\n                                        if (!merged[index]) {\r\n                                            merged[index] = {};\r\n                                        }\r\n                                        Object.assign(merged[index], item);\r\n                                    }\r\n                                });\r\n                            });\r\n                            return merged;\r\n                        }\r\n                        \r\n                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                            Variable.Communication_Profinet_Items_Bit,\r\n                            Variable.Communication_Profinet_Items_Number,\r\n                            Variable.Communication_Profinet_Items_String,\r\n                            // Variable.Communication_Profinet_Items_Gauge,\r\n                            // Variable.Communication_Profinet_Items_ProgressBar,\r\n                            // Variable.Communication_Profinet_Items_Slider,\r\n                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                            Variable.Communication_Profinet_Items_String_Popup\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultSlider\r\n    }\r\n\r\n    async insert(sliderData: any): Promise<any> {\r\n        try {\r\n            sliderData._id = 'a' + Math.random().toString(36)\r\n            const newSlider = this.sliderRepository.create(sliderData);\r\n            await this.sliderRepository.save(newSlider);\r\n            Variable.refreshDataSlider = true\r\n            return { result: 'success', message: 'Add Slider Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.sliderRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataSlider = true\r\n            return { result: 'success', message: 'Update Slider Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(sliderId: string): Promise<any> {\r\n        try {\r\n            await this.sliderRepository.delete(sliderId);\r\n            Variable.refreshDataSlider = true\r\n            return { result: 'success', message: 'Delete Slider Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaStringRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private isObject(variable) {\r\n        return typeof variable === 'object' && variable !== null;\r\n    }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        var sendRaw = false\r\n        if (Array.isArray(Variable.haveChangeArrString)) {\r\n            for (let i = 0; i < Variable.haveChangeArrString.length; i++) {\r\n                if (Variable.haveChangeArrString[i]) {\r\n                    Variable.haveChangeArrString[i] = false;\r\n                    sendRaw = true\r\n                    if (Array.isArray(Variable.resultString)) {\r\n                        for (let j = 0; j < Variable.resultString.length; j++) {\r\n                            try {\r\n                                if (!isNaN(Variable.resultString[j].idDevice) && Variable.ListString[parseInt(Variable.resultString[j].idDevice)]) {\r\n                                    if (Variable.resultString[j].typeDevice == 'ProfiNet') {\r\n                                        if (Variable.resultString[j].typeDevice == 'ProfiNet' && this.isObject(Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultString[j].idDevice)])) {\r\n                                            function sanitizeVariableName(input) {\r\n                                                // Remove invalid characters (e.g., '.', '=', etc.)\r\n                                                let sanitized = input.replace(/[^a-zA-Z0-9_$]/g, '');\r\n                                                // Ensure the variable name doesn't start with a digit\r\n                                                if (/^[0-9]/.test(sanitized)) {\r\n                                                    sanitized = '_' + sanitized;\r\n                                                }\r\n                                                return sanitized;\r\n                                            }\r\n\r\n                                            if (Variable.resultString[j].tag.length > 0 && Object.keys(Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultString[j].idDevice)]).length > 0) {\r\n                                                if (Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultString[j].idDevice)].hasOwnProperty(sanitizeVariableName(Variable.resultString[j]._id))) {\r\n                                                    Variable.resultString[j].text = Variable.Communication_Profinet_Raw_Result[parseInt(Variable.resultString[j].idDevice)][(sanitizeVariableName(Variable.resultString[j]._id))]\r\n                                                    haveChange = true\r\n                                                    Variable.ListString[parseInt(Variable.resultString[j].idDevice)][(sanitizeVariableName(Variable.resultString[j]._id))] = Variable.resultString[j].text\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (Variable.resultString[j].tag <= Variable.ListString[parseInt(Variable.resultString[j].idDevice)].length) {\r\n                                            Variable.resultString[j].text = Variable.ListString[parseInt(Variable.resultString[j].idDevice)][Variable.resultString[j].tag]\r\n                                        }\r\n                                    }\r\n                                    if (Variable.resultString[j].typeDevice == 'ACE') {\r\n                                        let idDevice = parseInt(Variable.resultString[j].idDevice)\r\n                                        let tag = Variable.resultString[j].tag\r\n\r\n                                        if (tag.length > 0 && Variable.Number[idDevice]) {\r\n                                            for (let obj of Variable.Number[idDevice]) {\r\n                                                if (obj && obj.hasOwnProperty(tag)) {\r\n                                                    Variable.resultString[j].text = obj[tag]\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                try {\r\n                                    if (\r\n                                        Variable.resultString[j] &&\r\n                                        Variable.resultString[j].nameTag &&\r\n                                        Variable.resultString[j].nameTag.length > 0\r\n                                    ) {\r\n                                        Variable.ListTagString[parseInt(Variable.resultString[j].idDevice)] = Variable.ListTagString[parseInt(Variable.resultString[j].idDevice)] || {};\r\n                                        Variable.ListTagString[parseInt(Variable.resultString[j].idDevice)][Variable.resultString[j].nameTag] =\r\n                                            Variable.resultString[j].text;\r\n                                    }\r\n                                } catch (error) {\r\n                                    console.log(error)\r\n                                }\r\n\r\n                                haveChange = true\r\n\r\n\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateString', Variable.resultString)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_String)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_String.length; j++) {\r\n                            if (!isNaN(Variable.resultProjectScreen_String[j].idDevice) && Variable.ListString[parseInt(Variable.resultProjectScreen_String[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_String[j].tag <= Variable.ListString[parseInt(Variable.resultProjectScreen_String[j].idDevice)].length) {\r\n                                    Variable.resultProjectScreen_String[j].text = Variable.ListString[parseInt(Variable.resultProjectScreen_String[j].idDevice)][Variable.resultProjectScreen_String[j].tag]\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_String', Variable.resultProjectScreen_String)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (sendRaw) {\r\n            this.mqttService.publish('MQTT_Raw_String', JSON.stringify(Variable.ListString))\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaStringService } from './scada_string.service';\r\n\r\n@Controller('string')\r\nexport class ScadaStringController {\r\n    constructor(\r\n        private readonly scadaStringService: ScadaStringService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaStringService.getData();\r\n    }\r\n\r\n    @Post('/insert_string')\r\n    insertString(@Body() requestBody) {\r\n        return this.scadaStringService.insertString(requestBody);\r\n    }\r\n\r\n    @Put('/update_string')\r\n    updateString(@Body() requestBody) {\r\n        return this.scadaStringService.updateString(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_string')\r\n    deleteString(@Body() requestBody) {\r\n        return this.scadaStringService.deleteString(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('String')\r\nexport class StringEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    dataTypeTagEnableView: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameTag: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    color: string;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    speedScroll: number;\r\n\r\n    @Column({ nullable: true })\r\n    lengthScroll: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    numberCharacter: number;\r\n\r\n    @Column({ nullable: true })\r\n    editable: boolean;\r\n\r\n    @Column({ nullable: true })\r\n    mqttEditable: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    mqttResponse: string;\r\n\r\n    @Column({ nullable: true, default: 'String' })\r\n    objectType: string;\r\n\r\n    @Column({ nullable: true, default: true })\r\n    view: boolean;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaStringController } from './scada_string.controller';\nimport { ScadaStringService } from './scada_string.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StringEntity } from './scada_string.entity';\nimport { MqttService } from '../mqtt/mqtt.service';\nimport { ConfigService } from '../config/config.service';\nimport { SharedModule } from '../shared_module/shared.module';\n@Module({\n  imports: [TypeOrmModule.forFeature([StringEntity]), SocketIoModule, SharedModule],\n  controllers: [ScadaStringController],\n  providers: [ScadaStringService,MqttService,ConfigService]\n})\nexport class ScadaStringModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { StringEntity } from './scada_string.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\nconst Variable = require('../../Variable');\r\nimport { SharedService } from '../shared_module/shared.service';\r\n\r\n@Injectable()\r\nexport class ScadaStringService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(StringEntity)\r\n        private readonly stringRepository: Repository<StringEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n        private readonly mqttService: MqttService,\r\n        private readonly sharedService: SharedService\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized STRING');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataString) {\r\n                Variable.refreshDataString = false;\r\n                // console.log('===============================refresh string========================================');\r\n                try {\r\n                    Variable.resultString = await this.stringRepository.find();\r\n                    this.mqttService.publish('MQTT_Raw_ResultString', JSON.stringify(Variable.resultString))\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateString', Variable.resultString);\r\n                    }\r\n                    Variable.OldListString = []\r\n\r\n                    if (Array.isArray(Variable.resultString)) {\r\n                        let temp_ProfiNet_Items_String = []\r\n                        for (let j = 0; j < Variable.resultString.length; j++) {\r\n                            //Add holding register of Number\r\n                            try {\r\n                                if (Variable.resultString[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultString[j].idDevice)) {\r\n                                        this.sharedService.Scada_String_Add(\r\n                                            parseInt(Variable.resultString[j].idDevice),\r\n                                            Variable.resultString[j].typeDevice,\r\n                                            Variable.resultString[j].dataType,\r\n                                            Variable.resultString[j].numberCharacter,\r\n                                            Variable.resultString[j].tag,\r\n                                            Variable.resultString[j]._id\r\n                                        )\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                        Variable.Communication_Profinet_Items_String = temp_ProfiNet_Items_String.slice()\r\n\r\n                        function mergeArrays(...arrays) {\r\n                            let merged = [];\r\n                            arrays.forEach(arr => {\r\n                                arr.forEach((item, index) => {\r\n                                    if (item) {\r\n                                        if (!merged[index]) {\r\n                                            merged[index] = {};\r\n                                        }\r\n                                        Object.assign(merged[index], item);\r\n                                    }\r\n                                });\r\n                            });\r\n                            return merged;\r\n                        }\r\n\r\n                        Variable.Communication_Profinet_Items = mergeArrays(\r\n                            Variable.Communication_Profinet_Items_Bit,\r\n                            Variable.Communication_Profinet_Items_Number,\r\n                            Variable.Communication_Profinet_Items_String,\r\n                            Variable.Communication_Profinet_Items_Gauge,\r\n                            Variable.Communication_Profinet_Items_ProgressBar,\r\n                            Variable.Communication_Profinet_Items_Slider,\r\n                            Variable.Communication_Profinet_Items_Bit_Popup,\r\n                            Variable.Communication_Profinet_Items_Number_Popup,\r\n                            Variable.Communication_Profinet_Items_String_Popup\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultString\r\n    }\r\n\r\n    async insertString(stringData: any): Promise<any> {\r\n        try {\r\n            stringData._id = 'a' + Math.random().toString(36)\r\n            stringData.text = ''\r\n            const newString = this.stringRepository.create(stringData);\r\n            await this.stringRepository.save(newString);\r\n            Variable.refreshDataString = true\r\n            return { result: 'success', message: 'Add String Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateString(updateData: any): Promise<any> {\r\n        try {\r\n            await this.stringRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataString = true\r\n            return { result: 'success', message: 'Update String Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteString(stringId: string): Promise<any> {\r\n        try {\r\n            await this.stringRepository.delete(stringId);\r\n            Variable.refreshDataString = true\r\n            return { result: 'success', message: 'Delete String Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaTextFieldRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrTextField)) {\r\n            for (let i = 0; i < Variable.haveChangeArrTextField.length; i++) {\r\n                if (Variable.haveChangeArrTextField[i]) {\r\n                    Variable.haveChangeArrTextField[i] = false;\r\n                    if (Array.isArray(Variable.resultTextField)) {\r\n                        for (let j = 0; j < Variable.resultTextField.length; j++) {\r\n                            try {\r\n                                if (!isNaN(Variable.resultTextField[j].idDevice) && Variable.TextField[parseInt(Variable.resultTextField[j].idDevice)]) {\r\n                                    if (Variable.resultTextField[j].tag <= Variable.TextField[parseInt(Variable.resultTextField[j].idDevice)].length) {\r\n                                        Variable.resultTextField[j].text = Variable.TextField[parseInt(Variable.resultTextField[j].idDevice)][Variable.resultTextField[j].tag]\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateTextField', Variable.resultTextField)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaTextFieldService } from './scada_text-field.service';\r\n\r\n@Controller('textField')\r\nexport class ScadaTextFieldController {\r\n    constructor(\r\n        private readonly scadaTextFieldService: ScadaTextFieldService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaTextFieldService.getData();\r\n    }\r\n\r\n    @Post('/insert_textField')\r\n    insertTextField(@Body() requestBody) {\r\n        return this.scadaTextFieldService.insertTextField(requestBody);\r\n    }\r\n\r\n    @Put('/update_textField')\r\n    updateTextField(@Body() requestBody) {\r\n        return this.scadaTextFieldService.updateTextField(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_textField')\r\n    deleteTextField(@Body() requestBody) {\r\n        return this.scadaTextFieldService.deleteTextField(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('TextField')\r\nexport class TextFieldEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    color: string;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    rows: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true, default: 'TextField' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaTextFieldController } from './scada_text-field.controller';\nimport { ScadaTextFieldService } from './scada_text-field.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TextFieldEntity } from './scada_text-field.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TextFieldEntity]), SocketIoModule],\n  controllers: [ScadaTextFieldController],\n  providers: [ScadaTextFieldService,]\n})\nexport class ScadaTextFieldModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { TextFieldEntity } from './scada_text-field.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaTextFieldService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(TextFieldEntity)\r\n        private readonly textFieldRepository: Repository<TextFieldEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized STRING');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataTextField) {\r\n                Variable.refreshDataTextField = false;\r\n                // console.log('===============================refresh textField========================================');\r\n                try {\r\n                    Variable.resultTextField = await this.textFieldRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateTextField', Variable.resultTextField);\r\n                    }\r\n                    Variable.OldTextField = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultTextField\r\n    }\r\n\r\n    async insertTextField(textFieldData: any): Promise<any> {\r\n        try {\r\n            textFieldData._id = 'a' + Math.random().toString(36)\r\n            textFieldData.text = ''\r\n            const newTextField = this.textFieldRepository.create(textFieldData);\r\n            await this.textFieldRepository.save(newTextField);\r\n            Variable.refreshDataTextField = true\r\n            return { result: 'success', message: 'Add TextField Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateTextField(updateData: any): Promise<any> {\r\n        try {\r\n            await this.textFieldRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataTextField = true\r\n            return { result: 'success', message: 'Update TextField Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteTextField(textFieldId: string): Promise<any> {\r\n        try {\r\n            await this.textFieldRepository.delete(textFieldId);\r\n            Variable.refreshDataTextField = true\r\n            return { result: 'success', message: 'Delete TextField Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaTotalService } from './scada_total.service';\r\n\r\n@Controller('total')\r\nexport class ScadaTotalController {\r\n    constructor(\r\n        private readonly scadaTotalService: ScadaTotalService,\r\n    ) { }\r\n\r\n    @Post('/insert')\r\n    insert(@Body() requestBody) {\r\n        return this.scadaTotalService.insert(requestBody);\r\n    }\r\n\r\n    @Post('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaTotalService.delete(requestBody);\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaTotalController } from './scada_total.controller';\r\nimport { ScadaTotalService } from './scada_total.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConfigService } from '../config/config.service';\r\n\r\nimport { BitEntity } from '../scada_bit/scada_bit.entity';\r\nimport { CameraStreamEntity } from '../scada_camera_stream/scada_camera_stream.entity';\r\nimport { ChartEntity } from '../scada_chart/scada_chart.entity';\r\nimport { DateTimePickerEntity } from '../scada_date-time-picker/scada_dateTimePicker.entity';\r\nimport { DesignEntity } from '../scada_design/scada_design.entity';\r\nimport { DesignTableEntity } from '../scada_design_table/scada_design_table.entity';\r\nimport { ElementEntity } from '../scada_element/scada_element.entity';\r\nimport { GaugeEntity } from '../scada_gauge/scada_gauge.entity';\r\nimport { ProgressBarEntity } from '../scada_progress_bar/scada_progress_bar.entity';\r\nimport { SliderEntity } from '../scada_slider/scada_slider.entity';\r\nimport { GridViewEntity } from '../scada_gridView/scada_gridView.entity';\r\nimport { LabelEntity } from '../scada_label/scada_label.entity';\r\nimport {LineEntity} from '../scada_line/scada_line.entity';\r\nimport {MapEntity} from '../scada_map/scada_map.entity';\r\nimport { NavigateEntity } from '../scada_navigate/scada_navigate.entity';\r\nimport { NumberEntity } from '../scada_number/scada_number.entity';\r\nimport { PanelEntity } from '../scada_panel/scada_panel.entity';\r\nimport { PopupEntity } from '../scada_popup/scada_popup.entity';\r\nimport { PrintEntity } from '../scada_print/scada_print.entity';\r\nimport { SelectEntity } from '../scada_select/scada_select.entity';\r\nimport { SetupAlarmEntity } from '../scada_setup-alarm/scada_setup-alarm.entity';\r\nimport { StringEntity } from '../scada_string/scada_string.entity';\r\nimport { TextFieldEntity } from '../scada_text-field/scada_text-field.entity';\r\nimport { ViewImageEntity } from '../scada_viewImage/scada_viewImage.entity';\r\nimport { ReportEntity } from '../scada_report/scada_report.entity';\r\nimport { _3DEntity } from '../scada_3D/scada_3D.entity';\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([\r\n      BitEntity,\r\n      CameraStreamEntity,\r\n      ChartEntity,\r\n      DateTimePickerEntity,\r\n      DesignEntity,\r\n      DesignTableEntity,\r\n      ElementEntity,\r\n      GaugeEntity,\r\n      ProgressBarEntity,\r\n      SliderEntity,\r\n      GridViewEntity,\r\n      LabelEntity,\r\n      LineEntity,\r\n      MapEntity,\r\n      NavigateEntity,\r\n      NumberEntity,\r\n      PanelEntity,\r\n      PopupEntity,\r\n      PrintEntity,\r\n      SelectEntity,\r\n      SetupAlarmEntity,\r\n      StringEntity,\r\n      TextFieldEntity,\r\n      ViewImageEntity,\r\n      ReportEntity,\r\n      _3DEntity\r\n    ]),\r\n    SocketIoModule\r\n  ],\r\n  controllers: [ScadaTotalController],\r\n  providers: [ScadaTotalService, ConfigService],\r\n})\r\nexport class ScadaTotalModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, EntityManager } from 'typeorm';\r\nconst Variable = require('../../Variable');\r\n\r\nimport { BitEntity } from '../scada_bit/scada_bit.entity';\r\nimport { CameraStreamEntity } from '../scada_camera_stream/scada_camera_stream.entity';\r\nimport { ChartEntity } from '../scada_chart/scada_chart.entity';\r\nimport { DateTimePickerEntity } from '../scada_date-time-picker/scada_dateTimePicker.entity';\r\nimport { DesignEntity } from '../scada_design/scada_design.entity';\r\nimport { DesignTableEntity } from '../scada_design_table/scada_design_table.entity';\r\nimport { ElementEntity } from '../scada_element/scada_element.entity';\r\nimport { GaugeEntity } from '../scada_gauge/scada_gauge.entity';\r\nimport { ProgressBarEntity } from '../scada_progress_bar/scada_progress_bar.entity';\r\nimport { SliderEntity } from '../scada_slider/scada_slider.entity';\r\nimport { GridViewEntity } from '../scada_gridView/scada_gridView.entity';\r\nimport { LabelEntity } from '../scada_label/scada_label.entity';\r\nimport { LineEntity } from '../scada_line/scada_line.entity';\r\nimport { MapEntity } from '../scada_map/scada_map.entity';\r\nimport { NavigateEntity } from '../scada_navigate/scada_navigate.entity';\r\nimport { NumberEntity } from '../scada_number/scada_number.entity';\r\nimport { PanelEntity } from '../scada_panel/scada_panel.entity';\r\nimport { PopupEntity } from '../scada_popup/scada_popup.entity';\r\nimport { PrintEntity } from '../scada_print/scada_print.entity';\r\nimport { SelectEntity } from '../scada_select/scada_select.entity';\r\nimport { SetupAlarmEntity } from '../scada_setup-alarm/scada_setup-alarm.entity';\r\nimport { StringEntity } from '../scada_string/scada_string.entity';\r\nimport { TextFieldEntity } from '../scada_text-field/scada_text-field.entity';\r\nimport { ViewImageEntity } from '../scada_viewImage/scada_viewImage.entity';\r\nimport { ReportEntity } from '../scada_report/scada_report.entity';\r\nimport { _3DEntity } from '../scada_3D/scada_3D.entity';\r\n// import { n } from 'node-opcua';\r\n\r\n@Injectable()\r\nexport class ScadaTotalService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitEntity)\r\n        private readonly bitRepository: Repository<BitEntity>,\r\n\r\n        @InjectRepository(CameraStreamEntity)\r\n        private readonly cameraStreamRepository: Repository<CameraStreamEntity>,\r\n\r\n        @InjectRepository(ChartEntity)\r\n        private readonly chartRepository: Repository<ChartEntity>,\r\n\r\n        @InjectRepository(DateTimePickerEntity)\r\n        private readonly dateTimePickerRepository: Repository<DateTimePickerEntity>,\r\n\r\n        @InjectRepository(DesignEntity)\r\n        private readonly designRepository: Repository<DesignEntity>,\r\n\r\n        @InjectRepository(DesignTableEntity)\r\n        private readonly designTableRepository: Repository<DesignTableEntity>,\r\n\r\n        @InjectRepository(ElementEntity)\r\n        private readonly elementRepository: Repository<ElementEntity>,\r\n\r\n        @InjectRepository(GaugeEntity)\r\n        private readonly gaugeRepository: Repository<GaugeEntity>,\r\n\r\n        @InjectRepository(ProgressBarEntity)\r\n        private readonly progressBarRepository: Repository<ProgressBarEntity>,\r\n\r\n        @InjectRepository(SliderEntity)\r\n        private readonly sliderRepository: Repository<SliderEntity>,\r\n\r\n        @InjectRepository(GridViewEntity)\r\n        private readonly gridViewRepository: Repository<GridViewEntity>,\r\n\r\n        @InjectRepository(LabelEntity)\r\n        private readonly labelRepository: Repository<LabelEntity>,\r\n\r\n        @InjectRepository(LineEntity)\r\n        private readonly lineRepository: Repository<LineEntity>,\r\n\r\n        @InjectRepository(MapEntity)\r\n        private readonly mapRepository: Repository<MapEntity>,\r\n\r\n        @InjectRepository(NavigateEntity)\r\n        private readonly navigateRepository: Repository<NavigateEntity>,\r\n\r\n        @InjectRepository(NumberEntity)\r\n        private readonly numberRepository: Repository<NumberEntity>,\r\n\r\n        @InjectRepository(PanelEntity)\r\n        private readonly panelRepository: Repository<PanelEntity>,\r\n\r\n        @InjectRepository(PopupEntity)\r\n        private readonly popupRepository: Repository<PopupEntity>,\r\n\r\n        @InjectRepository(PrintEntity)\r\n        private readonly printRepository: Repository<PrintEntity>,\r\n\r\n        @InjectRepository(SelectEntity)\r\n        private readonly selectRepository: Repository<SelectEntity>,\r\n\r\n        @InjectRepository(SetupAlarmEntity)\r\n        private readonly setupAlarmRepository: Repository<SetupAlarmEntity>,\r\n\r\n        @InjectRepository(StringEntity)\r\n        private readonly stringRepository: Repository<StringEntity>,\r\n\r\n        @InjectRepository(TextFieldEntity)\r\n        private readonly textFieldRepository: Repository<TextFieldEntity>,\r\n\r\n        @InjectRepository(ViewImageEntity)\r\n        private readonly viewImageRepository: Repository<ViewImageEntity>,\r\n\r\n        @InjectRepository(_3DEntity)\r\n        private readonly _3DRepository: Repository<_3DEntity>,\r\n\r\n        @InjectRepository(ReportEntity)\r\n        private readonly reportRepository: Repository<ReportEntity>,\r\n\r\n        private readonly entityManager: EntityManager\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n    }\r\n\r\n    async insert(totalData: any): Promise<any> {\r\n        if (!Array.isArray(totalData)) {\r\n            return { result: 'error', message: 'Invalid data format' };\r\n        }\r\n\r\n        try {\r\n            await this.entityManager.transaction(async (manager) => {\r\n                const tempMap = {\r\n                    Bit: [],\r\n                    CameraStream: [],\r\n                    Chart: [],\r\n                    DateTimePicker: [],\r\n                    Design: [],\r\n                    DesignTable: [],\r\n                    Element: [],\r\n                    Gauge: [],\r\n                    ProgressBar: [],\r\n                    Slider: [],\r\n                    GridView: [],\r\n                    Label: [],\r\n                    Line: [],\r\n                    Map: [],\r\n                    Navigate: [],\r\n                    Number: [],\r\n                    Panel: [],\r\n                    Popup: [],\r\n                    Print: [],\r\n                    Select: [],\r\n                    SetupAlarm: [],\r\n                    String: [],\r\n                    TextField: [],\r\n                    ViewImage: [],\r\n                    _3D: [],\r\n                    Report: [],\r\n                };\r\n                for (const element of totalData) {\r\n                    element._id = 'a' + Math.random().toString(36);\r\n                    if (tempMap[element.objectType]) {\r\n                        tempMap[element.objectType].push(element);\r\n                    } else {\r\n                        console.log('Unknown objectType:', element.objectType);\r\n                    }\r\n                }\r\n\r\n                // Insert all entities within a transaction\r\n                if (tempMap.Bit.length > 0) await manager.save(BitEntity, tempMap.Bit);\r\n                if (tempMap.CameraStream.length > 0) await manager.save(CameraStreamEntity, tempMap.CameraStream);\r\n                if (tempMap.Chart.length > 0) await manager.save(ChartEntity, tempMap.Chart);\r\n                if (tempMap.DateTimePicker.length > 0) await manager.save(DateTimePickerEntity, tempMap.DateTimePicker);\r\n                if (tempMap.Design.length > 0) await manager.save(DesignEntity, tempMap.Design);\r\n                if (tempMap.DesignTable.length > 0) await manager.save(DesignTableEntity, tempMap.DesignTable);\r\n                if (tempMap.Element.length > 0) await manager.save(ElementEntity, tempMap.Element);\r\n                if (tempMap.Gauge.length > 0) await manager.save(GaugeEntity, tempMap.Gauge);\r\n                if (tempMap.ProgressBar.length > 0) await manager.save(ProgressBarEntity, tempMap.ProgressBar);\r\n                if (tempMap.Slider.length > 0) await manager.save(SliderEntity, tempMap.Slider);\r\n                if (tempMap.GridView.length > 0) await manager.save(GridViewEntity, tempMap.GridView);\r\n                if (tempMap.Label.length > 0) await manager.save(LabelEntity, tempMap.Label);\r\n                if (tempMap.Line.length > 0) await manager.save(LineEntity, tempMap.Line);\r\n                if (tempMap.Map.length > 0) await manager.save(MapEntity, tempMap.Map);\r\n                if (tempMap.Navigate.length > 0) await manager.save(NavigateEntity, tempMap.Navigate);\r\n                if (tempMap.Number.length > 0) await manager.save(NumberEntity, tempMap.Number);\r\n                if (tempMap.Panel.length > 0) await manager.save(PanelEntity, tempMap.Panel);\r\n                if (tempMap.Popup.length > 0) await manager.save(PopupEntity, tempMap.Popup);\r\n                if (tempMap.Print.length > 0) await manager.save(PrintEntity, tempMap.Print);\r\n                if (tempMap.Select.length > 0) await manager.save(SelectEntity, tempMap.Select);\r\n                if (tempMap.SetupAlarm.length > 0) await manager.save(SetupAlarmEntity, tempMap.SetupAlarm);\r\n                if (tempMap.String.length > 0) await manager.save(StringEntity, tempMap.String);\r\n                if (tempMap.TextField.length > 0) await manager.save(TextFieldEntity, tempMap.TextField);\r\n                if (tempMap.ViewImage.length > 0) await manager.save(ViewImageEntity, tempMap.ViewImage);\r\n                if (tempMap._3D.length > 0) await manager.save(_3DEntity, tempMap._3D);\r\n                if (tempMap.Report.length > 0) await manager.save(ReportEntity, tempMap.Report);\r\n\r\n                // Update all variables after save\r\n                Variable.refreshDataBit = true;\r\n                Variable.refreshDataCameraStream = true;\r\n                Variable.refreshDataChart = true;\r\n                Variable.refreshDataDateTimePicker = true;\r\n                Variable.refreshDataDesign = true;\r\n                Variable.refreshDataDesignTable = true;\r\n                Variable.refreshDataElement = true;\r\n                Variable.refreshDataGauge = true;\r\n                Variable.refreshDataProgressBar = true;\r\n                Variable.refreshDataSlider = true;\r\n                Variable.refreshDataGridView = true;\r\n                Variable.refreshDataLabel = true;\r\n                Variable.refreshDataLine = true;\r\n                Variable.refreshDataMap = true;\r\n                Variable.refreshDataNavigate = true;\r\n                Variable.refreshDataNumber = true;\r\n                Variable.refreshDataPanel = true;\r\n                Variable.refreshDataPopup = true;\r\n                Variable.refreshDataPrint = true;\r\n                Variable.refreshDataSelect = true;\r\n                Variable.refreshDataSetupAlarm = true;\r\n                Variable.refreshDataString = true;\r\n                Variable.refreshDataTextField = true;\r\n                Variable.refreshDataViewImage = true;\r\n                Variable.refreshData3D = true;\r\n                Variable.refreshDataReport = true;\r\n            })\r\n\r\n            return { result: 'success', message: 'Upload Total Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error);\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(totalData: any[]): Promise<any> {\r\n        if (!Array.isArray(totalData)) {\r\n            return { result: 'error', message: 'Invalid data format' };\r\n        }\r\n\r\n        try {\r\n            await this.entityManager.transaction(async (manager) => {\r\n                // Group items by objectType\r\n                const groupedData = totalData.reduce((acc, item) => {\r\n                    if (!acc[item.objectType]) {\r\n                        acc[item.objectType] = [];\r\n                    }\r\n                    acc[item.objectType].push(item.id);\r\n                    return acc;\r\n                }, {});\r\n\r\n                // Delete items by objectType\r\n                if (groupedData['Bit']?.length) await manager.delete(BitEntity, groupedData['Bit']);\r\n                if (groupedData['CameraStream']?.length) await manager.delete(CameraStreamEntity, groupedData['CameraStream']);\r\n                if (groupedData['Chart']?.length) await manager.delete(ChartEntity, groupedData['Chart']);\r\n                if (groupedData['DateTimePicker']?.length) await manager.delete(DateTimePickerEntity, groupedData['DateTimePicker']);\r\n                if (groupedData['Design']?.length) await manager.delete(DesignEntity, groupedData['Design']);\r\n                if (groupedData['DesignTable']?.length) await manager.delete(DesignTableEntity, groupedData['DesignTable']);\r\n                if (groupedData['Element']?.length) await manager.delete(ElementEntity, groupedData['Element']);\r\n                if (groupedData['Gauge']?.length) await manager.delete(GaugeEntity, groupedData['Gauge']);\r\n                if (groupedData['ProgressBar']?.length) await manager.delete(ProgressBarEntity, groupedData['ProgressBar']);\r\n                if (groupedData['Slider']?.length) await manager.delete(SliderEntity, groupedData['Slider']);\r\n                if (groupedData['GridView']?.length) await manager.delete(GridViewEntity, groupedData['GridView']);\r\n                if (groupedData['Label']?.length) await manager.delete(LabelEntity, groupedData['Label']);\r\n                if (groupedData['Line']?.length) await manager.delete(LineEntity, groupedData['Line']);\r\n                if (groupedData['Map']?.length) await manager.delete(MapEntity, groupedData['Map']);\r\n                if (groupedData['Navigate']?.length) await manager.delete(NavigateEntity, groupedData['Navigate']);\r\n                if (groupedData['Number']?.length) await manager.delete(NumberEntity, groupedData['Number']);\r\n                if (groupedData['Panel']?.length) await manager.delete(PanelEntity, groupedData['Panel']);\r\n                if (groupedData['Popup']?.length) await manager.delete(PopupEntity, groupedData['Popup']);\r\n                if (groupedData['Print']?.length) await manager.delete(PrintEntity, groupedData['Print']);\r\n                if (groupedData['Select']?.length) await manager.delete(SelectEntity, groupedData['Select']);\r\n                if (groupedData['SetupAlarm']?.length) await manager.delete(SetupAlarmEntity, groupedData['SetupAlarm']);\r\n                if (groupedData['String']?.length) await manager.delete(StringEntity, groupedData['String']);\r\n                if (groupedData['TextField']?.length) await manager.delete(TextFieldEntity, groupedData['TextField']);\r\n                if (groupedData['ViewImage']?.length) await manager.delete(ViewImageEntity, groupedData['ViewImage']);\r\n                if (groupedData['_3D']?.length) await manager.delete(_3DEntity, groupedData['_3D']);\r\n                if (groupedData['Report']?.length) await manager.delete(ReportEntity, groupedData['Report']);\r\n            });\r\n\r\n            // Update all variables after save\r\n            Variable.refreshDataBit = true;\r\n            Variable.refreshDataCameraStream = true;\r\n            Variable.refreshDataChart = true;\r\n            Variable.refreshDataDateTimePicker = true;\r\n            Variable.refreshDataDesign = true;\r\n            Variable.refreshDataDesignTable = true;\r\n            Variable.refreshDataElement = true;\r\n            Variable.refreshDataGauge = true;\r\n            Variable.refreshDataProgressBar = true;\r\n            Variable.refreshDataSlider = true;\r\n            Variable.refreshDataGridView = true;\r\n            Variable.refreshDataLabel = true;\r\n            Variable.refreshDataLine = true;\r\n            Variable.refreshDataMap = true;\r\n            Variable.refreshDataNavigate = true;\r\n            Variable.refreshDataNumber = true;\r\n            Variable.refreshDataPanel = true;\r\n            Variable.refreshDataPopup = true;\r\n            Variable.refreshDataPrint = true;\r\n            Variable.refreshDataSelect = true;\r\n            Variable.refreshDataSetupAlarm = true;\r\n            Variable.refreshDataString = true;\r\n            Variable.refreshDataTextField = true;\r\n            Variable.refreshDataViewImage = true;\r\n            Variable.refreshData3D = true;\r\n            Variable.refreshDataReport = true;\r\n\r\n            return { result: 'success', message: 'Delete successful' };\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","export * from './user.dto'","import { IsNotEmpty, IsString } from \"class-validator\"\r\n\r\n//dto: data transfer object\r\nexport class AuthDTO {\r\n    @IsNotEmpty()\r\n    name: string\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    password: string\r\n}","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaUserService } from './scada_user.service';\r\nimport { AuthDTO } from './dto'\r\n@Controller('user')\r\nexport class ScadaUserController {\r\n    constructor(\r\n        private readonly scadaUserService: ScadaUserService\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaUserService.getData();\r\n    }\r\n\r\n    @Post('signup')\r\n    signup(@Body() body: AuthDTO) {\r\n        return this.scadaUserService.signup(body)\r\n    }\r\n\r\n    @Post('signin')\r\n    signin(@Body() body: AuthDTO) {\r\n        return this.scadaUserService.signin(body)\r\n    }\r\n\r\n    @Post('userVerify')\r\n    userCheck(@Body() body: any) {\r\n        return this.scadaUserService.verify(body.token)\r\n    }\r\n\r\n    @Put('/update_user')\r\n    updateUser(@Body() requestBody) {\r\n        return this.scadaUserService.updateUser(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_user')\r\n    deleteUser(@Body() requestBody) {\r\n        return this.scadaUserService.deleteUser(requestBody);\r\n    }\r\n    // @Post('/signup')\r\n    // insertUser(@Body() requestBody) {\r\n    //     return this.scadaUserService.signupUser(requestBody);\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n    // @Delete('/delete_user')\r\n    // deleteUser(@Body() requestBody) {\r\n    //     return this.scadaUserService.deleteUser(requestBody);\r\n    // }\r\n}\r\n","// src/user/user.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('User')\r\nexport class UserEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ unique: true })\r\n    name: string;\r\n\r\n    @Column()\r\n    password: string;\r\n\r\n    @Column()\r\n    levelUser: number;\r\n\r\n    @Column({ type: 'text', default: '[]' })\r\n    arrIdPageAccess: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ScadaUserController } from './scada_user.controller';\r\nimport { ScadaUserService } from './scada_user.service';\r\nimport { UserEntity } from './scada_user.entity';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { JwtStrategy } from './strategy';\r\nimport { ConfigModule } from '../config/config.module';\r\nimport { ConfigService } from '../config/config.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    TypeOrmModule.forFeature([UserEntity]),\r\n    JwtModule.register({\r\n      global: true,\r\n      secret: '123123',\r\n      signOptions: { expiresIn: '1d' },\r\n    }),SocketIoModule\r\n  ],\r\n  controllers: [ScadaUserController],\r\n  providers: [ScadaUserService, JwtStrategy]\r\n})\r\nexport class ScadaUserModule { }\r\n","import { Injectable, ForbiddenException, NotFoundException } from '@nestjs/common';\r\nimport * as argon from 'argon2'\r\nimport { AuthDTO } from './dto'\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserEntity } from './scada_user.entity';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaUserService {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(UserEntity)\r\n        private readonly userRepository: Repository<UserEntity>,\r\n        private jwtService: JwtService,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataUser) {\r\n                Variable.refreshDataUser = false;\r\n                // console.log('===============================refresh panel========================================');\r\n                try {\r\n                    Variable.resultUser = await this.userRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateUser', Variable.resultUser);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData(): Promise<UserEntity[]> {\r\n        return this.userRepository.find();\r\n    }\r\n\r\n    async signup(userDTO: AuthDTO) {\r\n        const hashedPassword = await argon.hash(userDTO.password)\r\n        //Insert database\r\n        try {\r\n            const newUser = this.userRepository.create({\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: userDTO.name,\r\n                password: hashedPassword,\r\n                levelUser: 0\r\n            });\r\n            await this.userRepository.save(newUser);\r\n            return { result: 'success', message: 'Create Account Success', data: {} };\r\n            // await this.signJwtToken(user.id, user.email)\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n    async signin(userDTO: AuthDTO) {\r\n        const { name, password } = userDTO;\r\n        //default\r\n        if (name === 'ADMIN' && password === '0989212876') {\r\n            const userInfo = {\r\n                _id: '123',\r\n                name: 'admin',\r\n                password: '',\r\n                levelUser: 0,\r\n                token: ''\r\n            }\r\n            const token = '123'\r\n            userInfo.token = token\r\n            delete userInfo.password;\r\n            return {\r\n                result: \"success\",\r\n                message: 'SignIn Success',\r\n                data: userInfo\r\n            }\r\n        }\r\n        let user = await this.userRepository.createQueryBuilder('User')\r\n            .where('name = :name', { name })\r\n            .getOne();\r\n        // let user = await this.userRepository.query(\"SELECT * FROM User WHERE name=\" + '\"' + name + '\"');\r\n        if (!user) {\r\n            throw new NotFoundException('User not found')\r\n        }\r\n        const passwordMatched = await argon.verify(\r\n            user.password,\r\n            password\r\n        )\r\n        if (!passwordMatched) {\r\n            throw new ForbiddenException('Incorrect credentials')\r\n        }\r\n        let token = await this.signJwtToken(user._id, user.name, user.levelUser, user.arrIdPageAccess)\r\n        return {\r\n            result: \"success\",\r\n            message: 'SignIn Success',\r\n            data: { _id: user._id, name: user.name, password: user.password, levelUser: user.levelUser, arrIdPageAccess:user.arrIdPageAccess, token }\r\n        }\r\n    }\r\n    async signJwtToken(userId: string, name: string, levelUser: number, arrIdPageAccess: string)\r\n        : Promise<{ accessToken: string }> {\r\n        const payload = {\r\n            sub: userId,\r\n            name, levelUser,\r\n            arrIdPageAccess\r\n        }\r\n        const jwtString = await this.jwtService.signAsync(payload, {\r\n            expiresIn: '1d',\r\n            secret: '123123'\r\n        })\r\n        return {\r\n            accessToken: jwtString\r\n        }\r\n    }\r\n    async verify(info: string) {\r\n        try {\r\n            let user = await this.jwtService.verifyAsync(info)\r\n            return {\r\n                result: \"success\",\r\n                message: 'SignIn Success',\r\n                data: { name: user.name, levelUser: user.levelUser, arrIdPageAccess:user.arrIdPageAccess\r\n                 }\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                result: \"error\",\r\n                message: 'verify error',\r\n                data: {}\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async updateUser(updateData: any): Promise<any> {\r\n        try {\r\n            if (updateData.password) {\r\n                const hashedPassword = await argon.hash(updateData.password)\r\n                updateData.password = hashedPassword\r\n                await this.userRepository.update(updateData._id, updateData);\r\n            } else {\r\n                console.log(updateData)\r\n                await this.userRepository.update(updateData._id, updateData);\r\n            }\r\n            Variable.refreshDataUser = true\r\n            return { result: 'success', message: 'Update User Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n    async deleteUser(_id: string): Promise<any> {\r\n        try {\r\n            await this.userRepository.delete(_id);\r\n            Variable.refreshDataUser = true\r\n            return { result: 'success', message: 'Delete Panel Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","export * from './jwt.strategy'","import { Injectable } from \"@nestjs/common\";\r\nimport { PassportStrategy } from '@nestjs/passport'\r\nimport { ExtractJwt, Strategy } from 'passport-jwt'\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserEntity } from '../scada_user.entity';\r\nimport { ConfigService } from \"../../config/config.service\";\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\r\n    constructor(\r\n        @InjectRepository(UserEntity)\r\n        private readonly userRepository: Repository<UserEntity>,\r\n        configService: ConfigService,\r\n    ) {\r\n        super({\r\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n            secretOrKey: configService.get('JWT_SECRET')\r\n        })\r\n    }\r\n    async validate(payload: { sub: string, name: string }) {\r\n        console.log('1231231231313')\r\n        const user = await this.userRepository.findOneBy({\r\n            _id: payload.sub\r\n        })\r\n        console.log('User')\r\n        console.log(user)\r\n        delete user.password\r\n        return user\r\n    }\r\n}","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaViewImageService } from './scada_viewImage.service';\r\n\r\n@Controller('viewImage')\r\nexport class ScadaViewImageController {\r\n    constructor(\r\n        private readonly scadaViewImageService: ScadaViewImageService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaViewImageService.getData();\r\n    }\r\n\r\n    @Post('/insert_viewImage')\r\n    insertViewImage(@Body() requestBody) {\r\n        return this.scadaViewImageService.insertViewImage(requestBody);\r\n    }\r\n\r\n    @Put('/update_viewImage')\r\n    updateViewImage(@Body() requestBody) {\r\n        return this.scadaViewImageService.updateViewImage(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_viewImage')\r\n    deleteViewImage(@Body() requestBody) {\r\n        return this.scadaViewImageService.deleteViewImage(requestBody);\r\n    }\r\n\r\n}\r\n","// src/viewImage/viewImage.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('ViewImage')\r\nexport class ViewImageEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    left: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    top: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, type: 'float' })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    mqtt: string;\r\n\r\n    @Column({ nullable: true, default: 'ViewImage' })\r\n    objectType: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaViewImageService } from './scada_viewImage.service';\nimport { ScadaViewImageController } from './scada_viewImage.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ViewImageEntity } from './scada_viewImage.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ViewImageEntity]), SocketIoModule],\n  providers: [ScadaViewImageService,],\n  controllers: [ScadaViewImageController]\n})\nexport class ScadaViewImageModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ViewImageEntity } from './scada_viewImage.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaViewImageService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ViewImageEntity)\r\n        private readonly viewImageRepository: Repository<ViewImageEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataViewImage) {\r\n                Variable.refreshDataViewImage = false;\r\n                // console.log('===============================refresh viewImage========================================');\r\n                try {\r\n                    Variable.resultViewImage = await this.viewImageRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateViewImage', Variable.resultViewImage);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultViewImage\r\n    }\r\n\r\n    async insertViewImage(viewImageData: any): Promise<any> {\r\n        try {\r\n            viewImageData._id = 'a' + Math.random().toString(36)\r\n            const newViewImage = this.viewImageRepository.create(viewImageData);\r\n            await this.viewImageRepository.save(newViewImage);\r\n            Variable.refreshDataViewImage = true\r\n            return { result: 'success', message: 'Add ViewImage Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateViewImage(updateData: any): Promise<any> {\r\n        try {\r\n            await this.viewImageRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataViewImage = true\r\n            return { result: 'success', message: 'Update ViewImage Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteViewImage(viewImageId: string): Promise<any> {\r\n        try {\r\n            await this.viewImageRepository.delete(viewImageId);\r\n            Variable.refreshDataViewImage = true\r\n            return { result: 'success', message: 'Delete ViewImage Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordAdjustRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrWordAdjust)) {\r\n            for (let i = 0; i < Variable.haveChangeArrWordAdjust.length; i++) {\r\n                try {\r\n                    if (Variable.haveChangeArrWordAdjust[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrWordAdjust[i] = false;\r\n\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('WordAdjust', Variable.WordAdjust)\r\n                        }\r\n\r\n                        if (Array.isArray(Variable.resultWordAdjust)) {\r\n                            for (let j = 0; j < Variable.resultWordAdjust.length; j++) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultWordAdjust[j].idDevice) && Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultWordAdjust[j].tag)) {\r\n                                        if (Variable.resultWordAdjust[j].tag <= Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultWordAdjust[j].negative)) {\r\n                                                if (parseInt(Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]) > 32767) {\r\n                                                    Variable.resultWordAdjust[j].text = parseInt(Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]) - 65536\r\n                                                } else {\r\n                                                    Variable.resultWordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag] < 0) {\r\n                                                    Variable.resultWordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag] + 65536\r\n                                                } else {\r\n                                                    Variable.resultWordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]\r\n                                                }\r\n                                            }\r\n                                            haveChange = true\r\n                                        }\r\n                                    } else {\r\n                                        if (Variable.resultWordAdjust[j].tag.length > 0 && Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)]) {\r\n                                            for (let obj of Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)]) {\r\n                                                if (Variable.resultWordAdjust[j].tag in obj) {\r\n                                                    Variable.resultWordAdjust[j].text = obj[Variable.resultWordAdjust[j].tag]\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateWordAdjust', Variable.resultWordAdjust)\r\n                            }\r\n                        }\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_WordAdjust)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_WordAdjust.length; j++) {\r\n                                if (Variable.resultProjectScreen_WordAdjust[j].idDevice && Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)]) {\r\n                                    if (Variable.resultProjectScreen_WordAdjust[j].tag < Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultProjectScreen_WordAdjust[j].negative)) {\r\n                                            if (parseInt(Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]) > 32767) {\r\n                                                Variable.resultProjectScreen_WordAdjust[j].text = parseInt(Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]) - 65536\r\n                                            } else {\r\n                                                Variable.resultProjectScreen_WordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_WordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_WordAdjust', Variable.resultProjectScreen_WordAdjust)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.log('WordAdjust Error Sqlite: ' + error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaWordAdjustService } from './scada_word-adjust.service';\r\n\r\n@Controller('wordAdjust')\r\nexport class ScadaWordAdjustController {\r\n    constructor(\r\n        private readonly scadaWordAdjustService: ScadaWordAdjustService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaWordAdjustService.getData();\r\n    }\r\n\r\n    @Post('/insert_wordAdjust')\r\n    insertWordAdjust(@Body() requestBody) {\r\n        return this.scadaWordAdjustService.insertWordAdjust(requestBody);\r\n    }\r\n\r\n    @Put('/update_wordAdjust')\r\n    updateWordAdjust(@Body() requestBody) {\r\n        return this.scadaWordAdjustService.updateWordAdjust(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_wordAdjust')\r\n    deleteWordAdjust(@Body() requestBody) {\r\n        return this.scadaWordAdjustService.deleteWordAdjust(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('WordAdjust')\r\nexport class WordAdjustEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaWordAdjustController } from './scada_word-adjust.controller';\r\nimport { ScadaWordAdjustService } from './scada_word-adjust.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { WordAdjustEntity } from './scada_word-adjust.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([WordAdjustEntity]), SocketIoModule],\r\n  controllers: [ScadaWordAdjustController],\r\n  providers: [ScadaWordAdjustService,]\r\n})\r\nexport class ScadaWordAdjustModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { WordAdjustEntity } from './scada_word-adjust.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordAdjustService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(WordAdjustEntity)\r\n        private readonly wordAdjustRepository: Repository<WordAdjustEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized WORDADJUST');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataWordAdjust) {\r\n                Variable.refreshDataWordAdjust = false;\r\n                // console.log('===============================refresh wordAdjust========================================');\r\n                try {\r\n                    Variable.resultWordAdjust = await this.wordAdjustRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateWordAdjust', Variable.resultWordAdjust);\r\n                    }\r\n                    Variable.OldWordAdjust = []\r\n                    if (Array.isArray(Variable.resultWordAdjust)) {\r\n                        for (let j = 0; j < Variable.resultWordAdjust.length; j++) {\r\n                            //Add holding register of WordAdjust\r\n                            try {\r\n                                if (Variable.resultWordAdjust[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultWordAdjust[j].idDevice)) {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultWordAdjust[j].tag)) {\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultWordAdjust[j].idDevice)] = Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultWordAdjust[j].idDevice)] || []\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultWordAdjust[j].idDevice)][parseInt(Variable.resultWordAdjust[j].tag)] = parseInt(Variable.resultWordAdjust[j].tag)\r\n\r\n                                            Variable.Communication_PLC_Word_Address[parseInt(Variable.resultWordAdjust[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(Variable.resultWordAdjust[j].idDevice)] || []\r\n                                            Variable.Communication_PLC_Word_Address[parseInt(Variable.resultWordAdjust[j].idDevice)][parseInt(Variable.resultWordAdjust[j].tag)] = parseInt(Variable.resultWordAdjust[j].tag)\r\n                                        } else {\r\n                                            if (Variable.resultWordAdjust[j].tag.length > 0) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultWordAdjust[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultWordAdjust[j].idDevice)] || []\r\n                                                if (!Variable.Communication_OPC_Items[parseInt(Variable.resultWordAdjust[j].idDevice)].includes(Variable.resultWordAdjust[j].tag)) {\r\n                                                    Variable.Communication_OPC_Items[parseInt(Variable.resultWordAdjust[j].idDevice)].push(Variable.resultWordAdjust[j].tag)\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultWordAdjust\r\n    }\r\n\r\n    async insertWordAdjust(wordAdjustData: any): Promise<any> {\r\n        try {\r\n            wordAdjustData._id = 'a' + Math.random().toString(36)\r\n            wordAdjustData.text = 0\r\n            const newWordAdjust = this.wordAdjustRepository.create(wordAdjustData);\r\n            await this.wordAdjustRepository.save(newWordAdjust);\r\n            Variable.refreshDataWordAdjust = true\r\n            return { result: 'success', message: 'Add WordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateWordAdjust(updateData: any): Promise<any> {\r\n        try {\r\n            await this.wordAdjustRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataWordAdjust = true\r\n            return { result: 'success', message: 'Update WordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteWordAdjust(wordAdjustId: string): Promise<any> {\r\n        try {\r\n            await this.wordAdjustRepository.delete(wordAdjustId);\r\n            Variable.refreshDataWordAdjust = true\r\n            return { result: 'success', message: 'Delete WordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordDisplayRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrWordDisplay)) {\r\n            for (let i = 0; i < Variable.haveChangeArrWordDisplay.length; i++) {\r\n                if (Variable.haveChangeArrWordDisplay[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrWordDisplay[i] = false;\r\n                    if (Array.isArray(Variable.resultWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultWordDisplay.length; j++) {\r\n                            if (this.checkVariableTypeNumber(Variable.resultWordDisplay[j].idDevice) && Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)]) {\r\n                                if (this.checkVariableTypeNumber(Variable.resultWordDisplay[j].tag)) {\r\n                                    if (parseInt(Variable.resultWordDisplay[j].tag) <= Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultWordDisplay[j].negative)) {\r\n                                            if (parseInt(Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]) > 32767) {\r\n                                                Variable.resultWordDisplay[j].text = parseInt(Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]) - 65536\r\n                                            } else {\r\n                                                Variable.resultWordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            if (Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag] < 0) {\r\n                                                Variable.resultWordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag] + 65536\r\n                                            } else {\r\n                                                Variable.resultWordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]\r\n                                            }\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                } else {\r\n                                    if (Variable.resultWordDisplay[j].tag.length > 0 && Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)]) {\r\n                                        for (let obj of Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)]) {\r\n                                            if (Variable.resultWordDisplay[j].tag in obj) {\r\n                                                Variable.resultWordDisplay[j].text = obj[Variable.resultWordDisplay[j].tag]\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateWordDisplay', Variable.resultWordDisplay)\r\n                            this.socketGateway.server.emit('UpdateRawWordDisplay', Variable.WordDisplay)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_WordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_WordDisplay.length; j++) {\r\n                            if (Variable.resultProjectScreen_WordDisplay[j].idDevice && Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_WordDisplay[j].tag < Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)].length) {\r\n                                    if (parseInt(Variable.resultProjectScreen_WordDisplay[j].negative)) {\r\n                                        if (parseInt(Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]) > 32767) {\r\n                                            Variable.resultProjectScreen_WordDisplay[j].text = parseInt(Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]) - 65536\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_WordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]\r\n                                        }\r\n                                    } else {\r\n                                        Variable.resultProjectScreen_WordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]\r\n                                    }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_WordDisplay', Variable.resultProjectScreen_WordDisplay)\r\n                        }\r\n                    }\r\n                    //tagRotate BitDisplay\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultBitDisplay)) {\r\n                        for (let j = 0; j < Variable.resultBitDisplay.length; j++) {\r\n                            if (Variable.resultBitDisplay[j].idDevice) {\r\n                                if (!isNaN(Variable.resultBitDisplay[j].tagRotate) && Variable.WordDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultBitDisplay[j].tagRotate <= Variable.WordDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)].length) {\r\n                                        Variable.resultBitDisplay[j].rotate = Variable.WordDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)][Variable.resultBitDisplay[j].tagRotate]\r\n                                    }\r\n                                }\r\n                                haveChange = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateBitDisplay', Variable.resultBitDisplay)\r\n                        }\r\n                    }\r\n\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_BitDisplay)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_BitDisplay.length; j++) {\r\n                            if (Variable.resultProjectScreen_BitDisplay[j].idDevice) {\r\n                                if (Variable.resultProjectScreen_BitDisplay[j].tagRotate !== 'undefined' && Variable.WordDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultProjectScreen_BitDisplay[j].tagRotate <= Variable.WordDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)].length) {\r\n                                        Variable.resultProjectScreen_BitDisplay[j].rotate = Variable.WordDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)][Variable.resultProjectScreen_BitDisplay[j].tagRotate]\r\n                                    }\r\n                                }\r\n                                haveChange = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_BitDisplay', Variable.resultProjectScreen_BitDisplay)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaWordDisplayService } from './scada_word-display.service';\r\n\r\n@Controller('wordDisplay')\r\nexport class ScadaWordDisplayController {\r\n    constructor(\r\n        private readonly scadaWordDisplayService: ScadaWordDisplayService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaWordDisplayService.getData();\r\n    }\r\n    @Get('/getdataraw')\r\n    getDataRaw() {\r\n        return this.scadaWordDisplayService.getDataRaw();\r\n    }\r\n\r\n    @Post('/insert_wordDisplay')\r\n    insertWordDisplay(@Body() requestBody) {\r\n        return this.scadaWordDisplayService.insertWordDisplay(requestBody);\r\n    }\r\n\r\n    @Put('/update_wordDisplay')\r\n    updateWordDisplay(@Body() requestBody) {\r\n        return this.scadaWordDisplayService.updateWordDisplay(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_wordDisplay')\r\n    deleteWordDisplay(@Body() requestBody) {\r\n        return this.scadaWordDisplayService.deleteWordDisplay(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('WordDisplay')\r\nexport class WordDisplayEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    noBorder: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    idScreen: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaWordDisplayController } from './scada_word-display.controller';\nimport { ScadaWordDisplayService } from './scada_word-display.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { WordDisplayEntity } from './scada_word-display.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([WordDisplayEntity]), SocketIoModule],\n  controllers: [ScadaWordDisplayController],\n  providers: [ScadaWordDisplayService,]\n})\nexport class ScadaWordDisplayModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { WordDisplayEntity } from './scada_word-display.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordDisplayService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(WordDisplayEntity)\r\n        private readonly wordDisplayRepository: Repository<WordDisplayEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized WORDDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataWordDisplay) {\r\n                Variable.refreshDataWordDisplay = false;\r\n                // console.log('===============================refresh wordDisplay========================================');\r\n                try {\r\n                    Variable.resultWordDisplay = await this.wordDisplayRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateWordDisplay', Variable.resultWordDisplay);\r\n                    }\r\n                    Variable.OldWordDisplay = []\r\n                    if (Array.isArray(Variable.resultWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultWordDisplay.length; j++) {\r\n                            //Add holding register of WordDisplay\r\n                            try {\r\n                                if (Variable.resultWordDisplay[j]) {\r\n                                    if (this.checkVariableTypeNumber(Variable.resultWordDisplay[j].idDevice)) {\r\n                                        if (this.checkVariableTypeNumber(Variable.resultWordDisplay[j].tag)) {\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultWordDisplay[j].idDevice)] = Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultWordDisplay[j].idDevice)] || []\r\n                                            Variable.Modbus_Client_HoldingRegister[parseInt(Variable.resultWordDisplay[j].idDevice)][parseInt(Variable.resultWordDisplay[j].tag)] = parseInt(Variable.resultWordDisplay[j].tag)\r\n\r\n                                            Variable.Communication_PLC_Word_Address[parseInt(Variable.resultWordDisplay[j].idDevice)] = Variable.Communication_PLC_Word_Address[parseInt(Variable.resultWordDisplay[j].idDevice)] || []\r\n                                            Variable.Communication_PLC_Word_Address[parseInt(Variable.resultWordDisplay[j].idDevice)][parseInt(Variable.resultWordDisplay[j].tag)] = parseInt(Variable.resultWordDisplay[j].tag)\r\n                                        } else {\r\n                                            if (Variable.resultWordDisplay[j].tag.length > 0) {\r\n                                                Variable.Communication_OPC_Items[parseInt(Variable.resultWordDisplay[j].idDevice)] = Variable.Communication_OPC_Items[parseInt(Variable.resultWordDisplay[j].idDevice)] || []\r\n                                                if (!Variable.Communication_OPC_Items[parseInt(Variable.resultWordDisplay[j].idDevice)].includes(Variable.resultWordDisplay[j].tag)) {\r\n                                                    Variable.Communication_OPC_Items[parseInt(Variable.resultWordDisplay[j].idDevice)].push(Variable.resultWordDisplay[j].tag)\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(error)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultWordDisplay\r\n    }\r\n    getDataRaw() {\r\n        return Variable.WordDisplay\r\n    }\r\n\r\n    async insertWordDisplay(wordDisplayData: any): Promise<any> {\r\n        try {\r\n            wordDisplayData._id = 'a' + Math.random().toString(36)\r\n            wordDisplayData.text = 0\r\n            const newWordDisplay = this.wordDisplayRepository.create(wordDisplayData);\r\n            await this.wordDisplayRepository.save(newWordDisplay);\r\n            Variable.refreshDataWordDisplay = true\r\n            return { result: 'success', message: 'Add WordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateWordDisplay(updateData: any): Promise<any> {\r\n        try {\r\n            await this.wordDisplayRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataWordDisplay = true\r\n            return { result: 'success', message: 'Update WordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteWordDisplay(wordDisplayId: string): Promise<any> {\r\n        try {\r\n            await this.wordDisplayRepository.delete(wordDisplayId);\r\n            Variable.refreshDataWordDisplay = true\r\n            return { result: 'success', message: 'Delete WordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SharedService } from './shared.service';\r\n@Module({\r\n    providers: [SharedService],\r\n    exports: [SharedService], // Correctly exported for use in other modules\r\n})\r\nexport class SharedModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class SharedService {\r\n    private checkVariableTypeNumber(variable: any): boolean {\r\n        if (typeof variable === 'string' && !isNaN(Number(variable)) && variable.length > 0) {\r\n            return true;\r\n        }\r\n        if (typeof variable === 'number') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private isObject(variable) {\r\n        return typeof variable === 'object' && variable !== null;\r\n    }\r\n    private sanitizeVariableName(input: string) {\r\n        let sanitized = input.replace(/[^a-zA-Z0-9_$]/g, '');\r\n        if (/^[0-9]/.test(sanitized)) {\r\n            sanitized = '_' + sanitized;\r\n        }\r\n        return sanitized;\r\n    }\r\n\r\n    Scada_Number_Return(idDevice: number, typeDevice: string, dataType: string, negative: number, tag: string, _id: string, round: number, swapHighLow: boolean): number {\r\n        if (this.checkVariableTypeNumber(idDevice)) {\r\n            if (typeDevice == 'System') {\r\n                return Variable.Number[idDevice][parseInt(tag)];\r\n            }\r\n            if (typeDevice == 'Modbus-Client') {\r\n                if (this.checkVariableTypeNumber(tag)) {\r\n                    if (dataType == 'HoldingRegister-Int16' && Variable.Number[idDevice]) {\r\n                        if (parseInt(tag) <= Variable.Number[idDevice].length &&\r\n                            Variable.Number[idDevice][parseInt(tag)] && Variable.Number[idDevice][parseInt(tag)].hasOwnProperty('HoldingRegister')) {\r\n                            if (negative) {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].HoldingRegister > 32767) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister - 65536\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister\r\n                                }\r\n                            } else {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].HoldingRegister < 0) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister + 65536\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (dataType == 'HoldingRegister-Float' && Variable.Number[idDevice]) {\r\n                        if (parseInt(tag) + 1 <= Variable.Number[idDevice].length &&\r\n                            Variable.Number[idDevice][parseInt(tag)] &&\r\n                            Variable.Number[idDevice][parseInt(tag)].hasOwnProperty('HoldingRegister') &&\r\n                            Variable.Number[idDevice][parseInt(tag) + 1] &&\r\n                            Variable.Number[idDevice][parseInt(tag) + 1].hasOwnProperty('HoldingRegister')\r\n                        ) {\r\n                            let low = Variable.Number[idDevice][parseInt(tag)].HoldingRegister\r\n                            let high = Variable.Number[idDevice][parseInt(tag) + 1].HoldingRegister\r\n                            if (swapHighLow) {\r\n                                let temp = low\r\n                                low = high\r\n                                high = temp\r\n                            }\r\n                            let combined_value = (high * 65536) + low;\r\n                            let buffer = Buffer.alloc(4);\r\n                            buffer.writeUInt32BE(combined_value, 0);\r\n                            let real = buffer.readFloatBE(0);\r\n                            return parseFloat(real.toFixed(round))\r\n                        }\r\n                    }\r\n                    if (dataType == 'InputRegister-Int16' && Variable.Number[idDevice]) {\r\n                        if (parseInt(tag) <= Variable.Number[idDevice].length && Variable.Number[idDevice][parseInt(tag)] && Variable.Number[idDevice][parseInt(tag)].hasOwnProperty('InputRegister')) {\r\n                            if (negative) {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].InputRegister > 32767) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister - 65536\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister\r\n                                }\r\n                            } else {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].InputRegister < 0) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister + 65536\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (dataType == 'InputRegister-Float' && Variable.Number[idDevice]) {\r\n                        if (parseInt(tag) + 1 <= Variable.Number[idDevice].length &&\r\n                            Variable.Number[idDevice][parseInt(tag)] && Variable.Number[idDevice][parseInt(tag)].hasOwnProperty('InputRegister') &&\r\n                            Variable.Number[idDevice][parseInt(tag) + 1] && Variable.Number[idDevice][parseInt(tag) + 1].hasOwnProperty('InputRegister')) {\r\n                            let low = Variable.Number[idDevice][parseInt(tag)].InputRegister\r\n                            let high = Variable.Number[idDevice][parseInt(tag) + 1].InputRegister\r\n                            if (swapHighLow) {\r\n                                let temp = low\r\n                                low = high\r\n                                high = temp\r\n                            }\r\n                            let combined_value = (high * 65536) + low;\r\n                            let buffer = Buffer.alloc(4);\r\n                            buffer.writeUInt32BE(combined_value, 0);\r\n                            let real = buffer.readFloatBE(0);\r\n                            return parseFloat(real.toFixed(round))\r\n                        }\r\n                    }\r\n                    if (dataType == 'HoldingRegister-Int32' && Variable.Number[idDevice]) {\r\n                        if (parseInt(tag) + 1 <= Variable.Number[idDevice].length &&\r\n                            Variable.Number[idDevice][parseInt(tag)] && Variable.Number[idDevice][parseInt(tag)].hasOwnProperty('HoldingRegister') &&\r\n                            Variable.Number[idDevice][parseInt(tag) + 1] && Variable.Number[idDevice][parseInt(tag) + 1].hasOwnProperty('HoldingRegister')\r\n                        ) {\r\n                            if (negative) {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].HoldingRegister > 2147483647) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister - 4294967296\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister\r\n                                }\r\n                            } else {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].HoldingRegister < 0) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister + 4294967296\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].HoldingRegister\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (dataType == 'InputRegister-Int32' && Variable.Number[idDevice]) {\r\n                        if (parseInt(tag) + 1 <= Variable.Number[idDevice].length &&\r\n                            Variable.Number[idDevice][parseInt(tag)] && Variable.Number[idDevice][parseInt(tag)].hasOwnProperty('InputRegister') &&\r\n                            Variable.Number[idDevice][parseInt(tag) + 1] && Variable.Number[idDevice][parseInt(tag) + 1].hasOwnProperty('InputRegister')) {\r\n                            if (negative) {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].InputRegister > 2147483647) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister - 4294967296\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister\r\n                                }\r\n                            } else {\r\n                                if (Variable.Number[idDevice][parseInt(tag)].InputRegister < 0) {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister + 4294967296\r\n                                } else {\r\n                                    return Variable.Number[idDevice][parseInt(tag)].InputRegister\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return null\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n            if (typeDevice == 'Fins-Omron') {\r\n                if (this.checkVariableTypeNumber(tag)) {\r\n                    if (dataType == 'Word' && Variable.Word[idDevice]) {\r\n                        if (parseInt(tag) <= Variable.Word[idDevice].length) {\r\n                            if (negative) {\r\n                                if (Variable.Word[idDevice][parseInt(tag)] > 32767) {\r\n                                    return Variable.Word[idDevice][parseInt(tag)] - 65536\r\n                                } else {\r\n                                    return Variable.Word[idDevice][parseInt(tag)]\r\n                                }\r\n                            } else {\r\n                                if (Variable.Word[idDevice][parseInt(tag)] < 0) {\r\n                                    return Variable.Word[idDevice][parseInt(tag)] + 65536\r\n                                } else {\r\n                                    return Variable.Word[idDevice][parseInt(tag)]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (dataType == 'DWord' && Variable.DWord[idDevice]) {\r\n                        if (parseInt(tag) <= Variable.DWord[idDevice].length) {\r\n                            if (negative) {\r\n                                if (Variable.DWord[idDevice][parseInt(tag)] > 2147483647) {\r\n                                    return Variable.DWord[idDevice][parseInt(tag)] - 4294967296\r\n                                } else {\r\n                                    return Variable.DWord[idDevice][parseInt(tag)]\r\n                                }\r\n                            } else {\r\n                                if (Variable.DWord[idDevice][parseInt(tag)] < 0) {\r\n                                    return Variable.DWord[idDevice][parseInt(tag)] + 4294967296\r\n                                } else {\r\n                                    return Variable.DWord[idDevice][parseInt(tag)]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (typeDevice == 'OPC-UA') {\r\n                if (tag.length > 0 && Variable.Number[idDevice]) {\r\n                    for (let obj of Variable.Number[idDevice]) {\r\n                        if (obj && obj.hasOwnProperty(tag)) {\r\n                            return parseFloat(obj[tag].toFixed(round))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (typeDevice == 'ACE') {\r\n                if (tag.length > 0 && Variable.Number[idDevice]) {\r\n                    for (let obj of Variable.Number[idDevice]) {\r\n                        if (obj && obj.hasOwnProperty(tag)) {\r\n                            // return obj[tag]\r\n                            return parseFloat(parseFloat(obj[tag]).toFixed(round))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (typeDevice == 'ProfiNet') {\r\n                if (this.isObject(Variable.Communication_Profinet_Raw_Result[idDevice])) {\r\n                    if (tag.length > 0 && Object.keys(Variable.Communication_Profinet_Raw_Result[idDevice]).length > 0) {\r\n                        let sanitizedTag = this.sanitizeVariableName(_id)\r\n                        if (Variable.Communication_Profinet_Raw_Result[idDevice].hasOwnProperty(sanitizedTag)) {\r\n                            return Variable.Communication_Profinet_Raw_Result[idDevice][sanitizedTag]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null\r\n    }\r\n    Scada_Bit_Return(idDevice: number, typeDevice: string, dataType: string, tag: string, _id: string): number {\r\n        if (this.checkVariableTypeNumber(idDevice) && Variable.Bit[idDevice]) {\r\n            if (typeDevice == 'System' && this.checkVariableTypeNumber(tag)) {\r\n                return Variable.Bit[idDevice][parseInt(tag)]\r\n            }\r\n            if (typeDevice == 'Fins-Omron') {\r\n                const regex = /^\\d+\\.\\d+$/;\r\n                if (regex.test(tag)) {\r\n                    if (tag.length > 0) {\r\n                        for (let obj of Variable.Bit[idDevice]) {\r\n                            if (obj && obj.hasOwnProperty(tag)) {\r\n                                return obj[tag]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (typeDevice == 'Modbus-Client') {\r\n                if (this.checkVariableTypeNumber(tag)) {\r\n                    if (tag <= Variable.Bit[idDevice].length) {\r\n                        if (dataType == 'Coil') {\r\n                            if (Variable.Bit[idDevice][parseInt(tag)] && Variable.Bit[idDevice][parseInt(tag)].hasOwnProperty('Coil')) {\r\n                                return Variable.Bit[idDevice][parseInt(tag)].Coil\r\n                            }\r\n                        }\r\n                        if (dataType == 'DiscreteInput') {\r\n                            if (Variable.Bit[idDevice][parseInt(tag)] && Variable.Bit[idDevice][parseInt(tag)].hasOwnProperty('DiscreteInput')) {\r\n                                return Variable.Bit[idDevice][parseInt(tag)].DiscreteInput\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (typeDevice == 'OPC-UA') {\r\n                if (tag) {\r\n                    for (let obj of Variable.Bit[idDevice]) {\r\n                        if (obj && obj.hasOwnProperty(tag)) {\r\n                            return obj[tag]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (typeDevice == 'ACE') {\r\n                if (tag) {\r\n                    for (let obj of Variable.Bit[idDevice]) {\r\n                        if (obj && obj.hasOwnProperty(tag)) {\r\n                            return obj[tag]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (typeDevice == 'ProfiNet') {\r\n                if (this.isObject(Variable.Communication_Profinet_Raw_Result[idDevice])) {\r\n                    if (tag.length > 0 && Object.keys(Variable.Communication_Profinet_Raw_Result[idDevice]).length > 0) {\r\n                        let sanitizedTag = this.sanitizeVariableName(_id + tag)\r\n                        if (Variable.Communication_Profinet_Raw_Result[idDevice].hasOwnProperty(sanitizedTag)) {\r\n                            return Variable.Communication_Profinet_Raw_Result[idDevice][sanitizedTag]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    Scada_Number_Add(idDevice: number, typeDevice: string, dataType: string, negative: number, tag: string, _id: string): void {\r\n        if (this.checkVariableTypeNumber(tag)) {\r\n            if (typeDevice == 'Modbus-Client') {\r\n                if (dataType == 'HoldingRegister-Int16') {\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice] = Variable.Modbus_Client_HoldingRegister[idDevice] || []\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n                if (dataType == 'HoldingRegister-Int32') {\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice] = Variable.Modbus_Client_HoldingRegister[idDevice] || []\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice][parseInt(tag) + 1] = parseInt(tag) + 1\r\n                }\r\n                if (dataType == 'HoldingRegister-Float') {\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice] = Variable.Modbus_Client_HoldingRegister[idDevice] || []\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice][parseInt(tag) + 1] = parseInt(tag) + 1\r\n                }\r\n                if (dataType == 'InputRegister-Int16') {\r\n                    Variable.Modbus_Client_InputRegister[idDevice] = Variable.Modbus_Client_InputRegister[idDevice] || []\r\n                    Variable.Modbus_Client_InputRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n                if (dataType == 'InputRegister-Int32') {\r\n                    Variable.Modbus_Client_InputRegister[idDevice] = Variable.Modbus_Client_InputRegister[idDevice] || []\r\n                    Variable.Modbus_Client_InputRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                    Variable.Modbus_Client_InputRegister[idDevice][parseInt(tag) + 1] = parseInt(tag) + 1\r\n                }\r\n                if (dataType == 'InputRegister-Float') {\r\n                    Variable.Modbus_Client_InputRegister[idDevice] = Variable.Modbus_Client_InputRegister[idDevice] || []\r\n                    Variable.Modbus_Client_InputRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                    Variable.Modbus_Client_InputRegister[idDevice][parseInt(tag) + 1] = parseInt(tag) + 1\r\n                }\r\n            }\r\n            if (typeDevice == 'Fins-Omron') {\r\n                if (dataType == 'Word') {\r\n                    Variable.WordTag[idDevice] = Variable.WordTag[idDevice] || []\r\n                    Variable.WordTag[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n                if (dataType == 'DWord') {\r\n                    Variable.DWordTag[idDevice] = Variable.DWordTag[idDevice] || []\r\n                    Variable.DWordTag[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n            }\r\n\r\n        }\r\n        if (typeDevice == 'OPC-UA') {\r\n            if (this.checkVariableTypeNumber(tag)) {\r\n                Variable.Communication_OPC_Items[idDevice] = Variable.Communication_OPC_Items[idDevice] || []\r\n                if (!Variable.Communication_OPC_Items[idDevice].includes(tag)) {\r\n                    Variable.Communication_OPC_Items[idDevice].push(tag)\r\n                }\r\n            }\r\n        }\r\n        if (typeDevice == 'ACE') {\r\n            Variable.Communication_ACE_Items[idDevice] = Variable.Communication_ACE_Items[idDevice] || []\r\n            if (tag) {\r\n                if (!Variable.Communication_ACE_Items[idDevice].includes(tag)) {\r\n                    Variable.Communication_ACE_Items[idDevice].push(tag)\r\n                }\r\n            }\r\n        }\r\n        if (typeDevice == 'ProfiNet') {\r\n            if (tag) {\r\n                Variable.Temp_ProfiNet_Items_Number[idDevice] = Variable.Temp_ProfiNet_Items_Number[idDevice] || {}\r\n                Variable.Temp_ProfiNet_Items_Number[idDevice][this.sanitizeVariableName(_id)] = tag\r\n            }\r\n        }\r\n    }\r\n    Scada_Bit_Add(idDevice: number, typeDevice: string, dataType: string, tag: string, _id: string): void {\r\n        if (this.checkVariableTypeNumber(tag)) {\r\n            if (typeDevice == 'Modbus-Client') {\r\n                if (dataType == 'Coil') {\r\n                    Variable.Modbus_Client_Coil[idDevice] = Variable.Modbus_Client_Coil[idDevice] || []\r\n                    Variable.Modbus_Client_Coil[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n                if (dataType == 'DiscreteInput') {\r\n                    Variable.Modbus_Client_DiscreteInput[idDevice] = Variable.Modbus_Client_DiscreteInput[idDevice] || []\r\n                    Variable.Modbus_Client_DiscreteInput[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n            }\r\n        }\r\n        if (tag) {\r\n            if (typeDevice == 'Fins-Omron') {\r\n                const regex = /^\\d+\\.\\d+$/;\r\n                if (regex.test(tag)) {\r\n                    Variable.Communication_PLC_Bit_Address_String[idDevice] = Variable.Communication_PLC_Bit_Address_String[idDevice] || []\r\n                    Variable.Communication_PLC_Bit_Address_String[idDevice].push(tag)\r\n\r\n                    Variable.Communication_PLC_Word_Address[idDevice] = Variable.Communication_PLC_Word_Address[idDevice] || []\r\n                    Variable.Communication_PLC_Word_Address[idDevice][tag.split('.')[0]] = parseInt(tag.split('.')[0])\r\n                }\r\n            }\r\n            if (typeDevice == 'OPC-UA') {\r\n                Variable.Communication_OPC_Items[idDevice] = Variable.Communication_OPC_Items[idDevice] || []\r\n                if (!Variable.Communication_OPC_Items[idDevice].includes(tag)) {\r\n                    Variable.Communication_OPC_Items[idDevice].push(tag)\r\n                }\r\n            }\r\n            if (typeDevice == 'ACE') {\r\n                Variable.Communication_ACE_Items[idDevice] = Variable.Communication_ACE_Items[idDevice] || []\r\n                if (!Variable.Communication_ACE_Items[idDevice].includes(tag)) {\r\n                    Variable.Communication_ACE_Items[idDevice].push(tag)\r\n                }\r\n            }\r\n            if (typeDevice == 'ProfiNet') {\r\n                Variable.Communication_Profinet_Items_Bit[idDevice] = Variable.Communication_Profinet_Items_Bit[idDevice] || {}\r\n                Variable.Communication_Profinet_Items_Bit[idDevice][this.sanitizeVariableName(_id + tag)] = tag\r\n            }\r\n        }\r\n    }\r\n    Scada_String_Add(idDevice: number, typeDevice: string, dataType: string, numberCharacter: number, tag: string, _id: string): void {\r\n        if (this.checkVariableTypeNumber(tag)) {\r\n            if (typeDevice == 'Modbus-Client') {\r\n                if (dataType == 'HoldingRegister-Int16') {\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice] = Variable.Modbus_Client_HoldingRegister[idDevice] || []\r\n                    Variable.Modbus_Client_HoldingRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n                if (dataType == 'InputRegister-Int16') {\r\n                    Variable.Modbus_Client_InputRegister[idDevice] = Variable.Modbus_Client_InputRegister[idDevice] || []\r\n                    Variable.Modbus_Client_InputRegister[idDevice][parseInt(tag)] = parseInt(tag)\r\n                }\r\n                Variable.Communication_PLC_String_Length[idDevice] = Variable.Communication_PLC_String_Length[idDevice] || {}\r\n                Variable.Communication_PLC_String_Length[idDevice][_id] = numberCharacter\r\n            }\r\n            if (typeDevice == 'Fins-Omron') {\r\n                Variable.WordTag[idDevice] = Variable.WordTag[idDevice] || []\r\n                Variable.WordTag[idDevice][parseInt(tag)] = parseInt(tag)\r\n\r\n                Variable.Communication_PLC_String_Length[idDevice] = Variable.Communication_PLC_String_Length[idDevice] || {}\r\n                Variable.Communication_PLC_String_Length[idDevice][_id] = numberCharacter\r\n            }\r\n        }\r\n        if (tag) {\r\n            if (typeDevice == 'OPC-UA') {\r\n                Variable.Communication_OPC_Items[idDevice] = Variable.Communication_OPC_Items[idDevice] || []\r\n                if (!Variable.Communication_OPC_Items[idDevice].includes(tag)) {\r\n                    Variable.Communication_OPC_Items[idDevice].push(tag)\r\n                }\r\n\r\n                Variable.Communication_PLC_String_Length[idDevice] = Variable.Communication_PLC_String_Length[idDevice] || {}\r\n                Variable.Communication_PLC_String_Length[idDevice][_id] = numberCharacter\r\n            }\r\n\r\n            if (typeDevice == 'ACE') {\r\n                Variable.Communication_ACE_Items[idDevice] = Variable.Communication_ACE_Items[idDevice] || []\r\n                if (!Variable.Communication_ACE_Items[idDevice].includes(tag)) {\r\n                    Variable.Communication_ACE_Items[idDevice].push(tag)\r\n                }\r\n\r\n                Variable.Communication_PLC_String_Length[idDevice] = Variable.Communication_PLC_String_Length[idDevice] || {}\r\n                Variable.Communication_PLC_String_Length[idDevice][_id] = numberCharacter\r\n            }\r\n            if (typeDevice == 'ProfiNet') {\r\n                Variable.Temp_ProfiNet_Items_Number[idDevice] = Variable.Temp_ProfiNet_Items_Number[idDevice] || {}\r\n                Variable.Temp_ProfiNet_Items_Number[idDevice][this.sanitizeVariableName(_id)] = tag\r\n\r\n                Variable.Communication_PLC_String_Length[idDevice] = Variable.Communication_PLC_String_Length[idDevice] || {}\r\n                Variable.Communication_PLC_String_Length[idDevice][_id] = numberCharacter\r\n            }\r\n        }\r\n    }\r\n}","// src/socket.gateway.ts\r\nimport { WebSocketGateway, SubscribeMessage, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\r\nimport { Server, Socket } from 'socket.io';\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\n\r\n@WebSocketGateway({ transports: ['websocket'], port: 1234 })\r\nexport class SocketGateway implements OnGatewayConnection, OnGatewayDisconnect {\r\n  constructor(\r\n    private readonly mqttService: MqttService\r\n\r\n  ) {\r\n\r\n  }\r\n\r\n  @WebSocketServer() server: Server;\r\n\r\n  handleConnection(client: Socket, ...args: any[]) {\r\n    const clientId = client.id;\r\n    client.setMaxListeners(100);\r\n    console.log(`Client connected with ID: ${clientId}`);\r\n    // You can send the ID back to the client if needed\r\n  }\r\n\r\n  handleDisconnect(client: Socket) {\r\n    const clientId = client.id;\r\n    console.log(`Client disconnected with ID: ${clientId}`);\r\n\r\n    // Remove the 'message' event listener\r\n    // client.off('message', this.handleMessage);\r\n\r\n  }\r\n\r\n\r\n  @SubscribeMessage('Client-send-data')\r\n  handleMessage(client: any, payload: any): void {\r\n    this.mqttService.publish('Client-send-data', JSON.stringify(payload))\r\n  }\r\n}\r\n\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketGateway } from './socket_io.gateway';\r\nimport { MqttModule } from '../mqtt/mqtt.module';\r\n@Module({\r\n    imports: [MqttModule],\r\n    providers: [SocketGateway],\r\n    exports: [SocketGateway],\r\n})\r\nexport class SocketIoModule { }\r\n","import { Controller, Get } from '@nestjs/common';\r\nimport { SystemApiService } from './system_api.service';\r\n\r\n@Controller('system')\r\nexport class SystemApiController {\r\n    constructor(\r\n        private readonly systemApiService: SystemApiService,\r\n    ) { }\r\n\r\n    @Get('nodered_port')\r\n    responsesocket() {\r\n        return (this.systemApiService.getPort())\r\n    }\r\n}\r\n\r\n","import { Module } from '@nestjs/common';\nimport { SystemApiController } from './system_api.controller';\nimport { SystemApiService } from './system_api.service';\nimport { ConfigModule } from '../config/config.module'; // import ConfigModule\n@Module({\n  controllers: [SystemApiController],\n  providers: [SystemApiService],\n  imports: [ConfigModule],\n})\nexport class SystemApiModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { ConfigService } from \"../config/config.service\"; // Update with the correct path\r\n\r\n@Injectable()\r\nexport class SystemApiService implements OnModuleInit {\r\n    port: number;\r\n\r\n    constructor(private readonly configService: ConfigService) { }\r\n\r\n    onModuleInit() {\r\n        this.port = parseInt(this.configService.get('PORT'), 10) || 8001;\r\n    }\r\n\r\n    getPort() {\r\n        return { PORT: this.port };\r\n    }\r\n}\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/microservices\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"@nestjs/websockets\");","module.exports = require(\"@node-minify/core\");","module.exports = require(\"@node-minify/uglify-js\");","module.exports = require(\"argon2\");","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"class-validator\");","module.exports = require(\"dotenv\");","module.exports = require(\"events\");","module.exports = require(\"exceljs\");","module.exports = require(\"mqtt\");","module.exports = require(\"node-opcua\");","module.exports = require(\"node-red\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"socket.io\");","module.exports = require(\"sqlite3\");","module.exports = require(\"systeminformation\");","module.exports = require(\"typeorm\");","module.exports = require(\"util\");","module.exports = require(\"webpack\");","module.exports = require(\"dgram\");","module.exports = require(\"fs\");","module.exports = require(\"net\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nconst EventEmitter = require('events');\r\nrequire('events').EventEmitter.defaultMaxListeners = 100; // Add this to increase limit\r\nconst emitter = new EventEmitter();\r\nemitter.setMaxListeners(100); // Set the maximum number of listeners to 100\r\n\r\nconst RED = require('node-red');\r\n\r\nimport * as path from 'path';\r\nconst FinsClient = require('../PLC/Lib/libFins/index');\r\nconst NodeS7 = require('../PLC/Lib/libSiemens/nodeS7');\r\n// import * as ModbusClient from '../PLC/Lib/libModbus/jsmodbus/src/modbus';\r\nconst SubFunction = require('../SubFunction.js');\r\nconst Variable = require('../Variable.js');\r\n\r\nconst VariableSystem = require('../VariableSystem.js');\r\nconst LS_Admin = require('../LS_Admin.js');\r\n\r\n\r\nconst si = require('systeminformation');\r\nconst bcrypt = require('bcrypt');\r\nconst fs = require('fs');\r\nvar active = false\r\nrequire('dotenv').config();\r\n// import { MicroserviceClientModule } from './microservice-client/microservice-client.module';\r\n// import { Transport, MicroserviceOptions } from '@nestjs/microservices';\r\nimport { ConfigService } from './config/config.service';\r\nimport * as bodyParser from 'body-parser';\r\n\r\nfunction compareAsync(value1, value2) {\r\n  return new Promise((resolve, reject) => {\r\n    bcrypt.compare(value1, value2, (error, result) => {\r\n      if (error) {\r\n        reject(error);\r\n      } else {\r\n        resolve(result);\r\n      }\r\n    });\r\n  });\r\n}\r\nasync function checkActive(license) {\r\n  try {\r\n    //print .env \r\n    const data = await si.system();\r\n    if (data.virtual && data.manufacturer === 'Microsoft') {\r\n      if (data.model === 'Docker Container') {\r\n        const containerId = fs.readFileSync('/proc/self/cgroup', 'utf-8')\r\n          .split('\\n')\r\n          .filter(line => line.includes('docker'))\r\n          .map(line => line.split('/').pop())\r\n          .shift();\r\n\r\n        const res = await compareAsync(containerId + '1101111010', license);\r\n        if (res === true) {\r\n          SubFunction.setLogServer(JSON.stringify('Check LICENSE OK'));\r\n          return true;\r\n        } else {\r\n          SubFunction.setLogServer(JSON.stringify('Check LICENSE NG'));\r\n          SubFunction.saveFeedbackFile('./Store/LicenseFeedback.json', containerId);\r\n          VariableSystem.uuid = containerId;\r\n          return false;\r\n        }\r\n      } else {\r\n        console.log('Can not get UUID')\r\n        console.log(data)\r\n        return false\r\n      }\r\n    }\r\n    if (data.virtual && data.manufacturer === 'DigitalOcean') {\r\n      if (data.uuid !== '' || data.serial !== '') {\r\n        let temp = data.uuid || data.serial\r\n        const res = await compareAsync(temp + '1101111010', license);\r\n        if (res === true) {\r\n          console.log('Check LICENSE OK');\r\n          return true;\r\n        } else {\r\n          console.log('Check LICENSE NG');\r\n          VariableSystem.uuid = temp;\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!data.virtual) {\r\n      if (data.uuid !== '' || data.serial !== '') {\r\n        let temp = data.uuid || data.serial\r\n        const res = await compareAsync(temp + '1101111010', license);\r\n        if (res === true) {\r\n          console.log('Check LICENSE OK');\r\n          return true;\r\n        } else {\r\n          console.log('Check LICENSE NG');\r\n          VariableSystem.uuid = temp;\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    console.log(data)\r\n    VariableSystem.uuid = \"Can't Running in Visualized Environment\";\r\n    return false;\r\n  } catch (error) {\r\n    console.log(error)\r\n    SubFunction.setLogServer(JSON.stringify(error))\r\n    SubFunction.saveJsonFile('./Store/LicenseFeedback.json', error);\r\n    return false\r\n  }\r\n}\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule, {\r\n    cors: true,\r\n  });\r\n\r\n  // Increase the limit for JSON payloads to 10mb\r\n  app.use(bodyParser.json({ limit: '10mb' }));\r\n  // Increase the limit for URL-encoded payloads to 10mb\r\n  app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));\r\n  // Increase raw body size limit\r\n  // app.use(bodyParser.raw({limit: '100mb'}));\r\n\r\n  app.useGlobalPipes(new ValidationPipe())\r\n  const configService = app.get(ConfigService);\r\n  const license = configService.get('LICENSE');\r\n  const User_Nodered = configService.get('User_Nodered')\r\n\r\n  active = await checkActive(license)\r\n  if (active == true) {\r\n    VariableSystem.active = true\r\n    LS_Admin.active = true\r\n  }\r\n  Object.freeze(LS_Admin);\r\n\r\n  // Read version from package.json\r\n  const packageJson = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json'), 'utf8'));\r\n  const version = packageJson.version;\r\n  // Create Node-RED instance\r\n  const settings = {\r\n    uiHost: '0.0.0.0',\r\n    httpAdminRoot: '/',\r\n    httpNodeRoot: '/api',\r\n    userDir: `${path.resolve(__dirname, '..')}/userDir`, // Customize the user directory\r\n    // userDir: 'D:/React/Nestjs/nest-js_server/userDir', // Customize the user directory\r\n    functionGlobalContext: {\r\n      VariableSystem: VariableSystem,\r\n      Variable: Variable,\r\n      FinsClient: FinsClient,\r\n      NodeS7: NodeS7,\r\n      SubFunction: SubFunction,\r\n      sqlite3: require('sqlite3').verbose(),\r\n      active: active,\r\n      report_excel: require('exceljs'),\r\n      minify: require('@node-minify/core'),\r\n      uglifyJS: require('@node-minify/uglify-js'),\r\n      version: version,\r\n    }, // Optional: Add global context\r\n\r\n    // nodesDir: './nodesDir',\r\n    flowFile: 'flows.json', // Specify the flow file\r\n\r\n    adminAuth: {\r\n      type: \"credentials\",\r\n      users: [{\r\n        username: \"admin\",\r\n        password: \"$2b$08$RsDv7szxDDyA8om0Naga0e3aQ4dicbhf3X7SIbatlP75XRVZo0I2u\",\r\n        permissions: \"*\"\r\n      }],\r\n      sessionExpiryTime: 43200\r\n    },\r\n    functionExternalModules: true,\r\n    credentialSecret: \"LeVanTinh\",\r\n\r\n    // Increase startup timeout\r\n    startupTimeout: 120000,  // 120 seconds instead of default 30\r\n\r\n    // Disable safe mode if you don't need it\r\n    safeMode: false,\r\n\r\n    // Optimize flow file handling\r\n    flowFilePretty: false,\r\n\r\n    // Reduce logging during startup\r\n    logging: {\r\n      console: {\r\n        level: \"info\",\r\n        metrics: false,\r\n        audit: false\r\n      }\r\n    }\r\n  };\r\n  if (User_Nodered) {\r\n    const matches = JSON.parse(User_Nodered.replace(/\\\\/g, ''))\r\n    if (Array.isArray(matches)) {\r\n      let tempArr: { username: any; password: any; permissions: any; }[] = []\r\n      matches.map(item => {\r\n        tempArr.push({\r\n          username: item.username,\r\n          password: item.password,\r\n          permissions: item.permissions\r\n        })\r\n      })\r\n      settings.adminAuth.users = settings.adminAuth.users.concat(matches);\r\n    }\r\n\r\n  }\r\n\r\n  RED.init(app.getHttpServer(), settings);\r\n  // Serve the Node-RED editor UI\r\n  app.use('/', RED.httpAdmin);\r\n  // Serve the Node-RED HTTP nodes API\r\n  app.use('/api', RED.httpNode);\r\n  // // Start Node-RED\r\n  RED.start();\r\n  console.log('================PORT================ ' + configService.get('PORT'))\r\n  await app.listen(configService.get('PORT') || 8001);\r\n\r\n  // Pass the RED instance to the TypeOrmConfigService\r\n  // app.useLogger(app.get(Logger));\r\n\r\n  // Bootstrap the microservice client module\r\n  // const microserviceClientApp = await NestFactory.createMicroservice<MicroserviceOptions>(MicroserviceClientModule, {\r\n  //   transport: Transport.MQTT,\r\n  //   options: {\r\n  //     url: 'mqtt://localhost:1883',\r\n  //   },\r\n  // });\r\n  // await microserviceClientApp.listen()\r\n}\r\nbootstrap();\r\n"],"names":["module","exports","active","DefaultHostValues","host","port","DefaultOptions","timeout","DefaultFinsHeader","ICF","RSV","GCT","DNA","DA1","DA2","SNA","SA1","SA2","SID","Commands","CONTROLLER_STATUS_READ","MEMORY_AREA_READ","MEMORY_AREA_WRITE","MEMORY_AREA_FILL","RUN","STOP","FatalErrorData","SYSTEM_ERROR","IO_SETTING_ERROR","IO_POINT_OVERFLOW","CPU_BUS_ERROR","MEMORY_ERROR","NonFatalErrorData","PC_LINK_ERROR","HOST_LINK_ERROR","BATTERY_ERROR","REMOTE_IO_ERROR","SPECIAL_IO_UNIT_ERROR","IO_COLLATE_ERROR","Status","CPU_STANDBY","Modes","MONITOR","DEBUG","MemoryAreas","Errors","dgram","inherits","EventEmitter","constants","FinsClient","options","this","call","init","_compareArrays","a","b","length","i","_mergeArrays","array","flat","l","type","Object","prototype","toString","split","pop","shift","toLowerCase","concat","test","_keyFromValue","dict","value","keys","filter","key","_padHex","width","number","substr","_wordsToBytes","words","bytes","push","_translateMemoryAddress","memoryAddress","matches","match","decodedMemory","temp","_incrementSID","sid","_buildHeader","header","_buildPacket","raw","_getResponseType","buf","response","_processDefault","rinfo","command","slice","remotehost","address","_processStatusRead","status","mode","fatalErrorData","nonFatalErrorData","readInt16BE","statusCodes","runModes","_processMemoryAreaRead","data","values","_processReply","commands","join","_decodePacket","code","self","defaultHost","defaultOptions","socket","createSocket","responded","on","msg","emit","err","setTimeout","read","regsToRead","callback","packet","buffer","Buffer","send","write","dataToBeWritten","regsToWrite","fill","run","stop","close","net","util","NodeS7","opts","silent","debug","connectReq","from","negotiatePDU","readReqHeader","readReq","alloc","writeReqHeader","writeReq","resetPending","resetTimeout","undefined","isoclient","isoConnectionState","requestMaxPDU","maxPDU","requestMaxParallel","maxParallel","parallelJobsNow","maxGap","doNotOptimize","connectCallback","readDoneCallback","writeDoneCallback","connectTimeout","PDUTimeout","globalTimeout","rack","slot","localTSAP","remoteTSAP","readPacketArray","writePacketArray","polledReadBlockList","instantWriteBlockList","globalReadBlockList","globalWriteBlockList","masterSequenceNumber","translationCB","doNothing","connectionParams","connectionID","addRemoveArray","readPacketValid","writeInQueue","connectCBIssued","dropConnectionCallback","dropConnectionTimer","reconnectTimer","rereadTimer","doneSending","element","sent","rcvd","checkRFCData","RFC_Version","TPKT_Length","TPDU_Code","LastDataUnit","S7AddrToBuffer","addrinfo","isWriting","thisBitOffset","theReq","datatype","writeUInt16BE","byteLength","arrayLength","bitOffset","writeUInt8","areaS7Code","dbNumber","writeUInt32BE","offset","processS7Packet","theData","theItem","thePointer","theCID","remainingLength","isNaN","reportedDataLength","prePointer","qualityBuffer","valid","errCode","readTransportCode","readUInt16BE","responseCode","transportCode","expectedLength","byteBuffer","processS7WriteItem","writeQualityBuffer","writeResponse","readUInt8","addr","writePostProcess","writeQuality","arrayIndex","dtypelen","fromBCD","n","toBCD","readDT","isUTC","date","year","month","day","hour","min","sec","ms_1","ms_2","Date","UTC","writeDT","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getDay","readDTL","ns","readUInt32BE","writeDTL","processS7ReadItem","strlen","tempString","quality","bitShiftAmount","Array","badValue","readFloatBE","readDoubleBE","readInt32BE","charOffset","String","fromCharCode","bufferizeS7Item","theByte","writeValue","writeBuffer","writeFloatBE","writeDoubleBE","writeInt32BE","writeInt16BE","charCodeAt","Math","stringToS7Addr","useraddr","cParam","splitString","splitString2","S7Item","addrtype","replace","toUpperCase","parseInt","wdtAsUTC","writeTransportCode","ceil","byteLengthWithFill","S7Packet","seqNum","itemList","reqTime","timeoutError","part","maxPart","isOptimized","resultReference","itemReference","clone","newObj","NaN","itemListSorter","arg","isQualityOK","obj","isArray","getNextSeqNum","setTranslationCB","cb","initiateConnection","connection_name","connectNow","dropConnection","clearTimeout","end","connectionCleanup","connect","destroy","connectError","apply","once","onTCPConnect","arguments","e","readWriteError","connectionReset","packetTimeout","packetType","packetSeqNum","readResponse","findReadIndexOfSeqNum","findWriteIndexOfSeqNum","outputLog","connBuf","remoteAddress","remotePort","onISOConnectReply","onClientDisconnect","onClientClose","removeAllListeners","onPDUReply","partnerMaxParallel1","partnerMaxParallel2","partnerPDU","onResponse","writeItems","splice","prepareWritePacket","isReading","sendWritePacket","findItem","commstate","addItems","action","addItemsNow","removeItems","removeItemsNow","j","readAllItems","isWaiting","forEach","format","prepareReadPacket","sendReadPacket","clearReadPacketTimeouts","clearWritePacketTimeouts","requestList","requestNumber","sort","block","maxByteRequest","floor","thisRequest","startByte","lengthOffset","parts","requestReference","numItems","copy","packetWriteLength","thisPacketNumber","Error","thisBlock","isOptimizableArea","max","packetReplyLength","packetRequestLength","flagReconnect","process","hrtime","dataBuffer","itemBuffer","dataBufferPointer","newBuffer","area","foundSeqNum","isReadResponse","isWriteResponse","packetCounter","anyBadQualities","dataPointer","itemCount","round","every","k","resetNow","dataObject","fs","Variable","VariableSystem","DataType","node","checkVariableTypeNumber","variable","Number","saveLogData","LocalDB","serialize","tempText","newTempText","substring","json","result","message","random","now","parent","idDevice","typeObject","tag","previousValue","newValue","nameObject","user","console","log","refreshLogData","error","saveAlarmData","typeAlarm","alarmText","alarmAtOn","alarmAtOff","typeSnackBar","setLogServer","logServer","ReadWordOfPlcToByte","Start","LengthOfWord","Values","byteArray","index","byte","StringToAscii","str","arrOut","ReadBitOfPLC","WordStart","ReadBitOfPLCSiemens","ReadWordOfPLC","ArrayTemp","ReadDWordOfPLCSiemens","LengthOfWord1","ReadDWordOfPLC","ConvertArray2Text","CheckChangeValue","OldVariable","val","CheckNegativeNumber","nb","getRandomInt","saveJsonFile","path","dataStore","existsSync","writeFile","JSON","stringify","getJsonFile","readFile","parse","saveFeedbackFile","convertPosCobot","pos0","pos1","getIndexCobotWriteMB","indexBit","ReadStringOfPLC","LengthOfString","TempArr","ReadStringOfPLCModbus","ArrayString","jj","getDateTime","saveLog","file","text","appendFile","ReadReal2OfPLC","ArrayBuffer","ints","Uint16Array","floats","Float32Array","ReadStringOfPLC_NodeRed","ReadStringFlexible","iWordStart","iLengthOfString","ProcessSocketIO_Fins","NameCommand","typeDevice","PLC_WriteUnSafe","PLC_LengthOfWordBitAdjust","TimeDelayWriteWordBitAdjust","OldWordBitAdjust","WordBitAdjust","mask","numberWordOfBitAdjust","PLC_WordStartBitAdjust","currentWordOfBitAdjust","COMMUNICATION_PLC_OMRON","enableLogData","SubFunction","currentUser","PLC_LengthOfWordWordAdjust","PLC_WordStartWordAdjust","heightValueDWordAdjust","lowValueDWordAdjust","PLC_WordStartDWordAdjust","myBuffer","arrResult","TextFieldInput","ProcessSocketIO_Fins_Flexible","tempTag","Word","Bit","WordAdjust","dataType","DataWrite","tempValue","ProcessSocketIO_Modbus","oldValue","BitAdjust","COMMUNICATION_PLC_MODBUS","writeSingleCoil","then","resp","hasOwnProperty","currentCoil","Coil","writeSingleRegister","writeMultipleRegisters","view","DataView","setFloat32","lowWord","getUint16","highWord","PLC_NumberWordInString","PLC_WordStartString","ProcessSocketIO_Modbus_Server","StoreModbusServerReg","PLC_WordStartComPC","PLC_Code_BitAdjust","PLC_Code_WordAdjust","PLC_Code_DWordAdjust","ProcessSocketIO_ProfiNet","sanitizeVariableName","input","sanitized","currentValue","Communication_Profinet_Raw_Result","_id","COMMUNICATION_SIEMENS","ProcessSocketIO_System","BitDisplay","ListString","WordDisplay","DWordAdjust","DWordDisplay","ProcessSocketIO_OPCUA","nodeIdToWrite","valueToWrite","Boolean","COMMUNICATION_OPCUA","writeSingleNode","ProcessSocketIO_ACE","COMMUNICATION_ACE_SOCKET","haveChangeArrElement","haveChangeArrBit","haveChangeArrBitAdjust","haveChangeArrBitDisplay_SetupAlarm","haveChangeArrBitDisplay","haveChangeArrWordAdjust","haveChangeArrWordDisplay","haveChangeArrNumber","haveChangeArrGauge","haveChangeArrProgressBar","haveChangeArrSlider","haveChangeArrDWordAdjust","haveChangeArrDWordDisplay","haveChangeArrRealDisplay","haveChangeArrString","haveChangeArrTextField","haveChangeArrTextFieldInput","map","StoreModbusServerBit","Element","OldElement","OldBit","OldBitDisplay","OldBitAdjust","OldWordDisplay","OldNumber","OldWordAdjust","DWord","OldDWord","OldWord","OldDWordDisplay","RealDisplay","OldRealDisplay","OldDWordAdjust","TextField","OldTextField","OldTextFieldInput","OldListString","ListTagBit","ListTagNumber","ListTagString","turnOff","logs","oldLogServer","Plc_Connect_Status","Timer_Check_Connect_Status","namePallet","ValueCommunicationPLC","ListUserPass","WritePosCobot","resultImage","refreshDataSubScreenImageLibrary","refreshDataBitDisplayImageLibrary","refreshDataBitAdjustImageLibrary","resultBitImageLibrary","resultBitDisplayImageLibrary","resultBitAdjustImageLibrary","refreshDataMapImageLibrary","resultSubScreenImageLibrary","resultMapImageLibrary","refreshDataElementImageLibrary","resultElementImageLibrary","refreshDataElement","refreshDataElementWord","refreshDataBitAdjust","refreshDataBit","refreshDataBitDisplay","refreshDataMap","refreshDataWordAdjust","refreshDataWordDisplay","refreshDataNumber","refreshDataDWordAdjust","refreshDataDWordDisplay","refreshDataImage","refreshDataLabel","refreshDataString","refreshDataMemonic","refreshDataLine","refreshDataPoint","refreshDataPointPickPlace","refreshDataPanel","refreshDataCameraStream","refreshDataViewImage","refreshDataGridView","refreshDataDateTimePicker","refreshDataChart","refreshDataProjectCall","refreshDataPalletizer","refreshDataPalletizerProduct","refreshDataTextField","refreshDataTextFieldInput","refreshDataGroupControl","refreshDataRealDisplay","refreshDataJoystick","haveChangeElement","haveChangeBitAdjust","haveChangeBit","haveChangeBitDisplay","haveChangeMap","haveChangeWordAdjust","haveChangeWordDisplay","haveChangeNumber","haveChangeDWordAdjust","haveChangeDWordDisplay","haveChangeTextField","haveChangeTextFieldInput","haveChangeRealDisplay","haveChangeJoystick","Modbus_Client_HoldingRegister","Modbus_Client_InputRegister","Modbus_Client_Coil","Modbus_Client_DiscreteInput","Communication_OPC_Items","Communication_PLC_Number_Address","Communication_ACE_Items","Communication_PLC_Word_Address","Communication_PLC_Bit_Address","Communication_PLC_Bit_Address_String","Communication_Profinet_Items","Communication_Profinet_Items_Number","Communication_Profinet_Items_Bit","Communication_Profinet_Items_String","Communication_Profinet_Items_Number_Popup","Communication_Profinet_Items_Bit_Popup","Communication_Profinet_Items_String_Popup","Communication_Profinet_Items_Gauge","Communication_Profinet_Items_ProgressBar","Communication_Profinet_Items_Slider","Temp_ProfiNet_Items_Number","Temp_ProfiNet_Items_Bit","Communication_PLC_String_Start_Address","Communication_PLC_String_Length","refreshDataPercent","resultPercent","Percent","OldPercent","haveChangePercent","Map","WordTag","DWordTag","IndexSocketInputSignal","IndexSocketBitAdjust","IndexSocketBitDisplay","IndexSocketWordDisplay","IndexSocketWordAdjust","IndexSocketDWordDisplay","IndexSocketDWordAdjust","CheckBitDisplay","CheckBitAdjust","CheckWordDisplay","CheckWordAdjust","CheckDWordDisplay","CheckDWordAdjust","resultlabel","resultline","resultElement","resultElementWord","resultBitDisplay","resultBitAdjust","resultBit","resultWordDisplay","resultNumber","resultWordAdjust","resultDWordDisplay","resultDWordAdjust","resultPanel","resultCameraStream","resultViewImage","resultGridView","resultDateTimePicker","resultChart","resultProjectCall","resultPalletizer","resultPalletizerProduct","resultTextField","resultTextFieldInput","resultRealDisplay","resultcustomeroperator","refreshdata","CustomerOperator","resultFlow","resultJoystick","resultDesign","resultDesignTable","resultPopup","refreshDataPosCobot","resultPosCobot","resultGroupControl","haveChangeString","ResultString","storeListString","refreshData3D","refreshDataDesign","refreshDataDesignTable","refreshDataDesignImageLibrary","refreshDataPopup","refreshDataPopupImageLibrary","refreshDataProduct","resultProduct","refreshDataUser","resultUser","LoadProductsToPLC","refreshDataGoal","resultGoal","refreshDataSampleRoute","resultSampleRoute","refreshDataFormularProject","resultFormularProject","resultFormularProjectConvertType","xlData","xlData2","refreshDataScaleProject","resultScaleProject","refreshDataSearchBox","resultSearchBox","refreshDataSearchBoxList","resultSearchBoxList","refreshDataReportScaleProject","resultReportScaleProject","refreshDataReportScaleProjectTonKho","resultReportScaleProjectTonKho","refreshDataProjectNanoenvi","resultProjectNanoenvi","resultProjectNanoenvi1","resultProjectNanoenvi2","resultProjectNanoenvi3","resultProjectNanoenvi4","refreshDataProjectStampingMachine","resultStampingMachineStartTime","ValueRotate","OldValueRotate","haveChangeValueRotate","StoreBoxPalletizer","StoragePallet","refreshStoragePallet","StoragePallet2","refreshStoragePallet2","StoragePalletManual","refreshStoragePalletManual","refreshScreen_Label","resultProjectScreen_Label","refreshScreen_Panel","resultProjectScreen_Panel","refreshScreen_CameraStream","resultProjectScreen_CameraStream","refreshScreen_Element","resultProjectScreen_Element","refreshScreen_BitDisplay","resultProjectScreen_BitDisplay","refreshScreen_BitAdjust","resultProjectScreen_BitAdjust","refreshScreen_WordDisplay","resultProjectScreen_WordDisplay","refreshScreen_WordAdjust","resultProjectScreen_WordAdjust","refreshScreen_DWordDisplay","resultProjectScreen_DWordDisplay","refreshScreen_DWordAdjust","resultProjectScreen_DWordAdjust","refreshScreen_String","resultProjectScreen_String","refreshScreen_TextFieldInput","resultProjectScreen_TextFieldInput","refreshScreen_Line","resultProjectScreen_Line","refreshSetupElement","resultSetupElement","refreshDataSetupAlarm","resultSetupAlarm","resultSetupAlarmTable","resultSetupAlarmTable_BitDisplay","resultSetupAlarmTable_BitAdjust","refreshDataBitImageLibrary","clientMB","clientMB_Writting","ComPC","refreshMemonic","haveChangeMemonic","resultMemonic","resultIconImageLibrary","refreshDataIconImageLibrary","resultImageBackgroundImageLibrary","refreshDataImageBackgroundImageLibrary","result3D","PositionMobileRobot","OldPositionMobileRobot","IO","PathLocalDB","ProjectPalletizer","COMMUNICATION_SERVER_TYPE","COMMUNICATION_MOBILE_ROBOT","COMMUNICATION_MOBILE_ROBOT_TIMER","COMMUNICATION_PLC_SIEMENS","COMMUNICATION_VNC","COMMUNICATION_VNC_INITIAL_DATA","PLC_WordStartElement","PLC_LengthOfWordElement","PLC_WordStartBitDisplay","PLC_LengthOfWordBitDisplay","PLC_BitStartBitDisplay","PLC_LengthOfBitBitDisplay","PLC_BitStartBitAdjust","PLC_LengthOfBitBitAdjust","PLC_WordStartWordDisplay","PLC_LengthOfWordWordDisplay","PLC_WordStartDWordDisplay","PLC_LengthOfWordDWordDisplay","PLC_LengthOfWordDWordAdjust","PLC_Length_ReadWrite","PLC_IntervalWriteData","PLC_WordStartRotate","PLC_LengthOfWordRotate","PLC_LengthOfWordComPC","PLC_Enable_String","PLC_LengthOfWordString","RefreshData","LS_Admin","AppController","constructor","socketGateway","scadaWordDisplayRefreshService","scadaNumberRefreshService","scadaGaugeRefreshService","scadaProgressBarRefreshService","scadaSliderRefreshService","scadaWordAdjustRefreshService","scadaDWordDisplayRefreshService","scadaElementRefreshService","scadaBitAdjustRefreshService","scadaBitRefreshService","scadaBitDisplayRefreshService","scadaDWordAdjustRefreshService","scadaStringRefreshService","scadaTextFieldRefreshService","scadaSetupAlarmRefreshService","setInterval","refreshData","server","exit","Controller","SocketGateway","ScadaWordDisplayRefreshService","ScadaNumberRefreshService","ScadaGaugeRefreshService","ScadaProgressBarRefreshService","ScadaSliderRefreshService","ScadaWordAdjustRefreshService","ScadaDWordDisplayRefreshService","ScadaElementRefreshService","ScadaBitAdjustRefreshService","ScadaBitRefreshService","ScadaBitDisplayRefreshService","ScadaDWordAdjustRefreshService","ScadaStringRefreshService","ScadaTextFieldRefreshService","ScadaSetupAlarmRefreshService","AppModule","Module","imports","PostModule","NoteModule","SocketIoModule","SystemApiModule","ConfigModule","TypeOrmModule","forRootAsync","typeOrmConfigAsync","ScadaLabelModule","ScadaChartModule","ScadaUserModule","ScadaPanelModule","ScadaCameraStreamModule","ScadaViewImageModule","ScadaGridViewModule","ScadaDateTimePickerModule","ScadaSelectModule","ScadaGaugeModule","ScadaProgressBarModule","ScadaSliderModule","Scada3DModule","ScadaBitModule","ScadaConnectionModule","ScadaNavigateModule","ScadaPrintModule","ScadaReportModule","ScadaBitAdjustModule","ScadaWordAdjustModule","ScadaDWordAdjustModule","ScadaDesignModule","ScadaDesignTableModule","ScadaPopupModule","ScadaPopupImageLibraryModule","ScadaBitDisplayModule","ScadaWordDisplayModule","ScadaNumberModule","ScadaDWordDisplayModule","ScadaBitDisplayImageLibraryModule","ScadaBitAdjustImageLibraryModule","ScadaBitImageLibraryModule","ScadaNumberImageLibraryModule","ScadaNavigateImageLibraryModule","ScadaDesignImageLibraryModule","ScadaIconImageLibraryModule","ScadaBackgroundImageLibraryModule","ScadaMapImageLibraryModule","ScadaMapModule","ScadaStringModule","ScadaTextFieldModule","ScadaLineModule","ScadaElementImageLibraryModule","ScadaElementModule","ScadaMemonicModule","MicroserviceClientModule","MqttModule","ScadaSetupAlarmModule","ScadaTotalModule","SharedModule","controllers","providers","ConfigService","envFilePath","__dirname","envConfig","dotenv","readFileSync","get","Injectable","inject","useFactory","async","configService","database","entities","BackgroundImageLibraryEntity","UserEntity","BitAdjustEntity","BitEntity","ConnectionEntity","NavigateEntity","PrintEntity","ReportEntity","BitImageLibraryEntity","NumberImageLibraryEntity","NavigateImageLibraryEntity","BitAdjustImageLibraryEntity","BitDisplayEntity","BitDisplayImageLibraryEntity","DesignImageLibraryEntity","DesignEntity","DesignTableEntity","PopupEntity","PopupImageLibraryEntity","DWordAdjustEntity","DWordDisplayEntity","ElementEntity","ElementImageLibraryEntity","IconImageLibraryEntity","LabelEntity","ChartEntity","LineEntity","MapEntity","MapImageLibraryEntity","MemonicEntity","PanelEntity","CameraStreamEntity","ViewImageEntity","GridViewEntity","DateTimePickerEntity","SelectEntity","GaugeEntity","ProgressBarEntity","SliderEntity","_3DEntity","StringEntity","TextFieldEntity","WordAdjustEntity","WordDisplayEntity","NumberEntity","SetupAlarmEntity","synchronize","MicroserviceClientController","microserviceClientService","sendMessage","Get","MicroserviceClientService","client","ClientProxyFactory","create","transport","Transport","MQTT","toPromise","MqttService","onModuleInit","mqttClient","initializeMqttClient","env","MQTT_HOST","MQTT_PORT","clientId","connectUrl","clean","reconnectPeriod","publish","retain","resultString","topic","payload","Scada3DController","scada3DService","getData","insert3D","requestBody","update3D","delete3D","Post","Body","Put","Delete","Scada3DService","PrimaryGeneratedColumn","Column","nullable","Entity","forFeature","_3DRepository","setupDataRefreshInterval","intervalId","fetchDataAndUpdate","find","_3DData","new3D","save","updateData","update","_3DId","delete","InjectRepository","Repository","ScadaBackgroundImageLibraryController","scadaBackgroundImageLibraryService","getDataQuery","screenName","upload","Query","ScadaBackgroundImageLibraryService","default","BackgroundImageLibraryRepository","query","name","img","enable","height","newBackgroundImageLibrary","id","ScadaBitAdjustImageLibraryController","scadaBitAdjustImageLibraryService","ScadaBitAdjustImageLibraryService","bitDisplayImageLibraryRepository","newBitAdjustImageLibrary","haveChange","tagBit","tagOn","tagOff","notOff","notOn","tagFault","resultLine","typeTag","ScadaBitAdjustController","scadaBitAdjustService","insertBitAdjust","updateBitAdjust","deleteBitAdjust","ScadaBitAdjustService","bitAdjustRepository","includes","bitAdjustData","newBitAdjust","bitAdjustId","ScadaBitDisplayImageLibraryController","scadaBitDisplayImageLibraryService","ScadaBitDisplayImageLibraryService","newBitDisplayImageLibrary","ScadaBitDisplayController","scadaBitDisplayService","insertBitDisplay","updateBitDisplay","deleteBitDisplay","ScadaBitDisplayService","bitDisplayRepository","tagRotate","bitDisplayData","newBitDisplay","bitDisplayId","ScadaBitImageLibraryController","scadaBitImageLibraryService","ScadaBitImageLibraryService","newBitImageLibrary","mqttService","sharedService","isObject","sendRaw","Scada_Bit_Return","tagEnableView","nameTag","Scada_Number_Return","negative","swapHighLow","RawElement","tempState","SharedService","ScadaBitController","scadaBitService","insertBit","updateBit","deleteBit","ScadaBitService","bitRepository","Scada_Bit_Add","mergeArrays","arrays","merged","arr","item","assign","bitData","newBit","bitId","ScadaCameraStreamController","scadaCameraStreamService","insertCameraStream","updateCameraStream","deleteCameraStream","ScadaCameraStreamService","cameraStreamRepository","cameraStreamData","newCameraStream","cameraStreamId","ScadaChartController","scadaChartService","insertChart","updateChart","deleteChart","ScadaChartService","chartRepository","resultchart","chartData","newChart","chartId","ScadaConnectionController","scadaConnectionService","insert","ScadaConnectionService","connectionRepository","refreshDataConnection","resultConnection","connectionData","newConnection","connectionId","ScadaDateTimePickerController","scadaDateTimePickerService","insertDateTimePicker","updateDateTimePicker","deleteDateTimePicker","ScadaDateTimePickerService","dateTimePickerRepository","dateTimePickerData","newDateTimePicker","dateTimePickerId","ScadaDesignImageLibraryController","scadaDesignImageLibraryService","ScadaDesignImageLibraryService","designImageLibraryRepository","resultDesignImageLibrary","newDesignImageLibrary","ScadaDesignController","scadaDesignService","insertDesign","updateDesign","deleteDesign","ScadaDesignService","designRepository","designData","newDesign","designId","ScadaDesignTableController","scadaDesign_tableService","insertDesign_table","updateDesign_table","deleteDesign_table","ScadaDesignTableService","design_tableRepository","design_tableData","newDesign_table","design_tableId","ScadaDWordAdjustController","scadaDWordAdjustService","insertDWordAdjust","updateDWordAdjust","deleteDWordAdjust","ScadaDWordAdjustService","dwordAdjustRepository","dwordAdjustData","newDWordAdjust","dwordAdjustId","ScadaDWordDisplayController","scadaDWordDisplayService","insertDWordDisplay","updateDWordDisplay","deleteDWordDisplay","ScadaDWordDisplayService","dwordDisplayRepository","dwordDisplayData","newDWordDisplay","dwordDisplayId","ScadaElementImageLibraryController","scadaElementImageLibraryService","ScadaElementImageLibraryService","elementImageLibraryRepository","newElementImageLibrary","indexElement","ScadaElementController","scadaElementService","insertElement","updateElement","deleteElement","ScadaElementService","ElementRepository","childObject","rawDataChildObject","tempNumber","scadaType","tempBit","ElementData","newElement","ElementId","resultGauge","ScadaGaugeController","scadaGaugeService","ScadaGaugeService","gaugeRepository","refreshDataGauge","OldGauge","Scada_Number_Add","gaugeData","newGauge","gaugeId","ScadaGridViewController","scadaGridViewService","insertGridView","updateGridView","deleteGridView","ScadaGridViewService","gridViewRepository","gridViewData","newGridView","gridViewId","ScadaIconImageLibraryController","scadaIconImageLibraryService","ScadaIconImageLibraryService","newIconImageLibrary","ScadaLabelController","scadaLabelService","insertLabel","updateLabel","deleteLabel","ScadaLabelService","labelRepository","labelData","newLabel","labelId","ScadaLineController","scadaLineService","insertLine","updateLine","deleteLine","ScadaLineService","lineRepository","lineData","newLine","lineId","ScadaMapImageLibraryController","scadaMapImageLibraryService","ScadaMapImageLibraryService","newMapImageLibrary","ScadaMapController","scadaMapService","getPosition","insertMap","updateMap","deleteMap","ScadaMapService","mapRepository","resultMap","mapData","newMap","mapId","ScadaMemonicController","scadaMemonicService","insertMemonic","updateMemonic","deleteMemonic","ScadaMemonicService","memonicRepository","resultmemonic","memonicData","newMemonic","memonicId","ScadaNavigateImageLibraryController","scadaNavigateImageLibraryService","ScadaNavigateImageLibraryService","navigateDisplayImageLibraryRepository","refreshDataNavigateImageLibrary","resultNavigateImageLibrary","newNavigateImageLibrary","ScadaNavigateController","scadaNavigateService","insertNavigate","updateNavigate","deleteNavigate","ScadaNavigateService","navigateRepository","refreshDataNavigate","resultNavigate","navigateData","newNavigate","navigateId","ScadaNumberImageLibraryController","scadaNumberImageLibraryService","ScadaNumberImageLibraryService","numberDisplayImageLibraryRepository","refreshDataNumberImageLibrary","resultNumberImageLibrary","newNumberImageLibrary","ScadaNumberController","scadaNumberService","getDataRaw","insertNumber","updateNumber","deleteNumber","ScadaNumberService","numberRepository","numberData","newNumber","numberId","ScadaPanelController","scadaPanelService","insertPanel","updatePanel","deletePanel","ScadaPanelService","panelRepository","panelData","newPanel","panelId","ScadaPopupImageLibraryController","scadaPopupImageLibraryService","ScadaPopupImageLibraryService","popupImageLibraryRepository","resultPopupImageLibrary","newPopupImageLibrary","ScadaPopupController","scadaPopupService","insertPopup","updatePopup","deletePopup","ScadaPopupService","popupRepository","temp_ProfiNet_Items_Number","temp_ProfiNet_Items_String","popupData","newPopup","popupId","ScadaPrintController","scadaPrintService","ScadaPrintService","printRepository","refreshDataPrint","resultPrint","printData","newPrint","printId","resultProgressBar","ListTagProgressBar","ScadaProgressBarController","scadaProgressBarService","ScadaProgressBarService","progressBarRepository","refreshDataProgressBar","progressBarData","newProgressBar","progressBarId","ScadaReportController","scadaReportService","ScadaReportService","reportRepository","refreshDataReport","resultReport","reportData","newReport","reportId","ScadaSelectController","scadaSelectService","ScadaSelectService","selectRepository","refreshDataSelect","resultSelect","selectData","newSelect","selectId","oldArrActiveAlarm","ArrActiveAlarm","logic","eval","enableAlarm","ScadaSetupAlarmController","scadaSetupAlarmService","getDataSetupAlarmTable","insertSetupAlarm","updateSetupAlarm","deleteSetupAlarm","ScadaSetupAlarmService","setupAlarmRepository","setupAlarmData","newSetupAlarm","setupAlarmId","resultSlider","HoldingRegister","InputRegister","ScadaSliderController","scadaSliderService","ScadaSliderService","sliderRepository","refreshDataSlider","sliderData","newSlider","sliderId","ScadaStringController","scadaStringService","insertString","updateString","deleteString","ScadaStringService","stringRepository","Scada_String_Add","numberCharacter","stringData","newString","stringId","ScadaTextFieldController","scadaTextFieldService","insertTextField","updateTextField","deleteTextField","ScadaTextFieldService","textFieldRepository","textFieldData","newTextField","textFieldId","ScadaTotalController","scadaTotalService","ScadaTotalService","designTableRepository","elementRepository","viewImageRepository","entityManager","totalData","transaction","manager","tempMap","CameraStream","Chart","DateTimePicker","Design","DesignTable","Gauge","ProgressBar","Slider","GridView","Label","Line","Navigate","Panel","Popup","Print","Select","SetupAlarm","ViewImage","_3D","Report","objectType","groupedData","reduce","acc","EntityManager","AuthDTO","IsNotEmpty","IsString","ScadaUserController","scadaUserService","signup","body","signin","userCheck","verify","token","updateUser","deleteUser","ScadaUserService","unique","JwtModule","register","global","secret","signOptions","expiresIn","JwtStrategy","userRepository","jwtService","userDTO","hashedPassword","argon","hash","password","newUser","levelUser","userInfo","createQueryBuilder","where","getOne","NotFoundException","ForbiddenException","signJwtToken","arrIdPageAccess","userId","sub","accessToken","signAsync","info","verifyAsync","JwtService","PassportStrategy","Strategy","super","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","validate","findOneBy","ScadaViewImageController","scadaViewImageService","insertViewImage","updateViewImage","deleteViewImage","ScadaViewImageService","viewImageData","newViewImage","viewImageId","ScadaWordAdjustController","scadaWordAdjustService","insertWordAdjust","updateWordAdjust","deleteWordAdjust","ScadaWordAdjustService","wordAdjustRepository","wordAdjustData","newWordAdjust","wordAdjustId","rotate","ScadaWordDisplayController","scadaWordDisplayService","insertWordDisplay","updateWordDisplay","deleteWordDisplay","ScadaWordDisplayService","wordDisplayRepository","wordDisplayData","newWordDisplay","wordDisplayId","low","high","combined_value","real","parseFloat","toFixed","sanitizedTag","DiscreteInput","handleConnection","args","setMaxListeners","handleDisconnect","handleMessage","WebSocketServer","Server","SubscribeMessage","WebSocketGateway","transports","SystemApiController","systemApiService","responsesocket","getPort","SystemApiService","PORT","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","defaultMaxListeners","RED","si","bcrypt","compareAsync","value1","value2","Promise","resolve","reject","compare","app","NestFactory","cors","use","bodyParser","limit","urlencoded","extended","useGlobalPipes","ValidationPipe","license","User_Nodered","system","virtual","manufacturer","model","containerId","line","uuid","serial","checkActive","freeze","version","settings","uiHost","httpAdminRoot","httpNodeRoot","userDir","functionGlobalContext","sqlite3","report_excel","minify","uglifyJS","flowFile","adminAuth","users","username","permissions","sessionExpiryTime","functionExternalModules","credentialSecret","startupTimeout","safeMode","flowFilePretty","logging","level","metrics","audit","tempArr","getHttpServer","httpAdmin","httpNode","start","listen","bootstrap"],"sourceRoot":""}